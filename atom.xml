<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛8的个人网站 - xue8&#39;s Blog - DDND.CN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ddnd.cn/"/>
  <updated>2018-11-29T14:54:09.461Z</updated>
  <id>http://ddnd.cn/</id>
  
  <author>
    <name>薛8</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/29/Mybatis-Introduction/"/>
    <id>http://ddnd.cn/2018/11/29/Mybatis-Introduction/</id>
    <published>2018-11-29T13:49:11.000Z</published>
    <updated>2018-11-29T14:54:09.461Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>什么是Mybatis？维基百科是这样定义的：Mybatis是一个Java持久化框架，它通过<strong>XML描述符</strong>或<strong>注解</strong>把对象与储存过程或SQL语句关联起来。通俗点说就是Mybatis是对<strong>JPA</strong>（Java持久化API，一个Java应用程序<strong>接口</strong>规范）的实现，是为了简化数据库操作过程而衍生出来的产品。<br>关于Mybatis的教程，推荐到官方文档看：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方文档</a></p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpb9imgc0j20dn0ffq3j.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>本文中用到的Jar依赖包有：Mybatis包、Mysql驱动包。<br>pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建Mybatis配置文件"><a href="#创建Mybatis配置文件" class="headerlink" title="创建Mybatis配置文件"></a>创建Mybatis配置文件</h1><p>新建Mybatis-config.xml文件，完成对Mybatis的配置。其中<code>cn/ddnd/www/Entity/User.xml</code>是包含要映射的类的xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;cn/ddnd/www/Entity/User.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。<br>数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据表对应的实体类"><a href="#新建数据表对应的实体类" class="headerlink" title="新建数据表对应的实体类"></a>新建数据表对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建User类的对应映射层"><a href="#新建User类的对应映射层" class="headerlink" title="新建User类的对应映射层"></a>新建User类的对应映射层</h1><p>在User类的路径下新建User.xml完成对对象的映射。<code>resultType=&quot;User&quot;</code>中的<code>User</code>为Mybatis配置文件中的<code>&lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</code>所指定的<code>User</code>别名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Entity.User&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>新建一个测试类，查找邮箱是<a href="mailto:xue8@qq.com" target="_blank" rel="noopener">xue8@qq.com</a>的用户信息。<br>test.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import sun.awt.geom.AreaOp;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据表信息：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbahhgrdj20cf04x3yk.jpg" alt=""></p><p>测试结果：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbb0l37lj20on04i74i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Tomcat自带的连接池实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/"/>
    <id>http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/</id>
    <published>2018-11-26T11:12:06.000Z</published>
    <updated>2018-11-26T12:51:04.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们已经用<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Spring和传统的Jdbc实现数据库操作</a>、<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/">Spring和JdbcTemplate实现数据库操作</a>。但是这些都是基于<strong>直连的数据源</strong>进行的，现在我们将介绍基于<strong>连接池的数据源</strong>进行数据库操作。前面几个步骤都相同。<br><a id="more"></a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlomtejdlj20k20dm3zg.jpg" alt=""></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlop5qno4j20yy0hytb5.jpg" alt=""></p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。<br>UserDao.java：</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloq9510lj20s50haabs.jpg" alt=""><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><p>UserDaoImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line">import javax.naming.NamingException;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private Connection connection;</span><br><span class="line"></span><br><span class="line">    //构造函数 向连接池获得连接</span><br><span class="line">    UserDaoImpl()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Context initContext = new InitialContext();</span><br><span class="line">            DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br><span class="line">            connection = ds.getConnection();</span><br><span class="line">        &#125;catch (NamingException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(&quot;insert into user(name,email,password) values(?,?,?)&quot;);</span><br><span class="line">            ps.setString(1,user.getName());</span><br><span class="line">            ps.setString(2,user.getEmail());</span><br><span class="line">            ps.setString(3,user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloqs9hebj21c80i7tc1.jpg" alt=""><br>注意这里，通过JNDI查找到数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Context initContext = new InitialContext();</span><br><span class="line">DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br></pre></td></tr></table></figure></p><p>然后<code>connection = ds.getConnection();</code>在数据源中获取一个连接对象。</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><h2 id="配置context-xml"><a href="#配置context-xml" class="headerlink" title="配置context.xml"></a>配置context.xml</h2><p>在webapp中新建一个<code>META-INF</code>文件夹，然后新建个<code>context.xml</code>来配置数据源。<br>context.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Context&gt;</span><br><span class="line">    &lt;Resource name=&quot;jdbc/dataSource&quot;</span><br><span class="line">              auth=&quot;Container&quot;</span><br><span class="line">              factory=&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span><br><span class="line">              type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">              url=&quot;jdbc:mysql://localhost:3306/spring&quot;</span><br><span class="line">              username=&quot;root&quot;</span><br><span class="line">              password=&quot;root&quot;</span><br><span class="line">              maxTotal=&quot;100&quot;</span><br><span class="line">              maxIdle=&quot;30&quot;</span><br><span class="line">              maxWaitMillis=&quot;1000&quot;</span><br><span class="line">              driverClassName=&quot;com.mysql.jdbc.Driver&quot;&gt;</span><br><span class="line">    &lt;/Resource&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6q1be5j213l0hgact.jpg" alt=""></p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>在web.xml中配置context.xml的引用关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6j5a2vj20yj0iwju9.jpg" alt=""></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>由于TomcatDBCP是内置在Tomcat容器的连接池，所以要使用这个连接池得运行Tomcat，接下来我们编写在Tomcat容器中实现连接池操作数据库。</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ol><li>新建一个测试类，来测试我们的连接池操作数据库。需要注意的是，<code>servlet</code>的生命周期是由<strong>servlet容器管理</strong>（如Tomcat）的，而Spring的Bean是由<strong>Srping容器</strong>管理的，所以我们在servlet容器中是无法使用<code>@Autowired</code>等Spring的注解的，那么如何在Spring容器外面获取到Spring容器的Bean实例呢？这就需要用到Spring为我们提供的<code>WebApplicationContextUtils</code>工具类，该工具的作用是获取到Spring容器的引用，进而获得我们需要的Bean实例。<br>test.java：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.test;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.impl.UserDaoImpl;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class test extends HttpServlet&#123;</span><br><span class="line"></span><br><span class="line">    private UserDaoImpl userDaoImpl;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest args, HttpServletResponse args1) throws ServletException &#123;</span><br><span class="line">        //获取spring的bean</span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;context.xml&quot;);</span><br><span class="line">        this.userDaoImpl = (UserDaoImpl) applicationContext.getBean(&quot;userDaoImpl&quot;);</span><br><span class="line"></span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue811&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDaoImpl.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr03bqm4j21920ip77l.jpg" alt=""></p><ol start="2"><li>我们在resources中新建一个context.xml进行配置Bean。<br>context.xml：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr0b6970j212w0j6adc.jpg" alt=""></p><h2 id="Web配置"><a href="#Web配置" class="headerlink" title="Web配置"></a>Web配置</h2><p>在<code>web.xml</code>配置文件中添加servlet，来处理请求。我们将/index的请求让<code>cn.biecheng.www.test.test</code>测试类进行处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;cn.biecheng.www.test.test&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/index&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我们在IDEA运行后，在浏览器中输入<code>http://localhost:8080/index</code>，即可在数据库中发现数据已插入。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr50y7zhj20qc0ebmyi.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面我们已经用&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Spring和传统的Jdbc实现数据库操作&lt;/a&gt;、&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/&quot;&gt;Spring和JdbcTemplate实现数据库操作&lt;/a&gt;。但是这些都是基于&lt;strong&gt;直连的数据源&lt;/strong&gt;进行的，现在我们将介绍基于&lt;strong&gt;连接池的数据源&lt;/strong&gt;进行数据库操作。前面几个步骤都相同。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="TomcatDBCP" scheme="http://ddnd.cn/tags/TomcatDBCP/"/>
    
      <category term="连接池" scheme="http://ddnd.cn/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Spring和JdbcTemplate实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/</id>
    <published>2018-11-19T09:49:06.000Z</published>
    <updated>2018-11-25T08:07:29.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完<a href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Srping和传统JDBC实现数据库操作</a>之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的<code>JdbcTemplate</code>就很有必要了，当然JdbcTemplate也是<strong>直连的数据源</strong>。<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">传统JDBC和JdbcTemplate区别</a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc38c95c?w=1351&amp;h=622&amp;f=png&amp;s=107313" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc8957d5?w=1060&amp;h=591&amp;f=png&amp;s=81342" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate)&#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dcac1fea?w=1349&amp;h=635&amp;f=png&amp;s=113118" alt="在这里插入图片描述"><br>注意：看这里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br></pre></td></tr></table></figure></p><p>一行代码即可实现插入功能，和传统的JDBC相比实现插入真的是简单到不行吧！</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--装配UserDaoImpl类--&gt;</span><br><span class="line">    &lt;bean id=&quot;userDaoImple&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置jdbcTemplate--&gt;</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--建立连接--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2deb347b9?w=1466&amp;h=623&amp;f=png&amp;s=169046" alt="在这里插入图片描述"><br>数据源配置的过程大概是这样的</p><ul><li>通过<code>org.springframework.jdbc.datasource.DriverManagerDataSource</code>建立<strong>数据源连接</strong>（连接对象Connection）</li><li>配置JdbcTemplate，其中<code>ref=&quot;dataSource&quot;</code>的dataSource为数据源连接的id</li><li>装配装配<code>UserDaoImpl</code>类，将JdbcTemplate对象<strong>注入</strong>到UserDaoImpl类的名为jdbcTemplate成员属性中</li></ul><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;DataSource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.biecheng.www&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2defc2e0a?w=1337&amp;h=605&amp;f=png&amp;s=134263" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes = &#123;cn.biecheng.www.Config.Config.class&#125;)</span><br><span class="line">public class test &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue8&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f34894bc9e?w=1457&amp;h=634&amp;f=png&amp;s=142401" alt="在这里插入图片描述"></p><p>运行测试类。<br>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2df477aab?w=475&amp;h=155&amp;f=png&amp;s=12345" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看完&lt;a href=&quot;http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Srping和传统JDBC实现数据库操作&lt;/a&gt;之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的&lt;code&gt;JdbcTemplate&lt;/code&gt;就很有必要了，当然JdbcTemplate也是&lt;strong&gt;直连的数据源&lt;/strong&gt;。&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;传统JDBC和JdbcTemplate区别&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Srping和传统JDBC实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/</id>
    <published>2018-11-19T04:04:36.000Z</published>
    <updated>2018-11-25T08:06:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习完了<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">Spring对JDBC的支持</a>和<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">【JAVA】JAVA数据源</a>之后，那我们就可以进行数据库的操作了。</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail()&#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword()&#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password)&#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b533fc07" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User User);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b6573640?w=1270&amp;h=677&amp;f=png&amp;s=92459" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public void setDataSource(DataSource dataSource)&#123;</span><br><span class="line">        this.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user)&#123;</span><br><span class="line">        String sql = &quot;INSERT INTO `spring`.`user` (`email`, `name`, `password`) VALUES (?, ?,?)&quot;;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(1, user.getEmail());</span><br><span class="line">            ps.setString(2, user.getName());</span><br><span class="line">            ps.setString(3, user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;catch(SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b5bcbf45?w=1781&amp;h=738&amp;f=png&amp;s=203125" alt="在这里插入图片描述"><br>这里直接用了传统的JDBC，没有使用Spring的JdbcTemplate或者别的ORM框架。<a href="https://blog.csdn.net/xueba8/article/details/84065855" target="_blank" rel="noopener">传统JDBC和Spring的JdbcTemplate区别</a><br><code>private DataSource dataSource;</code>这里对</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b7cc7f72?w=1708&amp;h=627&amp;f=png&amp;s=196146" alt="在这里插入图片描述"><br>这里为了方便直接使用了<strong>直连的数据源</strong>（<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">关于直连的数据源和连接池的数据源</a>）,也可以使用连接池的数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>其中<code>name=&quot;dataSource&quot;</code>为向<code>cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl</code>这个类名为<code>dataSource</code>成员属性<strong>注入</strong>一个<code>id</code>为<code>dataSource</code>（<code>ref=&quot;dataSource&quot;</code>）的Bean（通过setter方法即<code>setDataSource</code>），也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>这样在<code>UserDao</code>的实现类<code>UserDaoImpl</code>就能完成了数据源的装配了。</p><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;Spring-Datasource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.zhenta.www.service.impl&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b9d7ab20?w=1407&amp;h=728&amp;f=png&amp;s=135454" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71e6636956?w=1553&amp;h=762&amp;f=png&amp;s=184494" alt="在这里插入图片描述"></p><p><code>ContextConfiguration</code> 指定Spring配置信息来源，<code>UserDao userDAO</code>引用UserDao接口，<code>User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;)</code>创建一个User实体类中储存我们要保存的数据，<code>userDAO.inSert(user)</code>通过接口的实现类插入数据。<a href="https://blog.csdn.net/xueba8/article/details/83898278" target="_blank" rel="noopener">接口的引用</a></p><p>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71ebceb2ef?w=409&amp;h=156&amp;f=png&amp;s=11100" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习完了&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;Spring对JDBC的支持&lt;/a&gt;和&lt;a href=&quot;https://blog.csdn.net/xueba8/article/details/84107204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【JAVA】JAVA数据源&lt;/a&gt;之后，那我们就可以进行数据库的操作了。&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JAVA数据源</title>
    <link href="http://ddnd.cn/2018/11/18/Java-DataSource/"/>
    <id>http://ddnd.cn/2018/11/18/Java-DataSource/</id>
    <published>2018-11-18T08:00:19.000Z</published>
    <updated>2018-11-25T08:02:14.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在进行数据访问，声明模板和repository之前<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">【JAVA】Spring对JDBC的支持</a>，都需要配置<strong>数据源</strong>用来连接数据库。数据源又可以分为两大类：<strong><em>直连的数据源</em></strong> 和 <strong><em>连接池的数据源</em></strong> ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道<strong>连接池</strong>、<strong>数据源</strong>、<strong>JNDI</strong>是什么，分别从当什么角色，有什么作用。</p><h1 id="连接池、数据源、JNDI"><a href="#连接池、数据源、JNDI" class="headerlink" title="连接池、数据源、JNDI"></a>连接池、数据源、JNDI</h1><h2 id="连接池、数据源"><a href="#连接池、数据源" class="headerlink" title="连接池、数据源"></a>连接池、数据源</h2><p>Java中的数据源就是连接到数据库的一条<strong>路径</strong>，数据源中并无真正的数据，它仅仅记录的是你连接到<strong>哪个数据库</strong>，以及<strong>如何连接</strong>。<code>DataSource</code>的创建可以有不同的实现。<code>DataSource</code>通常被称为数据源，它包含<strong>连接池</strong> 和<strong>连接池管理</strong> 两部分，习惯上也经常把<code>DataSource</code>称为连接池。<br><a id="more"></a></p><h3 id="连接池思想"><a href="#连接池思想" class="headerlink" title="连接池思想"></a>连接池思想</h3><p>在系统<strong>初始化</strong>的时候，将数据库<strong>连接对象（Connection）</strong> 存储在内存中，当用户需要访问数据库时候，并不是建立一个新的连接，而是从连接池中取出一个已经建立好的空闲连接对象。而连接池负责分配、管理、释放数据库连接对象。注意的是：连接池是由<strong>容器（比如tomcat）</strong> 提供的，同时容器也管理着连接池。</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p><strong>JNDI（Java Naming and Directory Interface，Java命名和目录接口）</strong>，JNDI是Java平台的一个标准扩展，提供一组接口、类和关于命名空间的概念。<strong><em>其功能通俗的来说，就是提供一个类似全局的map，key保存JNDI的名称，value保存你要放到里面的资源的引用（如Java对象），以后要想要获取value的资源即可通过<code>lookup</code>名称检索</em></strong>。<br>注意：需要区分开JNDI和通过JNDI查找的数据源的概念，不能将JNDI和连接池混为一谈。</p><ul><li>这套API的主要作用在于：它可以将<strong>Java对象</strong>放在一个容器中（支持JNDI的容器例如Tomcat），并且为容器中的Java对象取一个名称，以后程序想要获得Java对象，只要通过名称检索即可。</li><li>其核心API为Context，它代表JNDI容器，其lookup方法为检索容器中对应名称的对象。</li></ul><p><strong>使用JNDI访问Tomcat内置连接池</strong></p><ul><li>将数据库驱动的包复制到Tomcat的安装目录<code>/lib/</code>中，这样Tomcat服务器才能找到数据库驱动</li><li>编写访问JNDI程序，运行在Tomcat内部，所以通常运行在servlet、jsp中</li><li>在Tomcat启动时，自动加载配置文件（<code>context.xml</code>），创建数据库连接池，该连接池由Tomcat管理。<br><img src="https://user-gold-cdn.xitu.io/2018/11/18/16725f1f2310a0a7?w=1155&amp;h=650&amp;f=png&amp;s=36621" alt="在这里插入图片描述"></li></ul><h1 id="直连的数据源"><a href="#直连的数据源" class="headerlink" title="直连的数据源"></a>直连的数据源</h1><p>用户每次请求都需要向数据库<strong>获得连接</strong>，而数据库<strong>创建连接</strong>通常需要消耗相对较大的资源，创建的时间也较长。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f691cb3?w=896&amp;h=430&amp;f=png&amp;s=45745" alt="在这里插入图片描述"></p><h1 id="连接池的数据源"><a href="#连接池的数据源" class="headerlink" title="连接池的数据源"></a>连接池的数据源</h1><h2 id="连接池的思想"><a href="#连接池的思想" class="headerlink" title="连接池的思想"></a>连接池的思想</h2><p>数据库连接是一种关键的有限的昂贵的资源，如果每次访问数据库的时候，都需要进行数据库连接，那么势必会造成<strong>性能低下</strong>；同时，如果用户失误忘记释放数据库连接，会导致<strong>资源的浪费</strong>等。而数据库连接池就是刚好可以解决这些问题，通过管理连接池中的多个<strong>连接对象（Connection）</strong>，实现连接对象（connection）重复利用，从而大大提高了数据库连接方面的性能。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f73bc88?w=896&amp;h=490&amp;f=png&amp;s=80470" alt="在这里插入图片描述"></p><h2 id="常用的数据库连接池"><a href="#常用的数据库连接池" class="headerlink" title="常用的数据库连接池"></a>常用的数据库连接池</h2><h3 id="Tomcat内置的连接池（Tomcat-Dbcp）"><a href="#Tomcat内置的连接池（Tomcat-Dbcp）" class="headerlink" title="Tomcat内置的连接池（Tomcat Dbcp）"></a>Tomcat内置的连接池（Tomcat Dbcp）</h3><p>Tomcat在7.0以前的版本都是使用<strong>commons-dbcp</strong>作为连接池的实现，但是由于commons-dbcp饱受诟病。因此很多人会选择一些第三方的连接池组件，例如c3p0，bonecp等。为此，Tomcat从7.0开始引入了一个新的模块：Tomcat Jdbc Pool（Tomcat Dbcp）。<a href="https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html" target="_blank" rel="noopener">关于更多请看这里</a><br><strong>连接池的配置</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line">     &lt;Resource name=&quot;jdbc/login_register&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">           maxActive=&quot;100&quot; maxIdle=&quot;30&quot; maxWait=&quot;10000&quot;</span><br><span class="line">           username=&quot;root&quot; password=&quot;root&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">           url=&quot;jdbc:mysql://localhost:3306/db_user&quot;/&gt;</span><br><span class="line">           factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><strong>属性的说明</strong>：</p><ul><li>Resource：声明这个是<strong>资源</strong></li><li>name=指定Resource（资源）的<strong>JNDI名称</strong></li><li>auth=指定管理Resource的Manager(Container由容器创建和管理，Application由Web应用创建和管理) </li><li>factory：必需的属性，其值应为 <code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>type=指定Resource的java类（<strong>即指定JNDI能拿到的是什么类型的数据，<code>javax.sql.DataSource</code>这里指定为连接池对象</strong>）。类型应为 javax.sql.DataSource 或 javax.sql.XADataSource。根据类型，将创org.apache.tomcat.jdbc.pool.DataSource 或 org.apache.tomcat.jdbc.pool.XADataSource。</li><li>maxActive=指定连接池中处于活动状态的数据库连接的最大数量</li><li>maxIdle=指定连接池中处于空闲状态的数据库的最大数量</li><li>maxWait=指定连接池中连接处于空闲的最长时间，超过这个时间会提示异常，取值为-1，表示可以无限期等待，单位为毫秒（ms）</li></ul><p>我们需要注意的属性是<code>factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</code><br>如果你没有声明以上的属性，当<strong>Tomcat</strong>读到<code>type=&quot;javax.sql.DataSource&quot;</code>属性时也会<strong>自动</strong>安装<strong>DBCP</strong>，除非你指定不同的factory。</p><p>  <strong>连接池的获取</strong>：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Context c = new InitialContext();</span><br><span class="line">            DataSource dataSource = (DataSource) c.lookup(&quot;java:/comp/env/jdbc/login_register&quot;);//这里的jdbc/login_register和篇配置文件中的name属性一致</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            return conn;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <code>lookup</code>方法用于查找指定JNDI名称的连接池，<code>java:/comp/env/jdbc/login_registe</code>的<code>jdbc/login_registe</code>和配置文件中JNDI的名称相对应。这样既可查找到数据库连接池，也就能获得到连接对象了。当然，连接池的获取方式不只一种，比如还有通过配置文件来获取的，感兴趣的可以查阅资料。</p><p>  <strong>大概流程是这样的：</strong></p><ul><li>通过配置文件<code>Resource</code>声明资源为<strong>连接池</strong>类型（<code>javax.sql.DataSource</code>）的<strong>对象</strong></li><li>加载连接池factory，<code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>通过JNDI找到连接池资源</li></ul><p>通过这个例子我们看到了JNDI的作用，JNDI你可以理解成一个水池的门牌,连接池就相当于这个水池，应用要取到要访问数据库时,通过找到JNDI，然后再通过连接池和数据库所建立的连接来访问。</p><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能。C3P0是改写的<code>javax.sql.DataSource</code>。</p><p><strong>连接池的配置</strong><br>配置文件：c3p0-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">  &lt;default-config&gt;</span><br><span class="line">//默认是mysql数据库</span><br><span class="line">     &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">  &lt;/default-config&gt;</span><br><span class="line">//也可以用oracle数据库</span><br><span class="line">  &lt;named-config name=&quot;oracleConfig&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">   &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure></p><p><strong>连接池的获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> // 创建c3p0连接池核心工具类</span><br><span class="line">// 自动加载src下c3p0的配置文件【c3p0-config.xml】</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();// 使用默认的配置</span><br><span class="line">PreparedStatement pstmt = null;</span><br><span class="line">// 获取连接</span><br><span class="line">Connection con = dataSource.getConnection();</span><br><span class="line">//执行sql语句</span><br><span class="line">String sql=&quot;sql语句&quot;</span><br><span class="line">//执行</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">//关闭连接</span><br><span class="line">pstmt.close();</span><br><span class="line">con.close();</span><br></pre></td></tr></table></figure></p><p>注意：创建C3P0的连接池时候还可以在（）加上名称，连接指定配置文件中的连接池。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = </span><br><span class="line">      new ComboPooledDataSource(&quot;oracleConfig&quot;);</span><br></pre></td></tr></table></figure></p><p><strong>当然数据库连接池除了以上的配置、获取方式外，还有别的方式，例如用JNDI配置和获取的</strong>。</p><p><strong>连接池配置</strong><br><strong>在tomcat的context.xml里的<context>标签添加<resource>标签</resource></context></strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;jdbc/TestDB&quot; </span><br><span class="line">        auth=&quot;Container&quot; </span><br><span class="line">       factory=&quot;org.apache.naming.factory.BeanFactory&quot;</span><br><span class="line">       type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><br><span class="line">       driverClass=&quot;oracle.jdbc.driver.OracleDriver&quot;</span><br><span class="line">           jdbcUrl=&quot;jdbc:oracle:thin:@localhost:1521:XE&quot;</span><br><span class="line">           user=&quot;orcl&quot;</span><br><span class="line">           password=&quot;newsnews&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>不同数据源的 driverClass，jdbcUrl等 属性不同，依照连接池自身的属性配置，这里是使用的c3p0数据源，若使用其他数据源要修改属性。<code>jdbc/TestDB</code>为JNDI名称。</p><p><strong>在项目的web.xml添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;resource-ref&gt;</span><br><span class="line">    &lt;description&gt;DB Connection&lt;/description&gt;</span><br><span class="line">    &lt;res-ref-name&gt;jdbc/TestDB&lt;/res-ref-name&gt;</span><br><span class="line">    &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">    &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line"> &lt;/resource-ref&gt;</span><br></pre></td></tr></table></figure></p><p>res-ref-name引入context.xml里配置的Resource,res-type都设置为javax.sql.DataSource。</p><p><strong>在spring的applicationContext.xml配置里添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jndiName&quot; value=&quot;java:/comp/env/jdbc/TestDB&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h3><p><strong>DBCP（Database Connection Pool）</strong> 是一个依赖Jakarta commons-pool对象池机制的数据库连接池，Tomcat的数据源使用的就是DBCP。</p><p><strong>连接池配置</strong><br>dbcpconfig.properties文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/db_user</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=10</span><br><span class="line">maxActive=50</span><br><span class="line">maxIdle=20</span><br><span class="line">minIdle=5</span><br><span class="line">maxWait=60000</span><br><span class="line">connectionProperties=useUnicode=true;characterEncoding=utf8</span><br><span class="line">defaultAutoCommit=true</span><br><span class="line">defaultReadOnly=</span><br><span class="line">defaultTransactionIsolation=REPEATABLE_READ</span><br></pre></td></tr></table></figure></p><p><strong>连接池获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = getDataSource().getConnection();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static DataSource getDataSource()&#123;</span><br><span class="line">        DataSource dataSource=null;</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            p.load(DBUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));</span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(p);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;获取DataSource对象失败&quot;);</span><br><span class="line">        &#125; </span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h3><p>编写连接池需要实现<code>javax.sql.DataSource</code>接口，具体可以网上查阅相关资料。</p><h3 id="其他连接池"><a href="#其他连接池" class="headerlink" title="其他连接池"></a>其他连接池</h3><p>还有更多的连接池例如：Proxool、BoneCP、HikariCP、阿里druid等可以自行查阅资料。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上，介绍了几种常用的数据源连接池；这几种连接池在使用过程，即支持硬编码的方式，也支持配置文件的配置方式；在正式实用的时候，应该尽量使用配置的方式，便于维护和管理。硬编码的方式，可以做为测试使用。同时，spring框架，通过他自己的方式集成上述几种数据源，理论上来说，都支持。各个数据源连接池都有一些公有的属性，因为他们都是从javax.sql.datasource继 承而来，而且都有最大连接数，初始化连接数等概念。同时，他们又分别有各自不同的属性，做了扩展。这里只是简单的介绍，在实际使用中，想要实现高性能的数 据库连接池管理，还需要深入研究每种方式的连接属性配置；例如：根据实际需要，设置合适的最小连接数和最大连接数，等待时间等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在进行数据访问，声明模板和repository之前&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;【JAVA】Spring对JDBC的支持&lt;/a&gt;，都需要配置&lt;strong&gt;数据源&lt;/strong&gt;用来连接数据库。数据源又可以分为两大类：&lt;strong&gt;&lt;em&gt;直连的数据源&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;连接池的数据源&lt;/em&gt;&lt;/strong&gt; ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道&lt;strong&gt;连接池&lt;/strong&gt;、&lt;strong&gt;数据源&lt;/strong&gt;、&lt;strong&gt;JNDI&lt;/strong&gt;是什么，分别从当什么角色，有什么作用。&lt;/p&gt;
&lt;h1 id=&quot;连接池、数据源、JNDI&quot;&gt;&lt;a href=&quot;#连接池、数据源、JNDI&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源、JNDI&quot;&gt;&lt;/a&gt;连接池、数据源、JNDI&lt;/h1&gt;&lt;h2 id=&quot;连接池、数据源&quot;&gt;&lt;a href=&quot;#连接池、数据源&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源&quot;&gt;&lt;/a&gt;连接池、数据源&lt;/h2&gt;&lt;p&gt;Java中的数据源就是连接到数据库的一条&lt;strong&gt;路径&lt;/strong&gt;，数据源中并无真正的数据，它仅仅记录的是你连接到&lt;strong&gt;哪个数据库&lt;/strong&gt;，以及&lt;strong&gt;如何连接&lt;/strong&gt;。&lt;code&gt;DataSource&lt;/code&gt;的创建可以有不同的实现。&lt;code&gt;DataSource&lt;/code&gt;通常被称为数据源，它包含&lt;strong&gt;连接池&lt;/strong&gt; 和&lt;strong&gt;连接池管理&lt;/strong&gt; 两部分，习惯上也经常把&lt;code&gt;DataSource&lt;/code&gt;称为连接池。&lt;br&gt;
    
    </summary>
    
      <category term="Java编程基础" scheme="http://ddnd.cn/categories/Java-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring对JDBC的支持</title>
    <link href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/"/>
    <id>http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/</id>
    <published>2018-11-18T07:58:04.000Z</published>
    <updated>2018-11-25T07:59:28.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准<strong>接口</strong> JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的<strong>接口类</strong>，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。</p><p>利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在<strong>Java对象</strong>与<strong>关系数据</strong>之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为<strong>对象-关系映射（Ovject/Relation Mapping，ORM）</strong>。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了<strong>JPA（Java Persistence API）</strong>。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。<br><a id="more"></a><br>好了，说了这么多，也是为了大家能清楚JDBC和JPA的区别。回归正题，本文关注的是Spring对JDBC的支持，至于Spring对于JPA的支持往后的文章再介绍。</p><h1 id="Spring对JDBC的封装"><a href="#Spring对JDBC的封装" class="headerlink" title="Spring对JDBC的封装"></a>Spring对JDBC的封装</h1><h2 id="传统的JDBC"><a href="#传统的JDBC" class="headerlink" title="传统的JDBC"></a>传统的JDBC</h2><p>首先我们了解一下传统JDBC的工作流程</p><ul><li>加载数据库驱动程序（Mysql、SQL Server等）</li><li>通过<code>DriverManager</code>获取<code>Connection</code>对象</li><li>获取Statement对象</li><li>执行SQL语句</li><li>操作结果集ResultSet</li><li>关闭资源</li></ul><p>传统的JDBC使用过程中有一定的局限：</p><ol><li>都需要按照上面的6个步骤进行数据库的访问，应用程序中可能会出现大量重复的代码。</li><li>数据库访问的代码和业务代码混杂在一起，难以维护。</li><li>不适当的SQL异常处理操作，有时候程序员并不清楚如何处理SQL异常但又不能忽略（检查性异常，编译器不通过）。</li><li>……<h2 id="Spring对于JDBC的封装"><a href="#Spring对于JDBC的封装" class="headerlink" title="Spring对于JDBC的封装"></a>Spring对于JDBC的封装</h2>鉴于传统JDBC的不足，Spring对JDBC进行深层次的封装（<strong>JdbcTemplate</strong>）,让JDBC更加易用和维护，也降低了代码的耦合度。接下来让我们来了解一下Spring是怎么封装的JDBC。<h3 id="Spring的数据访问哲学"><a href="#Spring的数据访问哲学" class="headerlink" title="Spring的数据访问哲学"></a>Spring的数据访问哲学</h3>为了避免持久化的逻辑分散到应用的各个组件中，最好将数据访问的功能放到一个或多个专注与此项任务的组件中。这样的组件通常称为数据<strong>访问对象（Data Access object DAO）</strong> 或<strong>Repository</strong>。<br>为了避免应用于特定的数据访问策略耦合在一起，编写良好的Repository应该以<strong>接口</strong>的方式暴露功能。如下图。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac879cb0?w=945&amp;h=382&amp;f=png&amp;s=171916" alt="在这里插入图片描述"></li></ol><p>服务对象通过接口来访问Repository。<a href="https://blog.csdn.net/xueba8/article/details/84071837" target="_blank" rel="noopener">【设计模式】MVC模式与三层架构关系</a></p><h3 id="数据访问模板化"><a href="#数据访问模板化" class="headerlink" title="数据访问模板化"></a>数据访问模板化</h3><p>在我们进行数据访问的过程中，我们都需要<strong>获取</strong>到一个数据存储的连接并在处理完成后<strong>释放</strong>。这些都是在数据访问处理过程中固定步骤，但是每种数据访问的方法又会有些不同，我们会查询不同的对象或以不同的方式更新数据，这都是数据访问过程中变化的部分。<br>Spring将数据访问过程中固定的和可变的部分明确划分为两个不同的类：<strong>模板（template）</strong> 和<strong>回调（callback）</strong>。模板管理过程中固定的部分，而回调处理自定义的数据访问代码。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac78e04c?w=875&amp;h=446&amp;f=png&amp;s=319992" alt="在这里插入图片描述"></p><h2 id="传统JDBC和Spring封装的JdbcTemplate区别"><a href="#传统JDBC和Spring封装的JdbcTemplate区别" class="headerlink" title="传统JDBC和Spring封装的JdbcTemplate区别"></a>传统JDBC和Spring封装的JdbcTemplate区别</h2><table><thead><tr><th>操作</th><th>传统JDBC</th><th>JdbcTemplate</th></tr></thead><tbody><tr><td>获取JDBC连接</td><td>√</td><td></td></tr><tr><td>声明SQL</td><td>√</td><td>√</td></tr><tr><td>预编译SQL</td><td>√</td><td></td></tr><tr><td>执行SQL</td><td>√</td><td></td></tr><tr><td>处理结果集</td><td>√</td><td>√</td></tr><tr><td>释放结果集</td><td>√</td><td></td></tr><tr><td>释放Statement</td><td>√</td><td></td></tr><tr><td>提交事务</td><td>√</td><td></td></tr><tr><td>处理异常并回滚事务</td><td>√</td><td></td></tr><tr><td>释放JDBC连接</td><td>√</td></tr></tbody></table><p>由表格我们就可以看出，JdbcTemplate 只需程序员关注需要<strong>执行的SQL</strong>和<strong>获取结果</strong>，而别的部分操作则不需要程序员关注，模板都帮处理好了，这样一看，JdbcTemplate 是不是比JDBC用起来更加方便呀？<br>本文介绍的是Spring对JDBC的支持（JdbcTemplate），至于Spring对JPA的支持（HibernateTemplate、JpaTemplate后面文章再写）</p><blockquote><p>欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准&lt;strong&gt;接口&lt;/strong&gt; JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的&lt;strong&gt;接口类&lt;/strong&gt;，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。&lt;/p&gt;
&lt;p&gt;利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在&lt;strong&gt;Java对象&lt;/strong&gt;与&lt;strong&gt;关系数据&lt;/strong&gt;之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为&lt;strong&gt;对象-关系映射（Ovject/Relation Mapping，ORM）&lt;/strong&gt;。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了&lt;strong&gt;JPA（Java Persistence API）&lt;/strong&gt;。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解自动装配Bean</title>
    <link href="http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/"/>
    <id>http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/</id>
    <published>2018-11-17T07:50:54.000Z</published>
    <updated>2018-11-25T07:53:30.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>上文：<a href="http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/">Spring自动装配Bean实现hello world</a> 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。</p><h2 id="开启自动化装配Bean"><a href="#开启自动化装配Bean" class="headerlink" title="开启自动化装配Bean"></a>开启自动化装配Bean</h2><h3 id="通过xml开启"><a href="#通过xml开启" class="headerlink" title="通过xml开启"></a>通过xml开启</h3><p>需要开启注解装配功能，则需要在web.xml中加入配置<code>&lt;context:annotation-config /&gt;</code>或者<code>&lt; component-scan /&gt;</code>，配置代码的如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans </span><br><span class="line">//...</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">//...</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">&lt;context:annotation-config /&gt; //或者&lt;component-scan /&gt;</span><br><span class="line">//...</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这两者的区别如下：</p><p> &lt;context:annotation-config&gt;：<br> :  是用于<strong>激活</strong>那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式），是对已注册Bean的进行操作的配置，也就是说，Bean需要首先通过某种方式（比如Xml配置，或者其他注解）被注册，然后使用这个配置，可以对已注册的Bean进行进一步操作（比如注入到某个类的内部），也就是说，这个配置是用于“激活”已注册的Bean的，让已注册的Bean开始工作。</p><p>&lt;context:component-scan&gt;：<br>:  除了具有<code>&lt;context:annotation-config&gt;</code>的功能之外，<code>&lt;context:component-scan&gt;</code>还可以在指定的package下扫描以及注册javabean</p><p> 另外compontent-scan可以扫描类、方法、属性上面的注解； compontent-config只扫描属性上面的注解。</p><h3 id="通过JAVA代码开启"><a href="#通过JAVA代码开启" class="headerlink" title="通过JAVA代码开启"></a>通过JAVA代码开启</h3><p>创建Config.java，Config配置类，首先需要添加<code>@Configuration</code> ，声明这个类为配置类，然后添加<code>@ComponentScan()</code><br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan()</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36cf86506?w=1402&amp;h=601&amp;f=png&amp;s=112504" alt="在这里插入图片描述"><br>@Configuration<br>: 表明这个类是<strong>配置类</strong>，这个类相当于web.xml的作用。<code>@Configuration</code>标注在类上，相当于把该类作为spring的xml配置文件中的<code>&lt;beans&gt;</code>，作用为：配置spring容器(应用上下文)。</p><p>@ComponentScan()<br>:  作用是，开启<strong>组件扫描</strong>，去寻找带有@Component注解的类，并且为其创建Bean。<code>ComponentScan()</code>可以扫描指定的包，例如<code>@ComponentScan(basePackages = &quot;cn.zhenta.www.service.impl&quot;)</code>则会扫描<code>cn.zhenta.www.service.impl</code>这个包以及这个包下的所有子包。</p><h2 id="通过注解声明组件类"><a href="#通过注解声明组件类" class="headerlink" title="通过注解声明组件类"></a>通过注解声明组件类</h2><p>在需要声明为组件类的<strong>类</strong>（只适用于类）上，添加<code>@Component</code>注解，这个注解表明该类会作为组件类（ComponentScan() 既通过这个注解扫描），并告知Spring要为这个类创建Bean。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestA;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component()</span><br><span class="line">public class TestA</span><br><span class="line">&#123;</span><br><span class="line">    public void pri()&#123;</span><br><span class="line">        System.out.println(&quot;hi &quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6582ec?w=1254&amp;h=570&amp;f=png&amp;s=97323" alt="在这里插入图片描述"><br>其中不只有<code>@Component</code>这个注解，还有如下：<br><code>@Service</code>用于标注业务层组件<br><code>@Controller</code>用于标注控制层组件（如struts中的action）<br><code>@Repository</code>用于标注数据访问组件，即DAO组件<br><code>@Component</code>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="通过注解实现自动装配"><a href="#通过注解实现自动装配" class="headerlink" title="通过注解实现自动装配"></a>通过注解实现自动装配</h2><p>简单来说，自动装配就是让Spring自动满足Bean<strong>依赖</strong>的一种方法，在满足依赖的过程中，会在Spring应用上下文中寻找匹配某个Bean需求的其他Bean。为了声明要进行自动装配，我们可以借助Spring的<code>@Autowired</code>注解。</p><p>其中<code>@Autowired</code>可以作用在多个地方</p><ol><li>setter方法</li><li>构造方法</li><li>成员属性</li><li>任意方法</li></ol><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestB;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestA.TestA;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class TestB &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private TestA testA;</span><br><span class="line">    public void priTestA()&#123;</span><br><span class="line">        this.testA = testA;</span><br><span class="line">        testA.pri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6b5f36?w=1261&amp;h=647&amp;f=png&amp;s=134125" alt="在这里插入图片描述"></p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>以上已经开启自动化装配、注解声明组件类、注解实现自动化装配，那么我们该如何在测试这些配置好了没有呢，这就需要用到我们的测试类了。首先创建一个TestC.java 作为我们的测试类，在类上添加<code>@ContextConfiguration(classes = cn.zhenta.www.service.impl.TestB.TestB.class)</code>其中<strong>classes = 你的配置类的命名空间</strong>，再添加<code>@RunWith(SpringJUnit4ClassRunner.class)</code>，那这两个注解有什么作用呢？</p><p>@ContextConfiguration()<br>:  <code>@ContextConfiguration()</code>注释标签是 Spring test context 提供的，<strong><em>用来指定 Spring 配置信息的来源</em></strong>，支持指定 XML 文件位置或者 Spring 配置类的命名空间。</p><p>@RunWith()<br>:  <code>@RunWith()</code> 注释标签是 Junit 提供的，用来说明此测试类的运行者，这里用了 SpringJUnit4ClassRunner，这个类是一个针对 Junit 运行环境的自定义扩展，用来标准化在 Spring 环境中 Junit4.5 的测试用例，例如支持的注释标签的标准化。</p><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestB.TestB;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestB testB = new TestB();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        testB.priTestA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36f2501b4?w=1383&amp;h=586&amp;f=png&amp;s=129001" alt="在这里插入图片描述"></p><p>运行测试类，最后输出：hi。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;上文：&lt;a href=&quot;http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/&quot;&gt;Spring自动装配Bean实现hello world&lt;/a&gt; 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。&lt;/p&gt;
&lt;h2 id=&quot;开启自动化装配Bean&quot;&gt;&lt;a href=&quot;#开启自动化装配Bean&quot; class=&quot;headerlink&quot; title=&quot;开启自动化装配Bean&quot;&gt;&lt;/a&gt;开启自动化装配Bean&lt;/h2&gt;&lt;h3 id=&quot;通过xml开启&quot;&gt;&lt;a href=&quot;#通过xml开启&quot; class=&quot;headerlink&quot; title=&quot;通过xml开启&quot;&gt;&lt;/a&gt;通过xml开启&lt;/h3&gt;&lt;p&gt;需要开启注解装配功能，则需要在web.xml中加入配置&lt;code&gt;&amp;lt;context:annotation-config /&amp;gt;&lt;/code&gt;或者&lt;code&gt;&amp;lt; component-scan /&amp;gt;&lt;/code&gt;，配置代码的如下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;beans &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;context:annotation-config /&amp;gt; //或者&amp;lt;component-scan /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动装配Bean实现hello</title>
    <link href="http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/"/>
    <id>http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/</id>
    <published>2018-11-17T07:48:26.000Z</published>
    <updated>2018-11-25T07:50:11.355Z</updated>
    
    <content type="html"><![CDATA[<p>通过xml配置自动装配Bean<br>1.创建一个简单的类test，作为被调用的Spring Bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl;</span><br><span class="line"> </span><br><span class="line">public class test</span><br><span class="line">&#123;</span><br><span class="line">    private String sex;</span><br><span class="line"> </span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void pri()&#123;</span><br><span class="line">        System.out.println(&quot;hi &quot; + sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中test类有一个sex的成员属性，两个方法（至于为什么有个setSex的方法，在第三点进行解释）。我们要实现的是另一个类通过xml自动装配这个类（Bean），来调用这个类的pri方法。所以我们再创建一个test1类，作为执行者。</p><p>2.创建执行的类test1，进行调用test的pri方法。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl;</span><br><span class="line"> </span><br><span class="line">import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line"> </span><br><span class="line">public class test1 &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext a = new ClassPathXmlApplicationContext(&quot;test.xml&quot;);</span><br><span class="line">        test obj = (test) a.getBean(&quot;helloBean&quot;);</span><br><span class="line">        obj.pri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>被调用的类test和调用的类test1都创建好了，其中test.xml对应的是xml配置文件名称，helloBean对应的是test.xml配置文件中Bean的id，pri（）即为test的pri方法，仅仅通过这两句话就可以不用实例化test类，即可调用test类的方法，怎么做到的呢？这就需要用到我们Spring的自动装配了，首先需要配置xml文件。</p><p>3.创建text.xml配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;bean id=&quot;helloBean&quot; class=&quot;cn.zhenta.www.service.impl.test&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sex&quot; value=&quot;xsx&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>配置文件写好了，那配置文件里面的内容是什么意思呢？让我们慢慢道来，首先<bean></bean>声明这是个Bean，然后class即为你要配置为Bean的类的命名空间（我这里对应的是第1点的test类），id即为表示你这个Bean的标识符（自己随意起名，不冲突即可），而property作为bean的属性，也就是指一个类中的成员，既name=“sex”对应test的sex成员变量，同时这个成员必须有get和set方法（既test类中的setSex（）方法，需要注意的是setXXX的XXX需要为成员变量的名字），至于为什么要有set，get方法，可以阅读Spring IOC相关知识，至于property的用法，以下列举出一些常用的。</p><p>property的一般用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;playerDataManager&quot; class=&quot;com.cp.game.PlayerDataManager&quot; init-method=&quot;init&quot; scope=&quot;singleton&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;sleepTime&quot; value=&quot;$&#123;app.dispatcher.sleepTime&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>//从外部的property文件中用el表达式获取值</p><p><code>&lt;property name=&quot;sleepTime&quot; value=&quot;333&quot; /&gt;</code> //直接在赋值</p><p><code>&lt;property name=&quot;playerDao&quot; ref=&quot;playerDao&quot; /&gt;</code> 引用其他bean对象。 ref的值是其他bean的id名</p><p>4.运行结果<br>运行test1后，输出的内容是：hi xsx。</p><p>5.补充<br>两个Bean，person 和 ability。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yiibai.common;</span><br><span class="line"> </span><br><span class="line">public class Person </span><br><span class="line">&#123;</span><br><span class="line">private Ability ability;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br><span class="line">package com.yiibai.common;</span><br><span class="line"> </span><br><span class="line">public class Ability </span><br><span class="line">&#123;</span><br><span class="line">private String skill;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过装配 hre装配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;person&quot; class=&quot;com.yiibai.common.Person&quot;&gt;</span><br><span class="line">&lt;property name=&quot;ability&quot; ref=&quot;invisible&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;invisible&quot; class=&quot;com.yiibai.common.Ability&quot; &gt;</span><br><span class="line">&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">```    </span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Person [ability=Ability [skill=Invisible]]</span><br><span class="line">注意：想要自动装载，需要获Spring的上下文！</span><br></pre></td></tr></table></figure></p><p>ApplicationContext a = new ClassPathXmlApplicationContext(“test.xml”);<br> test obj = (test) a.getBean(“helloBean”);<br><code>`</code></p><blockquote><p>下一篇更新使用注解自动装载的时候，就不需要使用代码来获取了。欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过xml配置自动装配Bean&lt;br&gt;1.创建一个简单的类test，作为被调用的Spring Bean。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package cn.zhenta.www.service.impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setSex(String sex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void pri()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;hi &amp;quot; + sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中test类有一个sex的成员属性，两个方法（至于为什么有个setSex的方法，在第三点进行解释）。我们要实现的是另一个类通过xml自动装配这个类（Bean），来调用这个类的pri方法。所以我们再创建一个test1类，作为执行者。&lt;/p&gt;
&lt;p&gt;2.创建执行的类test1，进行调用test的pri方法。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>接口的引用</title>
    <link href="http://ddnd.cn/2018/11/17/Java-Interface/"/>
    <id>http://ddnd.cn/2018/11/17/Java-Interface/</id>
    <published>2018-11-17T07:44:03.000Z</published>
    <updated>2018-11-25T07:47:27.183Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习java的过程中，遇到了一下代码。<br>代码1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Handler｛</span><br><span class="line">  public void Hello();</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>代码2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Handler;</span><br><span class="line">public class OtherParser&#123;</span><br><span class="line">  Handler handler;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码1说明了Handler是一个接口了，既接口不能直接实例化，必须经过实现类继承这个接口之后，实例化实现类。那为啥代码2可以直接声明Handler呢？原因是，代码2只是对Handler接口的引用（在对接口的引用时，采用的是实例化实现该接口的类，前提是你实现这个接口的类已经加上@Component注解，引用这个接口的时候才会自动注入相关的实现类），并不是实例化！</p><p>接口是永远不能被实例化的，而2中只是对接口做引用，并没有被实例化。<br>接口可以看成是高度抽象的抽象类，它描述的事物们所共有的方法（方法签名），也就是规定除了该接口的方法的调用参数与规则，仅仅而已，它的使用必须依赖于实现类。<br>例如：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> public class MyHandler implements Handler&#123;</span><br><span class="line">  public void Hellp()&#123;</span><br><span class="line">    System.out.println(&quot;my Handler implements&quot;);</span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>而在对接口的引用时，采用的是实例化实现该接口的类<br>Handler handler = new MyHander();</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习java的过程中，遇到了一下代码。&lt;br&gt;代码1：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Handler｛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void Hello();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码2：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import Handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class OtherParser&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Handler handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码1说明了Handler是一个接口了，既接口不能直接实例化，必须经过实现类继承这个接口之后，实例化实现类。那为啥代码2可以直接声明Handler呢？原因是，代码2只是对Handler接口的引用（在对接口的引用时，采用的是实例化实现该接口的类，前提是你实现这个接口的类已经加上@Component注解，引用这个接口的时候才会自动注入相关的实现类），并不是实例化！&lt;/p&gt;
&lt;p&gt;接口是永远不能被实例化的，而2中只是对接口做引用，并没有被实例化。&lt;br&gt;接口可以看成是高度抽象的抽象类，它描述的事物们所共有的方法（方法签名），也就是规定除了该接口的方法的调用参数与规则，仅仅而已，它的使用必须依赖于实现类。&lt;br&gt;例如：&lt;br&gt;
    
    </summary>
    
      <category term="Java编程基础" scheme="http://ddnd.cn/categories/Java-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>MVC模式与三层架构关系</title>
    <link href="http://ddnd.cn/2018/11/14/Technique-Mvc-3ta/"/>
    <id>http://ddnd.cn/2018/11/14/Technique-Mvc-3ta/</id>
    <published>2018-11-14T07:55:03.000Z</published>
    <updated>2018-11-25T07:57:13.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于许多新手都不明白<strong>MVC模式</strong>和<strong>三层架构</strong>的关系，本人也是，特地整合了网上的一些文章对MVC模式和三层架构的关系进行介绍，希望对大家有帮助。</p><h1 id="关于三层架构"><a href="#关于三层架构" class="headerlink" title="关于三层架构"></a>关于三层架构</h1><p>在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。<br><a id="more"></a></p><ol><li><strong>表示层（UI）</strong>：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。 　</li><li><strong>业务逻辑层（BLL）</strong>：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。 </li><li><strong>数据访问层（DAL）</strong>：该层所做事务直接操作数据库，针对数据的增添、删除、修改、查找等。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca8596d4c4?w=633&amp;h=417&amp;f=png&amp;s=23970" alt="在这里插入图片描述"><h1 id="关于MVC模式"><a href="#关于MVC模式" class="headerlink" title="关于MVC模式"></a>关于MVC模式</h1><strong>模型-视图-控制器（MVC模式）</strong> 是一种非常经典的软件架构模式，在UI框架和UI设计思路中扮演着非常重要的角色。从设计模式的角度来看，MVC模式是一种复合模式，它将多个设计模式在一种解决方案中结合起来，用来解决许多设计问题。MVC模式把用户界面交互分拆到不同的三种角色中，使应用程序被分成三个核心部件：Model（模型）、View（视图）、Control（控制器）。它们各自处理自己的任务：</li><li>模型：模型持有所有的数据、状态和程序逻辑。模型独立于视图和控制器。</li><li>视图：用来呈现模型。视图通常直接从模型中取得它需要显示的状态与数据。对于相同的信息可以有多个不同的显示形式或视图。</li><li>控制器：位于视图和模型中间，负责接受用户的输入，将输入进行解析并反馈给模型，通常一个视图具有一个控制器。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85e74ffa?w=490&amp;h=299&amp;f=png&amp;s=68735" alt="在这里插入图片描述"><h1 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h1>MVC是 Model-View-Controller，严格说这三个加起来以后才是三层架构中的<strong>UI层</strong>，也就是说，MVC把三层架构中的UI层再度进行了分化，分成了控制器、视图、实体三个部分，控制器完成页面逻辑，通过实体来与界面层完成通话；<strong>而C层直接与三层中的BLL进行对话</strong>。MVC可以是三层中的一个表现层框架，属于表现层。三层和MVC可以共存。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85d739c1?w=279&amp;h=168&amp;f=png&amp;s=8999" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85bf4a98?w=986&amp;h=345&amp;f=png&amp;s=317075" alt="在这里插入图片描述"></li></ol><blockquote><p>欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于许多新手都不明白&lt;strong&gt;MVC模式&lt;/strong&gt;和&lt;strong&gt;三层架构&lt;/strong&gt;的关系，本人也是，特地整合了网上的一些文章对MVC模式和三层架构的关系进行介绍，希望对大家有帮助。&lt;/p&gt;
&lt;h1 id=&quot;关于三层架构&quot;&gt;&lt;a href=&quot;#关于三层架构&quot; class=&quot;headerlink&quot; title=&quot;关于三层架构&quot;&gt;&lt;/a&gt;关于三层架构&lt;/h1&gt;&lt;p&gt;在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://ddnd.cn/categories/Technique/"/>
    
    
      <category term="MVC" scheme="http://ddnd.cn/tags/MVC/"/>
    
  </entry>
  
</feed>
