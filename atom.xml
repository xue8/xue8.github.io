<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛8的个人网站 - xue8&#39;s Blog - DDND.CN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ddnd.cn/"/>
  <updated>2019-02-13T10:54:36.312Z</updated>
  <id>http://ddnd.cn/</id>
  
  <author>
    <name>薛8</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二章 Redis API的使用 单线程介绍【Redis入门教程】</title>
    <link href="http://ddnd.cn/2019/02/13/redis-chapter-2/"/>
    <id>http://ddnd.cn/2019/02/13/redis-chapter-2/</id>
    <published>2019-02-13T10:12:33.000Z</published>
    <updated>2019-02-13T10:54:36.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ws1.sinaimg.cn/large/e0e01e43gy1fzz559f0n2j21d80gf3zh.jpg" alt="image" width="100%"></p><p><strong>Redis入门教程目录</strong>：<a href="https://ddnd.cn/categories/Redis/">【Redis入门教程目录】</a><br><a id="more"></a></p><h2 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h2><p>通过这部分让大家对Redis的五种数据结构有初步的认识，对于Redis来说，每一种数据结构都有着自己的内部编码，而且是多种实现的，这样Redis会在合适的场景选择合适的内部编码，通过<code>OBJECT ENCODING [key]</code>可以参看指定<code>key</code>的内部编码。<br><strong>这样做的好处：</strong><br>a. 改进内部编码，对外的数据结构和命令没有影响，对用户提供黑箱模型。<br>b. 多种内部编码可在不同场景下发挥各自的优势。如：<code>ziplist</code>比较节约内存，但是元素比较多的时候，性能会有所下降，此时Redis会将编码自动转换为<code>linkedlist</code>，性能会有所改善。<br><img src="http://wx3.sinaimg.cn/large/e0e01e43gy1g040kix74jj20q00lqwmc.jpg" alt="image"></p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>了解Redis的单线程架构，有助于大家对Redis的进一步学习和排解问题。<br><img src="http://ws2.sinaimg.cn/large/e0e01e43gy1g0431ewwgbj216g0k479d.jpg" alt="image"><br>Redis处理网络请时候的求单线程可以抽象成这样，通向Redis的路只有一条，且这条路是个单车道，只容的下一辆车同时使用，而我们使用的Redis命令即为这些车辆，当我们执行多个命令的时候，只有等第一个命令执行完成了后面的命令才会执行，否则会一直处于等待状态。<br><img src="http://ws3.sinaimg.cn/large/e0e01e43gy1g00j4nk245j21b40ecq6e.jpg" alt="image"><br>Redis单线程的架构需要我们注意几点<br>a. 一次只运行一条命令<br>b. 拒绝长（慢）命令（keys、flushall、flushdb、slow lua script、mutil/exec、operate、big value）<br>至于为什么单线程还这么快，这里有个原因，Redis客户端的到Redis服务器的网络请求采用了<strong>多路I/O复用模型（非阻塞I/O）</strong>，利用<code>select</code>、<code>poll</code>、<code>epoll</code>可以<strong>同时监听多个流的I/O(客户端到服务器的网络请求)事件的能力</strong>，在空闲的时候，会把当前线程阻塞掉，当有一个或者多个流有<code>I/O</code>事件时，就从阻塞态中唤醒，<strong>轮训一遍所有的流</strong>并且依次处理就绪的流。这样就算出现有的流的<code>I/O</code>因为网络原因很慢，也不会影响别的流的<code>I/O</code>（非阻塞），因为是轮训所有的流的<code>I/O</code>。这里的“多路”指的是多个网络连接，“复用”指的是复用同一个线程。<br><img src="https://upload-images.jianshu.io/upload_images/8753960-fb5c8f0a4f37d3f7.gif?imageMogr2/auto-orient/"></p><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><p>Redis一些通用命令，比如删除一个键、计算数据库的大小、设置键的过期时间等，这些命令有很多，这里主要介绍<code>7</code>个，完整的命令大家可以参考官方文档。     </p><ol><li>KEYS [pattern]<br>时间复杂度为<strong>O(N)</strong>，<code>N</code>为数据库中<code>Key</code>的数量。 这个命令由于时间复杂度为O(N)所以一般生产环境不使用，如果需要遍历全部数据，可以使用Scan命令，时间复杂度为O(1)。<br>查找所有符合给定模式<code>pattern</code>的<code>key</code>，比如说：    </li></ol><ul><li><code>KEYS *</code>匹配数据库中所有的<code>key</code>。  </li><li><code>KEYS h?llo</code>匹配<code>hello</code>、<code>hallo</code>等<code>key</code>。  </li><li><code>KEYS h*llo</code>匹配<code>hllo</code>和<code>haaaaaallo</code>等<code>key</code>。  </li><li><code>KEYS h[abe]llo</code>匹配<code>hallo</code>、<code>hbllo</code>和<code>hello</code>。<br><strong>返回值：</strong> 符合给定模式的<code>key</code>列表。     </li></ul><ol start="2"><li><p>DBSIZE<br>时间复杂度为<strong>O(1)</strong>，计算的时候不是扫描整个表，因为Redis有个计数器，实时更新Key总数。<br>查找返回当前数据库的<code>key</code>的数量。<br><strong>返回值：</strong> 返回当前数据库的<code>key</code>的数量。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; DBSIZE</span><br><span class="line">(integer) 5</span><br><span class="line"></span><br><span class="line">redis&gt; SET new_key &quot;hello_moto&quot;     #增加一个 key 试试</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; DBSIZE</span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure></li><li><p>EXISTS key<br>时间复杂度为<strong>O(1)</strong>。<br>检查给定<code>key</code>是否存在。<br><strong>返回值：</strong> 若<code>key</code>存在，返回<code>1</code>，不存在返回<code>0</code>。  </p></li><li><p>DEL key [key …]<br>时间复杂度为<strong>O(N)</strong>，<code>N</code>为被删除的<code>key</code>的数量，其中删除单个字符串类型的<code>key</code>，时间复杂度为<code>O(1)</code>；删除单个列表、集合、有序集合或哈希表类型的<code>key</code>，时间复杂度为<code>O(M)</code>，<code>M</code>为以上数据结构内的元素数量。<br>删除指定的一个或者多个<code>key</code>，不存在的<code>key</code>会被忽略。<br><strong>返回值：</strong> 被删除的<code>key</code>的数量。   </p></li><li><p>EXPIRE key seconds<br>时间复杂度为<strong>O(1)</strong>。<br>为给定的<code>key</code>设置生存时间，当<code>key</code>过期时，它会被自动<strong>删除</strong>。<br><strong>返回值：</strong> 设置成功返回<code>1</code>，当<code>key</code>不存在或者设置失败的时候返回<code>0</code>。    </p></li><li><p>PERSIST key<br>时间复杂度为<strong>O(1)</strong>。<br>移除给定<code>key</code>的生存时间，将这个<code>key</code>转换成持久的。<br><strong>返回值：</strong> 当生存时间移除成功时，返回<code>1</code>，如果<code>key</code>不存在或者没有设置生存时间，返回<code>0</code>。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SET mykey &quot;Hello&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; EXPIRE mykey 10  #为 key 设置生存时间</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; TTL mykey</span><br><span class="line">(integer) 10</span><br><span class="line"></span><br><span class="line">redis&gt; PERSIST mykey    #移除 key 的生存时间</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; TTL mykey</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure></li><li><p>TTL key<br>时间复杂度<strong>O(1)</strong>。<br>以秒为单位，返回给定<code>key</code>的剩余生存时间（TTL，time to live）。<br><strong>返回值：</strong> 当<code>key</code>不存在时，返回<code>-2</code>，当<code>key</code>存在但是没有设置生存时间时，返回<code>-1</code>，否则返回<code>key</code>的剩余生存时间。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 不存在的 key</span><br><span class="line"></span><br><span class="line">redis&gt; FLUSHDB</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; TTL key</span><br><span class="line">(integer) -2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#key 存在，但没有设置剩余生存时间</span><br><span class="line"></span><br><span class="line">redis&gt; SET key value</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; TTL key</span><br><span class="line">(integer) -1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#有剩余生存时间的 key</span><br><span class="line"></span><br><span class="line">redis&gt; EXPIRE key 10086</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; TTL key</span><br><span class="line">(integer) 10084</span><br></pre></td></tr></table></figure></li></ol><h2 id="五种数据结构"><a href="#五种数据结构" class="headerlink" title="五种数据结构"></a>五种数据结构</h2><p>这里介绍Redis的五种数据结构String（字符串）、Hash（哈希）、List（列表）、Set（集合）、Zset（即Sorted Set有序集合）的结构和一些命令。  </p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是Redis中最基础的数据结构。</p><h4 id="键值结构"><a href="#键值结构" class="headerlink" title="键值结构"></a>键值结构</h4><p>字符串的值虽然是字符串但是可以保存很多种类型的数据，如：简单的字符串、JSON、XML、数字、二进制等。需要注意一点的是，Redis中字符串类型的值最大能保存512MB。<br><img src="http://ws1.sinaimg.cn/large/e0e01e43gy1g043ib11xqj20fa096mxd.jpg" alt="image"></p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ol><li>SET key value [EX seconds] [PX milliseconds] [NX|XX]<br>时间复杂度<strong>O(1)</strong>。<br>将字符串值<code>value</code>关联到<code>key</code>，如果<code>key</code>已经持有其他值，<code>SET</code>就覆写旧值，无视类型，当<code>SET</code>命令对一个带有生存时间（TTL）的键进行设置之后，该键原有的TTL将被清除。<br><strong>可选参数：</strong></li></ol><ul><li><code>EX seconds</code>：将键的过期时间设置为<code>seconds</code>秒。 执行<code>SET key value EX seconds</code>的效果等同于执行<code>SETEX key seconds value</code>。       </li><li><code>PX milliseconds</code>：将键的过期时间设置为<code>milliseconds</code>毫秒。执行<code>SET key value PX milliseconds</code>的效果等同于执行<code>PSETEX key milliseconds value</code>。     </li><li><code>NX</code>：只在键不存在时，才对键进行设置操作。执行<code>SET key value NX</code>的效果等同于执行<code>SETNX key value</code>。   </li><li><code>XX</code>：只在键已经存在时，才对键进行设置操作。   <blockquote><p>因为<code>SET</code>命令可以通过参数来实现<code>SETNX</code>、<code>SETEX</code>以及<code>PSETEX</code>命令的效果，所以<code>Redis</code>将来的版本可能会移除并废弃<code>SETNX</code>、<code>SETEX</code>和<code>PSETEX</code>这三个命令。</p></blockquote></li></ul><p><strong>返回值：</strong><br>在Redis 2.6.12版本以前，<code>SET</code>命令总是返回<code>OK</code>。<br>从Redis 2.6.12版本开始，<code>SET</code>命令只在设置操作成功完成时才返回<code>OK</code>；如果命令使用了<code>NX</code>或者<code>XX</code>选项， 但是因为条件没达到而造成设置操作未执行， 那么命令将返回空批量回复（NULL Bulk Reply）。<br><strong>代码演示：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#使用 EX 选项</span><br><span class="line">redis&gt; SET key-with-expire-time &quot;hello&quot; EX 10086</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; GET key-with-expire-time</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; TTL key-with-expire-time</span><br><span class="line">(integer) 10069</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>GET key<br>时间复杂度<strong>O(1)</strong>。<br>获取与键<code>key</code>相关联的字符串值。<br><strong>返回值：</strong><br>如果键<code>key</code>不存在，那么返回特殊值<code>nil</code>；否则，返回键<code>key</code>的值。<br>如果键<code>key</code>的值并非字符串类型，那么返回一个错误，因为<code>GET</code>命令只能用于字符串值。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; GET db</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">redis&gt; SET db redis</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; GET db</span><br><span class="line">&quot;redis&quot;</span><br></pre></td></tr></table></figure></li><li><p>DEL key [key …]<br>时间复杂度为<strong>O(N)</strong>，<code>N</code>为被删除的<code>key</code>的数量，其中删除单个字符串类型的<code>key</code>，时间复杂度为<code>O(1)</code>；删除单个列表、集合、有序集合或哈希表类型的<code>key</code>，时间复杂度为<code>O(M)</code>，<code>M</code>为以上数据结构内的元素数量。<br>删除指定的一个或者多个<code>key</code>，不存在的<code>key</code>会被忽略。<br><strong>返回值：</strong> 被删除的<code>key</code>的数量。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#同时删除多个 key</span><br><span class="line"></span><br><span class="line">redis&gt; SET name &quot;redis&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET type &quot;key-value store&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET website &quot;redis.com&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; DEL name type website</span><br><span class="line">(integer) 3</span><br></pre></td></tr></table></figure></li><li><p>MSET key value [key value …]<br>时间复杂度<strong>O(N)</strong>，其中<code>N</code>为被设置的键数量。<br>同时为多个键设置值。如果某个给定键已经存在，那么<code>MSET</code>将使用新值去覆盖旧值，如果这不是你所希望的效果，请考虑使用<code>MSETNX</code>命令，这个命令只会在所有给定键都不存在的情况下进行设置。<code>MSET</code>是一个<strong>原子性(atomic)</strong> 操作，所有给定键都会在同一时间内被设置，不会出现某些键被设置了但是另一些键没有被设置的情况。<br><strong>返回值：</strong> <code>MSET</code>命令总是返回<code>OK</code>。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; MSET date &quot;2012.3.30&quot; time &quot;11:00 a.m.&quot; weather &quot;sunny&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET date time weather</span><br><span class="line">1) &quot;2012.3.30&quot;</span><br><span class="line">2) &quot;11:00 a.m.&quot;</span><br><span class="line">3) &quot;sunny&quot;</span><br></pre></td></tr></table></figure></li><li><p>MSETNX key value [key value …]<br>时间复杂度<strong>O(N)</strong>，其中<code>N</code>为被设置的键数量。<br>当且仅当所有给定键都<strong><em>不存在</em></strong>时,为所有给定键设置值。即使只有一个给定键已经存在，<code>MSETNX</code>命令也会拒绝执行对所有键的设置操作。<code>MSETNX</code>是一个<strong>原子性(atomic)</strong> 操作，所有给定键要么就全部都被设置，要么就全部都不设置，不可能出现第三种状态。<br><strong>返回值：</strong> 当所有给定键都设置成功时，命令返回<code>1</code>；如果因为某个给定键已经存在而导致设置未能成功执行，那么命令返回<code>0</code>。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; MSETNX rmdbs &quot;MySQL&quot; nosql &quot;MongoDB&quot; key-value-store &quot;redis&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; MGET rmdbs nosql key-value-store</span><br><span class="line">1) &quot;MySQL&quot;</span><br><span class="line">2) &quot;MongoDB&quot;</span><br><span class="line">3) &quot;redis&quot;</span><br></pre></td></tr></table></figure></li><li><p>MGET key [key …]<br>时间复杂度<strong>O(N)</strong>，其中<code>N</code>为给定键的数量。<br>返回给定的一个或多个字符串键的值。如果给定的字符串键里面，有某个键不存在，那么这个键的值将以特殊值<code>nil</code>表示。<br><strong>返回值：</strong> <code>MGET</code>命令将返回一个列表，列表中包含了所有给定键的值。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; SET redis redis.com</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; SET mongodb mongodb.org</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line"></span><br><span class="line">redis&gt; MGET redis mongodb mysql     #不存在的 mysql 返回 nil</span><br><span class="line">1) &quot;redis.com&quot;</span><br><span class="line">2) &quot;mongodb.org&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure></li><li><p>N次GET和一次MGET对比<br>总所周知，Redis采用的是客户端-服务器方式，即在一次round trip中，客户端发送一条命令，服务器解析命令并执行，然后向客户端返回结果，如果执行<code>N</code>条命令，就是<code>N</code>个请求<code>N</code>次执行<code>N</code>个返回<br><img src="http://wx4.sinaimg.cn/large/e0e01e43gy1g04rgjoxjwj211t0nmqcm.jpg" alt="image"><br>如果我们把<code>N</code>条命令都放在一个请求中，一次请求多个执行一个返回，那么就可以大大的降低网络时间的开销，这个也就是Redis的pipline<br><img src="http://ws3.sinaimg.cn/large/e0e01e43gy1g04rk1afstj214t0pstgn.jpg" alt="image"></p></li><li><p>N次SET和一次MSET对比<br>同7</p></li></ol><h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><p>Redis的哈希是键值对的集合，是字符串字段和字符串值之间的映射。</p><h4 id="键值结构-1"><a href="#键值结构-1" class="headerlink" title="键值结构"></a>键值结构</h4><p><code>Hash</code>数据结构即数据存储为<code>field</code>、<code>value</code>的格式存储<br><img src="http://wx2.sinaimg.cn/large/e0e01e43gy1g04saqqy8ij20x00bj41k.jpg" alt="image"><br>可以将<code>field</code>、<code>value</code>看成一对键值对结构<br><img src="http://wx1.sinaimg.cn/large/e0e01e43gy1g04s578nymj20um09uwer.jpg" alt="image"></p><h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><ol><li><p>HSET key field value<br>时间复杂度<strong>O(1)</strong>。<br>将哈希表<code>key</code>中域<code>field</code>的值设置为<code>value</code>，如果给定的哈希表不存在，那么一个新的哈希表将被创建并执行<code>HSET</code>操作，如果域<code>field</code>已存在于哈希表中，那么它的旧值将被新值<code>value</code>覆盖。<br><strong>返回值：</strong> 当<code>HSET</code>命令在哈希表中新创建<code>field</code>域并成功为它设置值时,命令返回<code>1</code>；如果域<code>field</code>已经存在于哈希表，并且<code>HSET</code>命令成功使用新值覆盖了它的旧值，那么命令返回<code>0</code>。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HSET website google &quot;www.g.cn&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HGET website google</span><br><span class="line">&quot;www.g.cn&quot;</span><br></pre></td></tr></table></figure></li><li><p>HGET key field<br>时间复杂度<strong>O(1)</strong>。<br>返回哈希表中给定域的值。<br><strong>返回值：</strong> <code>HGET</code>命令在默认情况下返回给定域的值，如果给定域不存在于哈希表中，又或者给定的哈希表并不存在，那么命令返回<code>nil</code>。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HSET homepage redis redis.com</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HGET homepage redis</span><br><span class="line">&quot;redis.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>HGETALL key<br>时间复杂度<strong>O(N)</strong>，<code>N</code>为哈希表的大小，谨慎用。<br>返回哈希表的所有的域和值，在返回值里，紧跟每个域(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。<br><strong>返回值：</strong> 以列表形式返回哈希表的域和域的值，若<code>key</code>不存在，返回空列表。<br><strong>代码演示：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; HSET people jack &quot;Jack Sparrow&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HSET people gump &quot;Forrest Gump&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">redis&gt; HGETALL people</span><br><span class="line">1) &quot;jack&quot;          #域</span><br><span class="line">2) &quot;Jack Sparrow&quot;  #值</span><br><span class="line">3) &quot;gump&quot;</span><br><span class="line">4) &quot;Forrest Gump&quot;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">4. HDEL key field [field ...]  </span><br><span class="line">时间复杂度**O(N)**，`N`为要删除的域的数量。          </span><br><span class="line">删除哈希表`key`中的一个或多个指定域，不存在的域将被忽略。       </span><br><span class="line">**返回值：** 被成功移除的域的数量，不包括被忽略的域。    </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></li></ol><p>#测试数据</p><p>redis&gt; HGETALL abbr<br>1) “a”<br>2) “apple”<br>3) “b”<br>4) “banana”<br>5) “c”<br>6) “cat”<br>7) “d”<br>8) “dog”</p><p>#删除单个域</p><p>redis&gt; HDEL abbr a<br>(integer) 1</p><p>#删除不存在的域</p><p>redis&gt; HDEL abbr not-exists-field<br>(integer) 0</p><p>#删除多个域</p><p>redis&gt; HDEL abbr b c<br>(integer) 2</p><p>redis&gt; HGETALL abbr<br>1) “d”<br>2) “dog”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. HMSET key field value [field value ...]  </span><br><span class="line">时间复杂度**O(N)**，`N`为`field-value`对的数量。       </span><br><span class="line">同时将多个`field-value`(域-值)对设置到哈希表`key`中，此命令会覆盖哈希表中已存在的域，如果`key`不存在，一个空哈希表被创建并执行`HMSET`操作。       </span><br><span class="line">**返回值：** 如果命令执行成功，返回`OK`，当`key`不是哈希表(hash)类型时，返回一个错误。</span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; HMSET website google <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> yahoo <a href="http://www.yahoo.com" target="_blank" rel="noopener">www.yahoo.com</a><br>OK</p><p>redis&gt; HGET website google<br>“<a href="http://www.google.com&quot;" target="_blank" rel="noopener">www.google.com&quot;</a></p><p>redis&gt; HGET website yahoo<br>“<a href="http://www.yahoo.com&quot;" target="_blank" rel="noopener">www.yahoo.com&quot;</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. HMGET key field [field ...]  </span><br><span class="line">时间复杂度**O(N)**，`N`为给定域的数量。       </span><br><span class="line">返回哈希表`key`中，一个或多个给定域的值，如果给定的域不存在于哈希表，那么返回一个`nil`值，因为不存在的`key`被当作一个空哈希表来处理，所以对一个不存在的`key`进行`HMGET`操作将返回一个只带有`nil`值的表。     </span><br><span class="line">**返回值：** 一个包含多个给定域的关联值的表，表值的排列顺序和给定域参数的请求顺序一样。   </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; HMSET pet dog “doudou” cat “nounou”    #一次设置多个域<br>OK</p><p>redis&gt; HMGET pet dog cat fake_pet             #返回值的顺序和传入参数的顺序一样<br>1) “doudou”<br>2) “nounou”<br>3) (nil)                                      #不存在的域返回nil值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">7. N次HGET和一次HMGET对比  </span><br><span class="line">参考字符串的`N`次`GET`和一次`MGET`对比，大概相同</span><br><span class="line"></span><br><span class="line">### 列表</span><br><span class="line">列表用于储存多个有序的字符串，列表是一种比较灵活的数据结构，可以充当**栈**和**队列**的角色。</span><br><span class="line">#### 键值结构</span><br><span class="line">列表的`value`其实是一个双向链表，可以在链表的两头插入或者删除元素</span><br><span class="line">![image](http://wx3.sinaimg.cn/large/e0e01e43gy1g04u9xkllmj21bs0ijq7t.jpg)</span><br><span class="line">#### 命令</span><br><span class="line">1. LPUSH key value [value ...]  </span><br><span class="line">时间复杂度**O(1)**。             </span><br><span class="line">将一个或多个值`value`插入到列表`key`的表头，如果有多个`value`值，那么各个`value`值按从左到右的顺序依次插入到表头：比如说，对空列表`mylist`执行命令`LPUSH mylist a b c`，列表的值将是`c b a`，这等同于原子性地执行`LPUSH mylist a`、`LPUSH mylist b`和`LPUSH mylist c`三个命令，如果`key`不存在，一个空列表会被创建并执行`LPUSH`操作，当`key`存在但不是列表类型时，返回一个错误。       </span><br><span class="line">**返回值：** 执行`LPUSH`命令后，列表的长度。</span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#加入单个元素</p><p>redis&gt; LPUSH languages python<br>(integer) 1</p><p>#加入重复元素</p><p>redis&gt; LPUSH languages python<br>(integer) 2</p><p>redis&gt; LRANGE languages 0 -1     #列表允许重复元素<br>1) “python”<br>2) “python”</p><p>#加入多个元素</p><p>redis&gt; LPUSH mylist a b c<br>(integer) 3</p><p>redis&gt; LRANGE mylist 0 -1<br>1) “c”<br>2) “b”<br>3) “a”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. RPUSH key value [value ...]  </span><br><span class="line">时间复杂度**O(1)**。             </span><br><span class="line">将一个或多个值`value`插入到列表`key`的表尾（最右边），如果有多个`value`值，那么各个`value`值按从左到右的顺序依次插入到表尾：比如说，对空列表`mylist`执行命令`RPUSH mylist a b c`，列表的值将是`c b a`，这等同于原子性地执行`RPUSH mylist a`、`RPUSH mylist b`和`RPUSH mylist c`三个命令，如果`key`不存在，一个空列表会被创建并执行`RPUSH`操作，当`key`存在但不是列表类型时，返回一个错误。       </span><br><span class="line">**返回值：** 执行`RPUSH`命令后，列表的长度。</span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#添加单个元素</p><p>redis&gt; RPUSH languages c<br>(integer) 1</p><p>#添加重复元素</p><p>redis&gt; RPUSH languages c<br>(integer) 2</p><p>redis&gt; LRANGE languages 0 -1 #列表允许重复元素<br>1) “c”<br>2) “c”</p><p>#添加多个元素</p><p>redis&gt; RPUSH mylist a b c<br>(integer) 3</p><p>redis&gt; LRANGE mylist 0 -1<br>1) “a”<br>2) “b”<br>3) “c”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. LPOP key  </span><br><span class="line">时间复杂度**O(1)**。             </span><br><span class="line">移除头元素并返回列表`key`新的头元素。    </span><br><span class="line">**返回值：** 列表的头元素。当`key`不存在时，返回`nil`。</span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#加入单个元素<br>redis&gt; LLEN course<br>(integer) 0</p><p>redis&gt; RPUSH course algorithm001<br>(integer) 1</p><p>redis&gt; RPUSH course c++101<br>(integer) 2</p><p>redis&gt; LPOP course  #移除头元素<br>“algorithm001”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. RPOP key  </span><br><span class="line">时间复杂度**O(1)**。             </span><br><span class="line">移除尾元素并返回列表`key`新的尾元素。    </span><br><span class="line">**返回值：** 列表的尾元素。当`key`不存在时，返回`nil`。</span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; RPUSH mylist “one”<br>(integer) 1</p><p>redis&gt; RPUSH mylist “two”<br>(integer) 2</p><p>redis&gt; RPUSH mylist “three”<br>(integer) 3</p><p>redis&gt; RPOP mylist           #返回被弹出的元素<br>“three”</p><p>redis&gt; LRANGE mylist 0 -1    #列表剩下的元素<br>1) “one”<br>2) “two”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. LINDEX key index  </span><br><span class="line">时间复杂度**O(N)**，`N`为到达下标`index`过程中经过的元素数量。因此，对列表的头元素和尾元素执行`LINDEX`命令，复杂度为O(1)。                 </span><br><span class="line">返回列表`key`中，下标为`index`的元素，下标(index)参数`start`和`stop`都以`0`为底，也就是说，以`0`表示列表的第一个元素，以`1`表示列表的第二个元素，以此类推，你也可以使用负数下标，以`-1`表示列表的最后一个元素，`-2`表示列表的倒数第二个元素，以此类推，如果`key`不是列表类型，返回一个错误。                </span><br><span class="line">**返回值：** 列表中下标为`index`的元素。如果`index`参数的值不在列表的区间范围内(out of range)，返回`nil`。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; LPUSH mylist “World”<br>(integer) 1</p><p>redis&gt; LPUSH mylist “Hello”<br>(integer) 2</p><p>redis&gt; LINDEX mylist 0<br>“Hello”</p><p>redis&gt; LINDEX mylist -1<br>“World”</p><p>redis&gt; LINDEX mylist 3        #index不在 mylist 的区间范围内<br>(nil)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. LINSERT key BEFORE|AFTER pivot value  </span><br><span class="line">时间复杂度**O(N)**，`N`为寻找`pivot`过程中经过的元素数量。                 </span><br><span class="line">将值`value`插入到列表`key`当中，位于值`pivot`之前或之后，当`pivot`不存在于列表`key`时，不执行任何操作，当`key`不存在时，`key`被视为空列表，不执行任何操作，如果`key`不是列表类型，返回一个错误。      </span><br><span class="line">**返回值：** 如果命令执行成功，返回插入操作完成之后，列表的长度。如果没有找到`pivot`，返回`-1`。如果`key`不存在或为空列表，返回`0`。              </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; RPUSH mylist “Hello”<br>(integer) 1</p><p>redis&gt; RPUSH mylist “World”<br>(integer) 2</p><p>redis&gt; LINSERT mylist BEFORE “World” “There”<br>(integer) 3</p><p>redis&gt; LRANGE mylist 0 -1<br>1) “Hello”<br>2) “There”<br>3) “World”</p><p>#对一个非空列表插入，查找一个不存在的 pivot</p><p>redis&gt; LINSERT mylist BEFORE “go” “let’s”<br>(integer) -1                                    #失败</p><p>#对一个空列表执行 LINSERT 命令</p><p>redis&gt; EXISTS fake_list<br>(integer) 0</p><p>redis&gt; LINSERT fake_list BEFORE “nono” “gogogog”<br>(integer) 0                                      #失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 集合</span><br><span class="line">Redis的`Set`是`String`类型的无序集合，这里的集合也就是我们小学都接触到的集合，可以求交集、并集、差集等。集合成员是唯一的，这就意味着集合中不能出现重复的数据。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。   </span><br><span class="line">#### 键值结构</span><br><span class="line">左边为`key`,是字符串类型。右边为`value`,可以将一些字符串进行一些组合，是集合类型。Redis中的集合类型还支持集合之间的操作，这与Redis中的其他数据结构是不同的，Redis可以对两个集合进行操作，取两个集合的交集，并集，差集以及对称差集等。</span><br><span class="line">![image](http://ws1.sinaimg.cn/large/e0e01e43gy1g04woe8h2dj20je093myh.jpg)</span><br><span class="line">#### 命令</span><br><span class="line">1. SADD key member [member …]  </span><br><span class="line">时间复杂度**O(N)**，`N`为被添加的元素的数量。                 </span><br><span class="line">将一个或多个`member`元素加入到集合`key`当中，已经存在于集合的`member`元素将被忽略，假如`key`不存在，则创建一个只包含`member`元素作成员的集合，当`key`不是集合类型时，返回一个错误。             </span><br><span class="line">**返回值：** 被添加到集合中的新元素的数量，不包括被忽略的元素。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#添加单个元素</p><p>redis&gt; SADD bbs “discuz.net”<br>(integer) 1</p><p>#添加重复元素</p><p>redis&gt; SADD bbs “discuz.net”<br>(integer) 0</p><p>#添加多个元素</p><p>redis&gt; SADD bbs “tianya.cn” “groups.google.com”<br>(integer) 2</p><p>redis&gt; SMEMBERS bbs<br>1) “discuz.net”<br>2) “groups.google.com”<br>3) “tianya.cn”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. SPOP key [count]  </span><br><span class="line">时间复杂度**O(1)**。                 </span><br><span class="line">随机移除`count`个元素并返回被移除的元素。              </span><br><span class="line">**返回值：** 被移除的随机元素。当`key`不存在或`key`是空集时，返回`nil`。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>redis&gt; SMEMBERS db<br>1) “MySQL”<br>2) “MongoDB”<br>3) “Redis”</p><p>redis&gt; SPOP db<br>“Redis”</p><p>redis&gt; SMEMBERS db<br>1) “MySQL”<br>2) “MongoDB”</p><p>redis&gt; SPOP db<br>“MySQL”</p><p>redis&gt; SMEMBERS db<br>1) “MongoDB”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. SREM key member [member …]  </span><br><span class="line">时间复杂度**O(N)**，`N`为给定`member`元素的个数。                         </span><br><span class="line">移除集合`key`中的一个或多个`member`元素，不存在的`member`元素会被忽略，当`key`不是集合类型，返回一个错误。                     </span><br><span class="line">**返回值：** 被成功移除的元素的个数，不包括被忽略的元素。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#测试数据</p><p>redis&gt; SMEMBERS languages<br>1) “c”<br>2) “lisp”<br>3) “python”<br>4) “ruby”</p><p>#移除单个元素</p><p>redis&gt; SREM languages ruby<br>(integer) 1</p><p>#移除不存在元素</p><p>redis&gt; SREM languages non-exists-language<br>(integer) 0</p><p>#移除多个元素</p><p>redis&gt; SREM languages lisp python c<br>(integer) 3</p><p>redis&gt; SMEMBERS languages<br>(empty list or set)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. SMEMBERS key   </span><br><span class="line">时间复杂度**O(N)**，`N`为集合的基数。                         </span><br><span class="line">返回集合`key`中的所有成员，不存在的`key`被视为空集合。      </span><br><span class="line">**返回值：** 集合中的所有成员。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#key 不存在或集合为空</p><p>redis&gt; EXISTS not_exists_key<br>(integer) 0</p><p>redis&gt; SMEMBERS not_exists_key<br>(empty list or set)</p><p>#非空集合</p><p>redis&gt; SADD language Ruby Python Clojure<br>(integer) 3</p><p>redis&gt; SMEMBERS language<br>1) “Python”<br>2) “Ruby”<br>3) “Clojure”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 有序集合</span><br><span class="line">Redis有序集合和集合一样也是`String`类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个`double`类型的分数。Redis正是通过分数来为集合中的成员进行从小到大的排序。有序集合的成员是唯一的,但分数(score)却可以重复。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</span><br><span class="line">#### 键值结构</span><br><span class="line">有序集合的`value`包括`score`和`value`两部分，其中`score`表示分值用来排序的</span><br><span class="line">![image](http://wx3.sinaimg.cn/large/e0e01e43gy1g04y9o37y7j21810j644t.jpg)</span><br><span class="line">#### 命令</span><br><span class="line">1. ZADD key [NX|XX] [CH] [INCR] score member [score member …]      </span><br><span class="line">时间复杂度**O(M*log(N))**，`N`是有序集的基数，`M`为成功添加的新成员的数量。                           </span><br><span class="line">将一个或多个`member`元素及其`score`值加入到有序集`key`当中。如果某个`member`已经是有序集的成员，那么更新这个`member`的`score`值，并通过重新插入这个`member`元素，来保证该`member`在正确的位置上。`score`值可以是整数值或双精度浮点数。如果`key`不存在，则创建一个空的有序集并执行`ZADD`操作。当`key`存在但不是有序集类型时，返回一个错误。         </span><br><span class="line">Redis 3.0.2 为`ZADD`命令添加了`NX`、`XX`、`CH`、`INCR` 四个选项：</span><br><span class="line">- `NX`：`member`必须不存在，才可以设置成功，用于添加。   </span><br><span class="line">- `XX`：`member`必须存在，才可以设置成功，用于更新。  </span><br><span class="line">- `CH`：返回此次操作后，有序集合元素和分数发生变化的个数。    </span><br><span class="line">- `INCR`：对`score`做增加，相当于`ZINCRBY`。</span><br><span class="line">**返回值：** 被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p> redis&gt; ZADD ztest 100 java 99 python 80 go 120 kotlin<br>(integer) 4</p><p>#查看有序集合内所有元素并且按分数排序<br> coderknock&gt; ZRANGE ztest 0 -1 WITHSCORES<br>1) “go”<br>2) “80”<br>3) “python”<br>4) “99”<br>5) “java”<br>6) “100”<br>7) “kotlin”<br>8) “120”</p><p>#选项填写在 key 后面，位置不能错误<br> redis&gt; ZADD ztest 100 java 99 python 80 go 120 kotlin CH<br>(error) ERR syntax error<br> redis&gt; ZADD CH ztest 100 java 99 python 80 go 120 kotlin<br>(error) ERR syntax error</p><p>#下面两个语句进行了对比，如果不加 CH 显示的数量不包括更新和已经存在的。<br> redis&gt;  ZADD ztest CH 100 java 99 python 80 go 121 kotlin<br>(integer) 1<br> redis&gt;  ZADD ztest 100 java 99 python 80 go 120 kotlin<br>(integer) 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ZREM key member [member …]  </span><br><span class="line">时间复杂度**O(M*log(N))**，`N`是有序集的基数，`M`为成功移除的成员的数量。                  </span><br><span class="line">移除有序集`key`中的一个或多个成员，不存在的成员将被忽略，当`key`存在但不是有序集类型时，返回一个错误。        </span><br><span class="line">**返回值：** 被成功移除的成员的数量，不包括被忽略的成员。         </span><br><span class="line">**代码演示：**</span><br></pre></td></tr></table></figure></p><p>#测试数据</p><p>redis&gt; ZRANGE page_rank 0 -1 WITHSCORES<br>1) “bing.com”<br>2) “8”<br>3) “baidu.com”<br>4) “9”<br>5) “google.com”<br>6) “10”</p><p>#移除单个元素</p><p>redis&gt; ZREM page_rank google.com<br>(integer) 1</p><p>redis&gt; ZRANGE page_rank 0 -1 WITHSCORES<br>1) “bing.com”<br>2) “8”<br>3) “baidu.com”<br>4) “9”</p><p>#移除多个元素</p><p>redis&gt; ZREM page_rank baidu.com bing.com<br>(integer) 2</p><p>redis&gt; ZRANGE page_rank 0 -1 WITHSCORES<br>(empty list or set)</p><p>#移除不存在元素</p><p>redis&gt; ZREM page_rank non-exists-element<br>(integer) 0<br><code>`</code> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ws1.sinaimg.cn/large/e0e01e43gy1fzz559f0n2j21d80gf3zh.jpg&quot; alt=&quot;image&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis入门教程目录&lt;/strong&gt;：&lt;a href=&quot;https://ddnd.cn/categories/Redis/&quot;&gt;【Redis入门教程目录】&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://ddnd.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章 认识Redis 【Redis入门教程】</title>
    <link href="http://ddnd.cn/2019/02/08/redis-chapter-1/"/>
    <id>http://ddnd.cn/2019/02/08/redis-chapter-1/</id>
    <published>2019-02-08T09:19:29.000Z</published>
    <updated>2019-02-09T03:10:31.197Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ws1.sinaimg.cn/large/e0e01e43gy1fzz559f0n2j21d80gf3zh.jpg" alt="image" width="100%"></p><p><strong>Redis入门教程目录</strong>：<a href="https://ddnd.cn/categories/Redis/">【Redis入门教程目录】</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Redis</strong>是由C语言编写的开源、基于内存、支持多种数据结构、高性能的<strong>Key-Value</strong>数据库。<br><a id="more"></a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><p><strong>首先</strong>Redis是将数据储存在内存中的，通常情况下每秒读写次数达到<strong>千万级别</strong>。<strong>其次</strong>Redis使用<code>ANSI C</code>编写，因为C语言接近操作系统，所以Redis的执行效率很高。<strong>最后</strong>Redis的处理网络请求部分采用的是<strong>单线程</strong>，如果想充分利用CPU资源的话，可以多开几个Redis实例来达到目的，为什么单线程还是速度快的原因呢？我们知道Redis的读写都是基于内存的，读写速度都是非常快的，不会出现需要等待很长时间，所以瓶颈并不会出现在请求读写上，所以没必要使用多线程来利用CPU，如果使用多线程的话（<strong>线程数&gt;CPU数情况下</strong>），多线程的创建、销毁、线程切换、线程竞争等开销所需要的时间会比执行读写所损耗的时间还多，那就南辕北辙了，当然这是在数据量小的时候才会这样，如果数据量到达一定量级了，那肯定是多线程比单线程快（<strong>线程数&lt;=CPU数情况下</strong>）。<br><img src="http://wx4.sinaimg.cn/large/e0e01e43gy1fzzbt51xfuj20w30cvag3.jpg" alt="image"></p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>Redis可以通过<code>RDB</code>和<code>AOF</code>两种方式将数据持久化到磁盘上，其中这两种方式的区别如下：</p><ul><li><strong>RDB</strong>：是在指定的时间间隔内将内存中的数据通过<strong>异步</strong>生成数据快照并且保存到磁盘中。</li><li><strong>AOF</strong>：相对于<code>RDB</code>方式，<code>AOF</code>方式的持久化更细粒度，把每次数据变化（写、删除操作）都记录<strong>AOF文件</strong>中，其中AOF又可以配置为<code>always</code>即实时将记录写到AOF文件中，<code>everysec</code>每隔一秒将记录写到AOF文件中，<code>no</code>由系统决定何时将记录写到AOF文件中。<h3 id="多种数据结构"><a href="#多种数据结构" class="headerlink" title="多种数据结构"></a>多种数据结构</h3>Redis支持五种基本的数据结构，分别是String（字符串），Hash（哈希），List（列表），Set（集合），Zset（即Sorted Set有序集合）,这些数据结构类型和我们使用的开发语言的数据结构类型其实是相对应的。<br><img src="http://wx2.sinaimg.cn/large/e0e01e43gy1fzzfhx264oj20oc0awq52.jpg" alt="image"><h3 id="多语言客户端"><a href="#多语言客户端" class="headerlink" title="多语言客户端"></a>多语言客户端</h3>Redis支持多种语言，诸如Ruby,Python, Twisted Python, PHP, Erlang, Tcl, Perl, Lua, Java, Scala, Clojure等。<h3 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h3>Redis支持发布订阅、Lua脚本、事务、Pipeline等功能。<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3>在Redis中，用户可以通过执行SLAVEOF命令或者SLAVEOF选项，让从服务器去复制主服务器，为<strong>高可用</strong>和<strong>分布式</strong>提供了基础。<br><img src="http://wx2.sinaimg.cn/large/e0e01e43gy1fzzgkys41kj20pc0hrq7u.jpg" alt="image"><h3 id="高可用和集群"><a href="#高可用和集群" class="headerlink" title="高可用和集群"></a>高可用和集群</h3></li></ul><ol><li>高可用<br>有了主从复制之后的实现之后，如果想对服务器进行监控，那么在<code>Redis2.6</code>以后提供了一个<code>Sentinel</code>（哨兵机制）。顾名思义，哨兵的含义就是监控Redis系统的运行状态，可以启动多个哨兵，去监控Redis数据库的运行状态。其功能有以下两点：<br>a.监控所有节点数据库是否正常运行<br>b.<strong>主数据库</strong>出现故障时，可以通过自动投票机制，在<strong>从数据库</strong>选举出新的主数据库，实现将从数据库转为主数据库的自动切换。</li><li>集群<br>Redis在3.0版本正式引入了<code>Redis-Cluster</code>集群这个特征。Redis-Cluster采用无中心架构，每个节点保存完整的数据和整个集群的状态，每个节点都和其他所有节点连接。<br><img src="http://ws1.sinaimg.cn/large/e0e01e43gy1fzzymliocdj20dr0fun32.jpg" alt="image"></li></ol><h2 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h2><p>使用<code>wget</code>命令下载Redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压Redis压缩包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzf redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>进入到Redis的文件夹<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd redis-5.0.3</span><br></pre></td></tr></table></figure></p><p>编译Redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><p>这样我们的Redis就编译好了，为了能全局使用Redis的命令，我们还需要执行安装命令，将可执行文件安装到环境变量中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>这样Redis的安装就完成了，我们来启动Redis，其中Redis的启动有三种方式</p><ol><li>直接启动<br>直接执行<code>redis-server</code>即可启动Redis，这个方式启动实际上就是读取Redis的默认配置启动。</li><li>动态参数启动<br>执行<code>redis-server --port 6380</code>即可指定端口号启动Redis，更多参数可以参考官方的文档。</li><li>配置文件启动<br>执行<code>redis-server config.conf</code>即可指定名为<code>config.conf</code>的配置文件进行启动Redis。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ws1.sinaimg.cn/large/e0e01e43gy1fzz559f0n2j21d80gf3zh.jpg&quot; alt=&quot;image&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Redis入门教程目录&lt;/strong&gt;：&lt;a href=&quot;https://ddnd.cn/categories/Redis/&quot;&gt;【Redis入门教程目录】&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;是由C语言编写的开源、基于内存、支持多种数据结构、高性能的&lt;strong&gt;Key-Value&lt;/strong&gt;数据库。&lt;br&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://ddnd.cn/categories/Redis/"/>
    
    
  </entry>
  
  <entry>
    <title>QQ TEA加密算法 JAVA实现</title>
    <link href="http://ddnd.cn/2019/02/07/qq-tea-algorithm/"/>
    <id>http://ddnd.cn/2019/02/07/qq-tea-algorithm/</id>
    <published>2019-02-07T07:04:45.000Z</published>
    <updated>2019-02-07T07:34:08.959Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/large/e0e01e43gy1fzxvlxiq8nj20zf0kzqv5.jpg" alt="image" width="100%"></p><a id="more"></a><p><strong>TeaUtil.java：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 加密解密QQ消息的工具类. QQ消息的加密算法是一个16次的迭代过程，并且是反馈的，每一个加密单元是8字节，输出也是8字节，密钥是16字节</span><br><span class="line"> * 我们以prePlain表示前一个明文块，plain表示当前明文块，crypt表示当前明文块加密得到的密文块，preCrypt表示前一个密文块</span><br><span class="line"> * f表示加密算法，d表示解密算法 那么从plain得到crypt的过程是: crypt = f(plain &amp;circ; preCrypt) &amp;circ;</span><br><span class="line"> * prePlain 所以，从crypt得到plain的过程自然是 plain = d(crypt &amp;circ; prePlain) &amp;circ;</span><br><span class="line"> * preCrypt 此外，算法有它的填充机制，其会在明文前和明文后分别填充一定的字节数，以保证明文长度是8字节的倍数</span><br><span class="line"> * 填充的字节数与原始明文长度有关，填充的方法是:</span><br><span class="line"> *</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * &lt;code&gt;</span><br><span class="line"> *</span><br><span class="line"> *      ------- 消息填充算法 -----------</span><br><span class="line"> *      a = (明文长度 + 10) mod 8</span><br><span class="line"> *      if(a 不等于 0) a = 8 - a;</span><br><span class="line"> *      b = 随机数 &amp;amp; 0xF8 | a;              这个的作用是把a的值保存了下来</span><br><span class="line"> *      plain[0] = b;                   然后把b做为明文的第0个字节，这样第0个字节就保存了a的信息，这个信息在解密时就要用来找到真正明文的起始位置</span><br><span class="line"> *      plain[1 至 a+2] = 随机数 &amp;amp; 0xFF;    这里用随机数填充明文的第1到第a+2个字节</span><br><span class="line"> *      plain[a+3 至 a+3+明文长度-1] = 明文; 从a+3字节开始才是真正的明文</span><br><span class="line"> *      plain[a+3+明文长度, 最后] = 0;       在最后，填充0，填充到总长度为8的整数为止。到此为止，结束了，这就是最后得到的要加密的明文内容</span><br><span class="line"> *      ------- 消息填充算法 ------------</span><br><span class="line"> *</span><br><span class="line"> * &lt;/code&gt;</span><br><span class="line"> * &lt;/pre&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author luma</span><br><span class="line"> * @author notXX</span><br><span class="line"> */</span><br><span class="line">public class TeaUtil &#123;</span><br><span class="line">    // 指向当前的明文块</span><br><span class="line">    private byte[] plain;</span><br><span class="line">    // 这指向前面一个明文块</span><br><span class="line">    private byte[] prePlain;</span><br><span class="line">    // 输出的密文或者明文</span><br><span class="line">    private byte[] out;</span><br><span class="line">    // 当前加密的密文位置和上一次加密的密文块位置，他们相差8</span><br><span class="line">    private int crypt, preCrypt;</span><br><span class="line">    // 当前处理的加密解密块的位置</span><br><span class="line">    private int pos;</span><br><span class="line">    // 填充数</span><br><span class="line">    private int padding;</span><br><span class="line">    // 密钥</span><br><span class="line">    private byte[] key;</span><br><span class="line">    // 用于加密时，表示当前是否是第一个8字节块，因为加密算法是反馈的</span><br><span class="line">    // 但是最开始的8个字节没有反馈可用，所有需要标明这种情况</span><br><span class="line">    private boolean header = true;</span><br><span class="line">    // 这个表示当前解密开始的位置，之所以要这么一个变量是为了避免当解密到最后时</span><br><span class="line">    // 后面已经没有数据，这时候就会出错，这个变量就是用来判断这种情况免得出错</span><br><span class="line">    private int contextStart;</span><br><span class="line">    // 随机数对象</span><br><span class="line">    private static Random random = new Random();</span><br><span class="line">    // 字节输出流</span><br><span class="line">    private ByteArrayOutputStream baos;</span><br><span class="line">    /**</span><br><span class="line">     * 构造函数</span><br><span class="line">     */</span><br><span class="line">    public TeaUtil() &#123;</span><br><span class="line">        baos = new ByteArrayOutputStream(8);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 把字节数组从offset开始的len个字节转换成一个unsigned int， 因为java里面没有unsigned，所以unsigned</span><br><span class="line">     * int使用long表示的， 如果len大于8，则认为len等于8。如果len小于8，则高位填0 &lt;br&gt;</span><br><span class="line">     * (edited by notxx) 改变了算法, 性能稍微好一点. 在我的机器上测试10000次, 原始算法花费18s, 这个算法花费12s.</span><br><span class="line">     *</span><br><span class="line">     * @param in</span><br><span class="line">     *                   字节数组.</span><br><span class="line">     * @param offset</span><br><span class="line">     *                   从哪里开始转换.</span><br><span class="line">     * @param len</span><br><span class="line">     *                   转换长度, 如果len超过8则忽略后面的</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static long getUnsignedInt(byte[] in, int offset, int len) &#123;</span><br><span class="line">        long ret = 0;</span><br><span class="line">        int end = 0;</span><br><span class="line">        if (len &gt; 8)</span><br><span class="line">            end = offset + 8;</span><br><span class="line">        else</span><br><span class="line">            end = offset + len;</span><br><span class="line">        for (int i = offset; i &lt; end; i++) &#123;</span><br><span class="line">            ret &lt;&lt;= 8;</span><br><span class="line">            ret |= in[i] &amp; 0xff;</span><br><span class="line">        &#125;</span><br><span class="line">        return (ret &amp; 0xffffffffl) | (ret &gt;&gt;&gt; 32);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解密</span><br><span class="line">     * @param in 密文</span><br><span class="line">     * @param offset 密文开始的位置</span><br><span class="line">     * @param len 密文长度</span><br><span class="line">     * @param k 密钥</span><br><span class="line">     * @return 明文</span><br><span class="line">     */</span><br><span class="line">    public byte[] decrypt(byte[] in, int offset, int len, byte[] k) &#123;</span><br><span class="line">        // 检查密钥</span><br><span class="line">        if(k == null)</span><br><span class="line">            return null;</span><br><span class="line"></span><br><span class="line">        crypt = preCrypt = 0;</span><br><span class="line">        this.key = k;</span><br><span class="line">        int count;</span><br><span class="line">        byte[] m = new byte[offset + 8];</span><br><span class="line"></span><br><span class="line">        // 因为QQ消息加密之后至少是16字节，并且肯定是8的倍数，这里检查这种情况</span><br><span class="line">        if((len % 8 != 0) || (len &lt; 16)) return null;</span><br><span class="line">        // 得到消息的头部，关键是得到真正明文开始的位置，这个信息存在第一个字节里面，所以其用解密得到的第一个字节与7做与</span><br><span class="line">        prePlain = decipher(in, offset);</span><br><span class="line">        pos = prePlain[0] &amp; 0x7;</span><br><span class="line">        // 得到真正明文的长度</span><br><span class="line">        count = len - pos - 10;</span><br><span class="line">        // 如果明文长度小于0，那肯定是出错了，比如传输错误之类的，返回</span><br><span class="line">        if(count &lt; 0) return null;</span><br><span class="line"></span><br><span class="line">        // 这个是临时的preCrypt，和加密时第一个8字节块没有prePlain一样，解密时</span><br><span class="line">        // 第一个8字节块也没有preCrypt，所有这里建一个全0的</span><br><span class="line">        for(int i = offset; i &lt; m.length; i++)</span><br><span class="line">            m[i] = 0;</span><br><span class="line">        // 通过了上面的代码，密文应该是没有问题了，我们分配输出缓冲区</span><br><span class="line">        out = new byte[count];</span><br><span class="line">        // 设置preCrypt的位置等于0，注意目前的preCrypt位置是指向m的，因为java没有指针，所以我们在后面要控制当前密文buf的引用</span><br><span class="line">        preCrypt = 0;</span><br><span class="line">        // 当前的密文位置，为什么是8不是0呢？注意前面我们已经解密了头部信息了，现在当然该8了</span><br><span class="line">        crypt = 8;</span><br><span class="line">        // 自然这个也是8</span><br><span class="line">        contextStart = 8;</span><br><span class="line">        // 加1，和加密算法是对应的</span><br><span class="line">        pos++;</span><br><span class="line"></span><br><span class="line">        // 开始跳过头部，如果在这个过程中满了8字节，则解密下一块</span><br><span class="line">        // 因为是解密下一块，所以我们有一个语句 m = in，下一块当然有preCrypt了，我们不再用m了</span><br><span class="line">        // 但是如果不满8，这说明了什么？说明了头8个字节的密文是包含了明文信息的，当然还是要用m把明文弄出来</span><br><span class="line">        // 所以，很显然，满了8的话，说明了头8个字节的密文除了一个长度信息有用之外，其他都是无用的填充</span><br><span class="line">        padding = 1;</span><br><span class="line">        while(padding &lt;= 2) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                pos++;</span><br><span class="line">                padding++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8) &#123;</span><br><span class="line">                m = in;</span><br><span class="line">                if(!decrypt8Bytes(in, offset, len)) return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 这里是解密的重要阶段，这个时候头部的填充都已经跳过了，开始解密</span><br><span class="line">        // 注意如果上面一个while没有满8，这里第一个if里面用的就是原始的m，否则这个m就是in了</span><br><span class="line">        int i = 0;</span><br><span class="line">        while(count != 0) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                out[i] = (byte)(m[offset + preCrypt + pos] ^ prePlain[pos]);</span><br><span class="line">                i++;</span><br><span class="line">                count--;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8) &#123;</span><br><span class="line">                m = in;</span><br><span class="line">                preCrypt = crypt - 8;</span><br><span class="line">                if(!decrypt8Bytes(in, offset, len))</span><br><span class="line">                    return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 最后的解密部分，上面一个while已经把明文都解出来了，就剩下尾部的填充了，应该全是0</span><br><span class="line">        // 所以这里有检查是否解密了之后是不是0，如果不是的话那肯定出错了，返回null</span><br><span class="line">        for(padding = 1; padding &lt; 8; padding++) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                if((m[offset + preCrypt + pos] ^ prePlain[pos]) != 0)</span><br><span class="line">                    return null;</span><br><span class="line">                pos++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8) &#123;</span><br><span class="line">                m = in;</span><br><span class="line">                preCrypt = crypt;</span><br><span class="line">                if(!decrypt8Bytes(in, offset, len))</span><br><span class="line">                    return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param in</span><br><span class="line">     *            需要被解密的密文</span><br><span class="line">     * @paraminLen</span><br><span class="line">     *            密文长度</span><br><span class="line">     * @param k</span><br><span class="line">     *            密钥</span><br><span class="line">     * @return Message 已解密的消息</span><br><span class="line">     */</span><br><span class="line">    public byte[] decrypt(byte[] in, byte[] k) &#123;</span><br><span class="line">        return decrypt(in, 0, in.length, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密</span><br><span class="line">     * @param in 明文字节数组</span><br><span class="line">     * @param offset 开始加密的偏移</span><br><span class="line">     * @param len 加密长度</span><br><span class="line">     * @param k 密钥</span><br><span class="line">     * @return 密文字节数组</span><br><span class="line">     */</span><br><span class="line">    public byte[] encrypt(byte[] in, int offset, int len, byte[] k) &#123;</span><br><span class="line">        // 检查密钥</span><br><span class="line">        if(k == null)</span><br><span class="line">            return in;</span><br><span class="line"></span><br><span class="line">        plain = new byte[8];</span><br><span class="line">        prePlain = new byte[8];</span><br><span class="line">        pos = 1;</span><br><span class="line">        padding = 0;</span><br><span class="line">        crypt = preCrypt = 0;</span><br><span class="line">        this.key = k;</span><br><span class="line">        header = true;</span><br><span class="line"></span><br><span class="line">        // 计算头部填充字节数</span><br><span class="line">        pos = (len + 0x0A) % 8;</span><br><span class="line">        if(pos != 0)</span><br><span class="line">            pos = 8 - pos;</span><br><span class="line">        // 计算输出的密文长度</span><br><span class="line">        out = new byte[len + pos + 10];</span><br><span class="line">        // 这里的操作把pos存到了plain的第一个字节里面</span><br><span class="line">        // 0xF8后面三位是空的，正好留给pos，因为pos是0到7的值，表示文本开始的字节位置</span><br><span class="line">        plain[0] = (byte)((rand() &amp; 0xF8) | pos);</span><br><span class="line"></span><br><span class="line">        // 这里用随机产生的数填充plain[1]到plain[pos]之间的内容</span><br><span class="line">        for(int i = 1; i &lt;= pos; i++)</span><br><span class="line">            plain[i] = (byte)(rand() &amp; 0xFF);</span><br><span class="line">        pos++;</span><br><span class="line">        // 这个就是prePlain，第一个8字节块当然没有prePlain，所以我们做一个全0的给第一个8字节块</span><br><span class="line">        for(int i = 0; i &lt; 8; i++)</span><br><span class="line">            prePlain[i] = 0x0;</span><br><span class="line"></span><br><span class="line">        // 继续填充2个字节的随机数，这个过程中如果满了8字节就加密之</span><br><span class="line">        padding = 1;</span><br><span class="line">        while(padding &lt;= 2) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                plain[pos++] = (byte)(rand() &amp; 0xFF);</span><br><span class="line">                padding++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8)</span><br><span class="line">                encrypt8Bytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 头部填充完了，这里开始填真正的明文了，也是满了8字节就加密，一直到明文读完</span><br><span class="line">        int i = offset;</span><br><span class="line">        while(len &gt; 0) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                plain[pos++] = in[i++];</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8)</span><br><span class="line">                encrypt8Bytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 最后填上0，以保证是8字节的倍数</span><br><span class="line">        padding = 1;</span><br><span class="line">        while(padding &lt;= 7) &#123;</span><br><span class="line">            if(pos &lt; 8) &#123;</span><br><span class="line">                plain[pos++] = 0x0;</span><br><span class="line">                padding++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(pos == 8)</span><br><span class="line">                encrypt8Bytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param in</span><br><span class="line">     *            需要加密的明文</span><br><span class="line">     * @paraminLen</span><br><span class="line">     *            明文长度</span><br><span class="line">     * @param k</span><br><span class="line">     *            密钥</span><br><span class="line">     * @return Message 密文</span><br><span class="line">     */</span><br><span class="line">    public byte[] encrypt(byte[] in, byte[] k) &#123;</span><br><span class="line">        return encrypt(in, 0, in.length, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密一个8字节块</span><br><span class="line">     *</span><br><span class="line">     * @param in</span><br><span class="line">     * 明文字节数组</span><br><span class="line">     * @return</span><br><span class="line">     * 密文字节数组</span><br><span class="line">     */</span><br><span class="line">    private byte[] encipher(byte[] in) &#123;</span><br><span class="line">        // 迭代次数，16次</span><br><span class="line">        int loop = 0x10;</span><br><span class="line">        // 得到明文和密钥的各个部分，注意java没有无符号类型，所以为了表示一个无符号的整数</span><br><span class="line">        // 我们用了long，这个long的前32位是全0的，我们通过这种方式模拟无符号整数，后面用到的long也都是一样的</span><br><span class="line">        // 而且为了保证前32位为0，需要和0xFFFFFFFF做一下位与</span><br><span class="line">        long y = getUnsignedInt(in, 0, 4);</span><br><span class="line">        long z = getUnsignedInt(in, 4, 4);</span><br><span class="line">        long a = getUnsignedInt(key, 0, 4);</span><br><span class="line">        long b = getUnsignedInt(key, 4, 4);</span><br><span class="line">        long c = getUnsignedInt(key, 8, 4);</span><br><span class="line">        long d = getUnsignedInt(key, 12, 4);</span><br><span class="line">        // 这是算法的一些控制变量，为什么delta是0x9E3779B9呢？</span><br><span class="line">        // 这个数是TEA算法的delta，实际是就是(sqr(5) - 1) * 2^31 (根号5，减1，再乘2的31次方)</span><br><span class="line">        long sum = 0;</span><br><span class="line">        long delta = 0x9E3779B9;</span><br><span class="line">        delta &amp;= 0xFFFFFFFFL;</span><br><span class="line"></span><br><span class="line">        // 开始迭代了，乱七八糟的，我也看不懂，反正和DES之类的差不多，都是这样倒来倒去</span><br><span class="line">        while (loop-- &gt; 0) &#123;</span><br><span class="line">            sum += delta;</span><br><span class="line">            sum &amp;= 0xFFFFFFFFL;</span><br><span class="line">            y += ((z &lt;&lt; 4) + a) ^ (z + sum) ^ ((z &gt;&gt;&gt; 5) + b);</span><br><span class="line">            y &amp;= 0xFFFFFFFFL;</span><br><span class="line">            z += ((y &lt;&lt; 4) + c) ^ (y + sum) ^ ((y &gt;&gt;&gt; 5) + d);</span><br><span class="line">            z &amp;= 0xFFFFFFFFL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 最后，我们输出密文，因为我用的long，所以需要强制转换一下变成int</span><br><span class="line">        baos.reset();</span><br><span class="line">        writeInt((int)y);</span><br><span class="line">        writeInt((int)z);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解密从offset开始的8字节密文</span><br><span class="line">     *</span><br><span class="line">     * @param in</span><br><span class="line">     * 密文字节数组</span><br><span class="line">     * @param offset</span><br><span class="line">     * 密文开始位置</span><br><span class="line">     * @return</span><br><span class="line">     * 明文</span><br><span class="line">     */</span><br><span class="line">    private byte[] decipher(byte[] in, int offset) &#123;</span><br><span class="line">        // 迭代次数，16次</span><br><span class="line">        int loop = 0x10;</span><br><span class="line">        // 得到密文和密钥的各个部分，注意java没有无符号类型，所以为了表示一个无符号的整数</span><br><span class="line">        // 我们用了long，这个long的前32位是全0的，我们通过这种方式模拟无符号整数，后面用到的long也都是一样的</span><br><span class="line">        // 而且为了保证前32位为0，需要和0xFFFFFFFF做一下位与</span><br><span class="line">        long y = getUnsignedInt(in, offset, 4);</span><br><span class="line">        long z = getUnsignedInt(in, offset + 4, 4);</span><br><span class="line">        long a = getUnsignedInt(key, 0, 4);</span><br><span class="line">        long b = getUnsignedInt(key, 4, 4);</span><br><span class="line">        long c = getUnsignedInt(key, 8, 4);</span><br><span class="line">        long d = getUnsignedInt(key, 12, 4);</span><br><span class="line">        // 算法的一些控制变量，sum在这里也有数了，这个sum和迭代次数有关系</span><br><span class="line">        // 因为delta是这么多，所以sum如果是这么多的话，迭代的时候减减减，减16次，最后</span><br><span class="line">        // 得到0。反正这就是为了得到和加密时相反顺序的控制变量，这样才能解密呀～～</span><br><span class="line">        long sum = 0xE3779B90;</span><br><span class="line">        sum &amp;= 0xFFFFFFFFL;</span><br><span class="line">        long delta = 0x9E3779B9;</span><br><span class="line">        delta &amp;= 0xFFFFFFFFL;</span><br><span class="line"></span><br><span class="line">        // 迭代开始了， @_@</span><br><span class="line">        while(loop-- &gt; 0) &#123;</span><br><span class="line">            z -= ((y &lt;&lt; 4) + c) ^ (y + sum) ^ ((y &gt;&gt;&gt; 5) + d);</span><br><span class="line">            z &amp;= 0xFFFFFFFFL;</span><br><span class="line">            y -= ((z &lt;&lt; 4) + a) ^ (z + sum) ^ ((z &gt;&gt;&gt; 5) + b);</span><br><span class="line">            y &amp;= 0xFFFFFFFFL;</span><br><span class="line">            sum -= delta;</span><br><span class="line">            sum &amp;= 0xFFFFFFFFL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        baos.reset();</span><br><span class="line">        writeInt((int)y);</span><br><span class="line">        writeInt((int)z);</span><br><span class="line">        return baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 写入一个整型到输出流，高字节优先</span><br><span class="line">     *</span><br><span class="line">     * @param t</span><br><span class="line">     */</span><br><span class="line">    private void writeInt(int t) &#123;</span><br><span class="line">        baos.write(t &gt;&gt;&gt; 24);</span><br><span class="line">        baos.write(t &gt;&gt;&gt; 16);</span><br><span class="line">        baos.write(t &gt;&gt;&gt; 8);</span><br><span class="line">        baos.write(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解密</span><br><span class="line">     *</span><br><span class="line">     * @param in</span><br><span class="line">     * 密文</span><br><span class="line">     * @return</span><br><span class="line">     * 明文</span><br><span class="line">     */</span><br><span class="line">    private byte[] decipher(byte[] in) &#123;</span><br><span class="line">        return decipher(in, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加密8字节</span><br><span class="line">     */</span><br><span class="line">    private void encrypt8Bytes() &#123;</span><br><span class="line">        // 这部分完成我上面所说的 plain ^ preCrypt，注意这里判断了是不是第一个8字节块，如果是的话，那个prePlain就当作preCrypt用</span><br><span class="line">        for(pos = 0; pos &lt; 8; pos++) &#123;</span><br><span class="line">            if(header)</span><br><span class="line">                plain[pos] ^= prePlain[pos];</span><br><span class="line">            else</span><br><span class="line">                plain[pos] ^= out[preCrypt + pos];</span><br><span class="line">        &#125;</span><br><span class="line">        // 这个完成我上面说的 f(plain ^ preCrypt)</span><br><span class="line">        byte[] crypted = encipher(plain);</span><br><span class="line">        // 这个没什么，就是拷贝一下，java不像c，所以我只好这么干，c就不用这一步了</span><br><span class="line">        System.arraycopy(crypted, 0, out, crypt, 8);</span><br><span class="line"></span><br><span class="line">        // 这个完成了 f(plain ^ preCrypt) ^ prePlain，ok，下面拷贝一下就行了</span><br><span class="line">        for(pos = 0; pos &lt; 8; pos++)</span><br><span class="line">            out[crypt + pos] ^= prePlain[pos];</span><br><span class="line">        System.arraycopy(plain, 0, prePlain, 0, 8);</span><br><span class="line"></span><br><span class="line">        // 完成了加密，现在是调整crypt，preCrypt等等东西的时候了</span><br><span class="line">        preCrypt = crypt;</span><br><span class="line">        crypt += 8;</span><br><span class="line">        pos = 0;</span><br><span class="line">        header = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 解密8个字节</span><br><span class="line">     *</span><br><span class="line">     * @param in</span><br><span class="line">     * 密文字节数组</span><br><span class="line">     * @param offset</span><br><span class="line">     * 从何处开始解密</span><br><span class="line">     * @param len</span><br><span class="line">     * 密文的长度</span><br><span class="line">     * @return</span><br><span class="line">     * true表示解密成功</span><br><span class="line">     */</span><br><span class="line">    private boolean decrypt8Bytes(byte[] in , int offset, int len) &#123;</span><br><span class="line">        // 这里第一步就是判断后面还有没有数据，没有就返回，如果有，就执行 crypt ^ prePlain</span><br><span class="line">        for(pos = 0; pos &lt; 8; pos++) &#123;</span><br><span class="line">            if(contextStart + pos &gt;= len)</span><br><span class="line">                return true;</span><br><span class="line">            prePlain[pos] ^= in[offset + crypt + pos];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 好，这里执行到了 d(crypt ^ prePlain)</span><br><span class="line">        prePlain = decipher(prePlain);</span><br><span class="line">        if(prePlain == null)</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        // 解密完成，最后一步好像没做？</span><br><span class="line">        // 这里最后一步放到decrypt里面去做了，因为解密的步骤有点不太一样</span><br><span class="line">        // 调整这些变量的值先</span><br><span class="line">        contextStart += 8;</span><br><span class="line">        crypt += 8;</span><br><span class="line">        pos = 0;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 这是个随机因子产生器，用来填充头部的，如果为了调试，可以用一个固定值</span><br><span class="line">     * 随机因子可以使相同的明文每次加密出来的密文都不一样</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     * 随机因子</span><br><span class="line">     */</span><br><span class="line">    private int rand() &#123;</span><br><span class="line">        return random.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用算法加解密：<br><strong>Test.java:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        byte[] KEY = new byte[]&#123;//KEY</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        byte[] content = new byte[]&#123;//加密内容</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">                0x00000000, 0x00000000,</span><br><span class="line">        &#125;;        </span><br><span class="line">        </span><br><span class="line">        TeaUtil teaUtil = new TeaUtil();</span><br><span class="line">        byte[] enByte = teaUtil.encrypt(content,KEY); //加密后的字节</span><br><span class="line">        byte[] deByte = teaUtil.decrypt(enByte,KEY); //解密后的字节</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/large/e0e01e43gy1fzxvlxiq8nj20zf0kzqv5.jpg&quot; alt=&quot;image&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://ddnd.cn/categories/Technique/"/>
    
    
      <category term="TEA算法" scheme="http://ddnd.cn/tags/TEA%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Shiro和Spring MVC、Mybatis整合教程</title>
    <link href="http://ddnd.cn/2019/02/02/springmvc-mybatis-shiro/"/>
    <id>http://ddnd.cn/2019/02/02/springmvc-mybatis-shiro/</id>
    <published>2019-02-02T13:00:54.000Z</published>
    <updated>2019-02-02T16:11:36.020Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fzsdwjowogj21rf0p0tc4.jpg" style="width: 100%"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Apache Shiro 是Java的<strong>安全框架</strong>，提供了认证（Authentication）、授权（Authorization）、会话（Session）管理、加密（Cryptography）等功能，且Shiro与Spring Security等安全框架相比具有简单性、灵活性、支持细粒度鉴权、支持一级缓存等，<strong>还有Shiro不跟任何容器（Tomcat等）和框架（Sping等）捆绑，可以独立运行，这也造就了Shiro不仅仅是可以用在Java EE上还可以用在Java SE上</strong>。</p><a id="more"></a><h2 id="Shiro四大功能"><a href="#Shiro四大功能" class="headerlink" title="Shiro四大功能"></a>Shiro四大功能</h2><p>在开始之前，首先了解一下Shiro的四大功能，俗话说“知己知彼百战不殆”。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fzses93aygj20dn071q3n.jpg" alt="image"></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p><strong>认证</strong>就是用户访问系统的时候，系统要验证用户身份的合法性，比如我们通常所说的“登录”就是认证的一种方式，只有登录成功了之后我们才能访问相应的资源。在Shiro中，我们可以将用户理解为<strong>Subject</strong>主体，在用户身份认证的时候，用户需要提供能证明他身份的信息，如用户名、密码等，用户所提供的这些用户名、密码则对应Shiro中的Principal、 Credentials，即在Subject进行身份认证的时候，需要提供相应的Principal、 Credentials，对应的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">subject.login(token); //提交认证</span><br></pre></td></tr></table></figure></p><p>我们知道Http协议是<strong>无状态</strong>的，所以用户认证成功后怎么才能保持认证成功的状态呢？如果是我们开发的话一般都是登录成功后将Session储存在服务器，然后再将Session返回给用户，之后的请求用户都将这个Session带上，然后服务器根据用户请求携带的Session和服务器储存的Session进行比较来判断用户是否已认证。但是使用Shiro后，<strong>Shiro已经帮我们做好这个了（下面介绍的会话管理），是不是feel爽~</strong></p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p><strong>授权</strong>可以理解为访问控制，在用户认证（登录）成功之后，系统对用户访问资源的权限进行控制，即确定什么用户能访问什么资源，如普通用户不能访问后台，但是管理员可以。在这里我们还需要认识几个概念，资源（Resource）、角色（Role）、权限（Permission），上面提到的Subject主体可以有多个角色，每个角色又对应多个资源的多个权限，这种<strong>基于资源的访问控制</strong>可以实现细粒度的权限。对主体设置角色、权限的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line">//  添加用户的角色</span><br><span class="line">authorizationInfo.addRoles(roleIdList);</span><br><span class="line">//  添加用户的权限</span><br><span class="line">authorizationInfo.addStringPermissions(resourceIdList);</span><br></pre></td></tr></table></figure></p><p>如果要实现这样的授权功能，我们必定需要设计一个用户组、权限，给每个方法或者URL加上判断，是否当前登录的用户满足条件。但是使用Shiro后，<strong>Shiro也帮我们帮这些都做好了</strong>。</p><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><p><strong>会话管理</strong>的会话即Session，所谓会话，即用户访问应用时保持的连接关系，在多次交互中应用能够识别出当前访问的用户是谁，且可以在多次交互中保存一些数据。如访问一些网站时登录成功后，网站可以记住用户，且在退出之前都可以识别当前用户是谁。在Shiro中，与用户有关的一切信息都可以通过Shiro的接口获得，和用户的会话Session也都由Shiro管理。如实现“记住我”或者“下次自动登录”的功能，如果要自己去开发的话，估计又得话不少时间。但是使用Shiro后，<strong>Shiro也帮我们帮这些都做好了</strong>。</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>用户密码明文保存是不是安全，应不应该MD5加密，是不是应该加盐，又要写密码加密的代码。 <strong>这些Shiro已经帮你做好了</strong>。</p><h2 id="Shiro三大核心概念"><a href="#Shiro三大核心概念" class="headerlink" title="Shiro三大核心概念"></a>Shiro三大核心概念</h2><p>从整体概念上理解，Shiro的体系架构有三个主要的概念，Subject（主体），Security Manager （安全管理器）和 Realms （域）。<br><img src="https://wx2.sinaimg.cn/large/e0e01e43gy1fzshhy6iu1j20bi0680tg.jpg" alt="image"></p><h3 id="Subject主体"><a href="#Subject主体" class="headerlink" title="Subject主体"></a>Subject主体</h3><p>主体是当前正在操作的用户的特定数据集合。主体可以是一个人，也可以代表第三方服务，守护进程，定时任务或类似的东西，也就是几乎所有与该应用进行交互的事物。所有Subject都绑定到<code>SecurityManager</code>，与Subject的所有交互都会委托给 SecurityManager，可以把 Subject 认为是一个门面，SecurityManager 才是实际的执行者。</p><h3 id="Security-Manager安全管理器"><a href="#Security-Manager安全管理器" class="headerlink" title="Security Manager安全管理器"></a>Security Manager安全管理器</h3><p>安全管理器，即所有与安全有关的操作都会与<code>SecurityManager</code>交互，且它<strong>管理着所有Subject</strong>可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成DispatcherServlet前端控制器，<strong>一般来说，一个应用只会存在一个SecurityManager实例</strong>。</p><h3 id="Realms域"><a href="#Realms域" class="headerlink" title="Realms域"></a>Realms域</h3><p>域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法，也需要从Realm得到用户相应的角色 / 权限进行验证用户是否能进行操作，即Realms作为Shiro与应用程序安全数据之间的“桥梁”。从这个意义上讲，Realm实质上是一个安全相关的<strong>DAO</strong>，它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。其中Realm有2个方法，<code>doGetAuthenticationInfo</code>用来认证，<code>doGetAuthorizationInfo</code>用来授权。</p><h2 id="Spring、Spring-MVC、Mybatis、Shiro集成"><a href="#Spring、Spring-MVC、Mybatis、Shiro集成" class="headerlink" title="Spring、Spring MVC、Mybatis、Shiro集成"></a>Spring、Spring MVC、Mybatis、Shiro集成</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p><img src="https://ws4.sinaimg.cn/large/e0e01e43gy1fzsi0tujz0j20a50pgq4d.jpg" alt="image"></p><h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><p><strong>pox.xml：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">  &lt;groupId&gt;shiro&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;shiro&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">  &lt;name&gt;shiro Maven Webapp&lt;/name&gt;</span><br><span class="line">  &lt;!-- FIXME change it to the project&apos;s website --&gt;</span><br><span class="line">  &lt;url&gt;http://www.example.com&lt;/url&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;</span><br><span class="line">    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.11&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Sping核心依赖--&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Mybatis依赖--&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--MySQL连接驱动--&gt;</span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-web --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;shiro&lt;/finalName&gt;</span><br><span class="line">    &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.0.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.22.1&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.2.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.8.2&lt;/version&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">    &lt;/pluginManagement&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h3 id="创建数据库和实体类"><a href="#创建数据库和实体类" class="headerlink" title="创建数据库和实体类"></a>创建数据库和实体类</h3><p>为了减少篇幅，只做简单介绍，详情可以查看源码，数据库文件在本项目根目录。<br><img src="https://wx1.sinaimg.cn/large/e0e01e43gy1fzsi4q8o9qj20ks05pdge.jpg" alt="image"></p><ul><li>resource表：资源表，有<code>id</code>，<code>name</code>两个字段，分别对应资源id和权限。</li><li>role表：角色表，有<code>id</code>，<code>name</code>两个字段，分别对应角色id和角色名。</li><li>role_resource表：角色资源权限表，有<code>id</code>，<code>roleid</code>，<code>resid</code>三个字段，分别对应自增id、角色id和资源id。</li><li>user表：用户表，有<code>id</code>，<code>username</code>，<code>password</code>三个字段，分别对应自增id、用户名和密码。</li><li>user_role表：有<code>id</code>，<code>uid</code>，<code>rid</code>三个字段，分别对应自增id、用户id、和角色id。</li></ul><h3 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h3><p><strong>AccountDao.java：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface AccountDao &#123;</span><br><span class="line">    User findUserByUsername(String username);</span><br><span class="line">    List&lt;Role&gt; findRoleByUserId(int id);</span><br><span class="line">    List&lt;Resource&gt; findResourceByUserId(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><p><strong>AccountService.java：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface AccountService &#123;</span><br><span class="line">    User findUserByUsername(String username);</span><br><span class="line">    List&lt;Role&gt; findRoleByUserId(int id);</span><br><span class="line">    List&lt;Resource&gt; findResourceByUserId(int id);</span><br><span class="line">    boolean login(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>AccountServiceImpl.java：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.shiro.service.impl;</span><br><span class="line"></span><br><span class="line">import com.shiro.dao.AccountDao;</span><br><span class="line">import com.shiro.entity.Role;</span><br><span class="line">import com.shiro.entity.User;</span><br><span class="line">import com.shiro.service.AccountService;</span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @program: shiro</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: Xue 8</span><br><span class="line"> * @create: 2019-02-01 15:37</span><br><span class="line"> **/</span><br><span class="line">@Service</span><br><span class="line">public class AccountServiceImpl implements AccountService &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description: 根据用户名查找用户信息</span><br><span class="line">     * @param: [username]</span><br><span class="line">     * @return: com.shiro.entity.User</span><br><span class="line">     * @author: Xue 8</span><br><span class="line">     * @date: 2019/2/1</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public User findUserByUsername(String username) &#123;</span><br><span class="line">        return accountDao.findUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Role&gt; findRoleByUserId(int id) &#123;</span><br><span class="line">        return accountDao.findRoleByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;com.shiro.entity.Resource&gt; findResourceByUserId(int id) &#123;</span><br><span class="line">        return accountDao.findResourceByUserId(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean login(User user)&#123;</span><br><span class="line">//        获取当前用户对象subject</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        System.out.println(&quot;subject:&quot; + subject.toString());</span><br><span class="line">//        创建用户名/密码身份证验证Token</span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(user.getUsername(), user.getPassword());</span><br><span class="line">        System.out.println(&quot;token&quot; + token);</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(&quot;登录成功&quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;登录失败&quot; + e);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>MyRealm.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">package com.shiro.service.impl;</span><br><span class="line"></span><br><span class="line">import com.shiro.entity.Role;</span><br><span class="line">import com.shiro.entity.User;</span><br><span class="line">import com.shiro.service.AccountService;</span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.*;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line">import org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line">import org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line">import org.apache.shiro.session.Session;</span><br><span class="line">import org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @program: shiro</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: Xue 8</span><br><span class="line"> * @create: 2019-02-01 15:16</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">public class MyRealm extends AuthorizingRealm &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      * 身份认证的方法 认证成功获取身份验证信息</span><br><span class="line">     * 这里最主要的是user.login(token);这里有一个参数token，这个token就是用户输入的用户密码，</span><br><span class="line">     * 我们平时可能会用一个对象user来封装用户名和密码，shiro用的是token，这个是控制层的代码，还没到shiro，</span><br><span class="line">     * 当调用user.login(token)后，就交给shiro去处理了，接下shiro应该是去token中取出用户名，然后根据用户去查数据库，</span><br><span class="line">     * 把数据库中的密码查出来。这部分代码一般都是要求我们自定义实现，自定义一个realm，重写doGetAuthenticationInfo方法</span><br><span class="line">    **/</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">//        获取用户输入的用户名和密码</span><br><span class="line">//        实际上这个token是从UserResource面currentUser.login(token)传过来的</span><br><span class="line">//        两个token的引用都是一样的</span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">//        密码要用字符数组来接受 因为UsernamePasswordToken(username, password) 储存密码的时候是将字符串类型转成字符数组的 查看源码可以看出</span><br><span class="line">        String password = new String((char[]) authenticationToken.getCredentials());</span><br><span class="line">//        调用service 根据用户名查询用户信息</span><br><span class="line">        User user = accountService.findUserByUsername(username);</span><br><span class="line">//        String password = user.getPassword();</span><br><span class="line">//        判断用户是否存在 不存在则抛出异常</span><br><span class="line">        if (user != null) &#123;</span><br><span class="line">//            判断用户密码是否匹配 匹配则不匹配则抛出异常</span><br><span class="line">            if (user.getPassword().equals(password)) &#123;</span><br><span class="line">//                登录成功 把用户信息储存在Session中</span><br><span class="line">                Session session = SecurityUtils.getSubject().getSession();</span><br><span class="line">                session.setAttribute(&quot;userSession&quot;, user);</span><br><span class="line">                session.setAttribute(&quot;userSessionId&quot;, user.getId());</span><br><span class="line">//                认证成功 返回一个AuthenticationInfo的实现</span><br><span class="line">                return new SimpleAuthenticationInfo(username, password, getName());</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;密码不正确&quot;);</span><br><span class="line">                throw new IncorrectCredentialsException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;账号不存在&quot;);</span><br><span class="line">            throw new UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      * 授权的方法</span><br><span class="line">     * 1、subject.hasRole(“admin”) 或 subject.isPermitted(“admin”)：自己去调用这个是否有什么角色或者是否有什么权限的时候；</span><br><span class="line">     *</span><br><span class="line">     * 2、@RequiresRoles(&quot;admin&quot;) ：在方法上加注解的时候；</span><br><span class="line">     *</span><br><span class="line">     * 3、[@shiro.hasPermission name = &quot;admin&quot;][/@shiro.hasPermission]：在页面上加shiro标签的时候，即进这个页面的时候扫描到有这个标签的时候。</span><br><span class="line">     * 4、xml配置权限的时候也会走</span><br><span class="line">    **/</span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        System.out.println(&quot;授权&quot;);</span><br><span class="line">//        从principalCollection获取用户信息</span><br><span class="line">//        如果doGetAuthenticationInfo(user,password,getName()); 传入的是user类型的数据 那这里getPrimaryPrincipal获取到的也是user类型的数据</span><br><span class="line">        String username = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        User user = accountService.findUserByUsername(username);</span><br><span class="line">//        获取该用户的所有角色</span><br><span class="line">        List&lt;Role&gt; roleList = accountService.findRoleByUserId(user.getId());</span><br><span class="line">//        将角色的id放到一个String列表中 因为authorizationInfo.addRoles()方法只支持角色的String列表或者单个角色String</span><br><span class="line">        List&lt;String&gt; roleIdList = new ArrayList&lt;String&gt;();</span><br><span class="line">        for (Role role:roleList) &#123;</span><br><span class="line">            roleIdList.add(role.getName());</span><br><span class="line">        &#125;</span><br><span class="line">//        获取该用户的所有权限</span><br><span class="line">        List&lt;com.shiro.entity.Resource&gt; resourceList = accountService.findResourceByUserId(user.getId());</span><br><span class="line">        List&lt;String&gt; resourceIdList = new ArrayList&lt;String&gt;();</span><br><span class="line">//        将权限id放到一个String列表中 因为authorizationInfo.addRoles()方法只支持角色的String列表或者单个角色String</span><br><span class="line">        for (com.shiro.entity.Resource resource:resourceList) &#123;</span><br><span class="line">            resourceIdList.add(resource.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;授权11&quot;);</span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line">//        添加用户的角色</span><br><span class="line">        authorizationInfo.addRoles(roleIdList);</span><br><span class="line">//        添加用户的权限</span><br><span class="line">        authorizationInfo.addStringPermissions(resourceIdList);</span><br><span class="line">        return authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h3><p><strong>AccountController.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.shiro.controller;</span><br><span class="line"></span><br><span class="line">import com.shiro.entity.User;</span><br><span class="line">import com.shiro.service.AccountService;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @program: shiro</span><br><span class="line"> * @description:</span><br><span class="line"> * @author: Xue 8</span><br><span class="line"> * @create: 2019-02-01 13:14</span><br><span class="line"> **/</span><br><span class="line">@Controller</span><br><span class="line">public class AccountController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    AccountService accountService;</span><br><span class="line">    @Resource</span><br><span class="line">    HttpServletRequest servletRequest;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/home&quot;)</span><br><span class="line">    public String  home()&#123;</span><br><span class="line">        return &quot;home&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String  getLogin()&#123;</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span><br><span class="line">    public String doLogin(@RequestParam(value = &quot;username&quot;) String username,</span><br><span class="line">                        @RequestParam(value = &quot;password&quot;) String password)&#123;</span><br><span class="line">        User user = new User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        if (accountService.login(user)) &#123;</span><br><span class="line">            return &quot;/home&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;/login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以<code>GET</code>方法访问<code>/login</code>的时候，会出现登录页面，输入账号密码点击登录数据将以<code>POST</code>方式提交给<code>/login</code>，如果账号密码匹配返回<code>/home</code>的页面，否则返回<code>/login</code>的页面。<code>/home</code>页面只有在登录且有权限的情况下才可以访问，<strong>未登录情况下</strong>访问会转跳<code>/login</code>页面，这个在Shiro的配置文件里面配置。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>applicationContext.xml：配置Spring</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开启扫描注册--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.shiro&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--读取properties配置--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;location&quot; value=&quot;classpath:jdbcConfig.properties&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;driverClassName&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置session工厂--&gt;</span><br><span class="line">    &lt;bean id=&quot;sessionFactoryBean&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapping/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置扫描mapping--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;com.shiro.dao&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sessionFactoryBean&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p><strong>spring-shiro.xml：配置Shiro</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;realm&quot; ref=&quot;myRealm&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;myRealm&quot; class=&quot;com.shiro.service.impl.MyRealm&quot;&gt;</span><br><span class="line">        &lt;!--关闭权限缓存 不然doGetAuthorizationInfo授权方法不执行--&gt;</span><br><span class="line">        &lt;property name=&quot;authorizationCachingEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;successUrl&quot; value=&quot;/success&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--登录页面--&gt;</span><br><span class="line">        &lt;property name=&quot;loginUrl&quot; value=&quot;/login&quot;&gt;&lt;/property&gt; </span><br><span class="line">        &lt;property name=&quot;filterChainDefinitions&quot;&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">                &lt;!--配置`/home`只有拥有`admin`角色的用户才可以访问--&gt;</span><br><span class="line">                /home = authc,roles[admin]</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p><strong>这里需要注意的是 在配置Realm的时候，如果没用上缓存功能的话，需要将缓存关掉，不然进不到doGetAuthorizationInfo授权方法。</strong></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>打开<code>http://localhost:8080/login</code>登录页面，填写正确用户名和密码登录<br><img src="https://wx1.sinaimg.cn/large/e0e01e43gy1fzsitjvdxnj20hw04eweh.jpg" alt="image"><br>登录成功 转跳成功页面<br><img src="https://wx4.sinaimg.cn/large/e0e01e43gy1fzsiufh2cqj20cj04nmx5.jpg" alt="image"><br>清除浏览器cookie之后（未登录状态），打开<code>http://localhost:8080/home</code>页面，自动转跳到了<code>/login</code>登录页面（即没有权限访问），登录账户，再次打开<code>http://localhost:8080/home</code>页面即可正常访问。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我学习Shiro时候根据自己的情况记录下来的，希望对大家有所帮助，如果大家想对Shiro进一步研究的话，推荐大家看张开涛老师的<a href="https://jinnianshilongnian.iteye.com/blog/2018936" target="_blank" rel="noopener">《跟我学Shiro》</a>，最后附上本项目的Github地址：<a href="https://github.com/xue8/Java-Demo/tree/master/shiro" target="_blank" rel="noopener">https://github.com/xue8/Java-Demo/tree/master/shiro</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fzsdwjowogj21rf0p0tc4.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Apache Shiro 是Java的&lt;strong&gt;安全框架&lt;/strong&gt;，提供了认证（Authentication）、授权（Authorization）、会话（Session）管理、加密（Cryptography）等功能，且Shiro与Spring Security等安全框架相比具有简单性、灵活性、支持细粒度鉴权、支持一级缓存等，&lt;strong&gt;还有Shiro不跟任何容器（Tomcat等）和框架（Sping等）捆绑，可以独立运行，这也造就了Shiro不仅仅是可以用在Java EE上还可以用在Java SE上&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="http://ddnd.cn/categories/Shiro/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
      <category term="Spring MVC" scheme="http://ddnd.cn/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Shiro身份验证抛出AuthenticationException异常，解决方案</title>
    <link href="http://ddnd.cn/2019/02/01/shiro-password-char-authenticationexception/"/>
    <id>http://ddnd.cn/2019/02/01/shiro-password-char-authenticationexception/</id>
    <published>2019-02-01T13:43:35.000Z</published>
    <updated>2019-02-01T14:43:21.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://wx4.sinaimg.cn/large/e0e01e43gy1fzrauea0ruj20zy0ije81.jpg" alt="image" width="100%"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在学习Shiro的时候，遇到Shiro抛出<code>org.apache.shiro.authc.AuthenticationException</code>异常，完整异常如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.shiro.authc.AuthenticationException: Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - xue8, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).</span><br></pre></td></tr></table></figure></p><p>出现这个异常的原因是因为身份验证出错了，但是我觉得我写的Realm应该没什么错误，最后折腾了一会，翻看了一下Shiro的一些源码，终于知道出现这个问题的原因了，于是想将过程记录下来。</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我在<code>Realm</code>的身份证验证方法<code>doGetAuthenticationInfo</code>添加断点进行调试<br><img src="https://wx2.sinaimg.cn/large/e0e01e43gy1fzr9zjkpi0j21570kx780.jpg" alt="image"><br>发现是从<code>authenticationToken</code>获取用户<strong>密码</strong><code>getCredentials()</code>的时候出问题了，这就奇怪了，获取<strong>用户名</strong><code>getPrincipal()</code>的时候没问题，而且通过查看<code>authenticationToken</code>的源码，发现他们两个是一样的东西<br><img src="https://ws2.sinaimg.cn/large/e0e01e43gy1fzra4sam76j20pf058t91.jpg" alt="image"><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fzra5254joj20k5080aai.jpg" alt="image"><br>用户名和密码传给<code>doGetAuthenticationInfo</code>的时候都是成功的，那为什么会出错呢？在调试<code>doGetAuthenticationInfo</code>的时候，发现了username和password的储存方式不一样<br><img src="https://wx2.sinaimg.cn/large/e0e01e43gy1fzra90e7cyj20t606rt97.jpg" alt="image"><br>username是以字符串String的类型储存的，而password是以字符数组char[]类型储存的，那会不会是因为这个问题造成的呢，而且在<code>subject.login(token)</code>方法中，用户名和密码都是以字符串String储存在token中的，<br><img src="https://wx3.sinaimg.cn/large/e0e01e43gy1fzrad1250gj21150cdq4g.jpg" alt="image"><br>为什么到了<code>doGetAuthenticationInfo</code>就变了呢，于是我继续查看了<code>UsernamePasswordToken</code>的源码，会不会是因为这个对象将密码的字符串类型转成char[]类型呢<br><img src="https://wx1.sinaimg.cn/large/e0e01e43gy1fzrafmoin6j215j040gm6.jpg" alt="image"><br>通过查看源码，看到了确实是<code>UsernamePasswordToken</code>将传入的密码password从String字符串类型转成了char[]字符数组类型，到这里我也就明白了，在<code>Realm</code>的<code>doGetAuthenticationInfo</code>方法中，传入的<code>AuthenticationToken authenticationToken</code>用户名是以String方式储存的而密码是以Char[]储存的，用接收String的方式去接收Char[]类型数据肯定就不行了呢，所以我将密码改成用Char[]接收，如下<br><img src="https://wx3.sinaimg.cn/large/e0e01e43gy1fzralszlo4j214w0ermzw.jpg" alt="image"></p><p>即可解决问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://wx4.sinaimg.cn/large/e0e01e43gy1fzrauea0ruj20zy0ije81.jpg&quot; alt=&quot;image&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在学习Shiro的时候，遇到Shiro抛出&lt;code&gt;org.apache.shiro.authc.AuthenticationException&lt;/code&gt;异常，完整异常如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.apache.shiro.authc.AuthenticationException: Authentication failed for token submission [org.apache.shiro.authc.UsernamePasswordToken - xue8, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;出现这个异常的原因是因为身份验证出错了，但是我觉得我写的Realm应该没什么错误，最后折腾了一会，翻看了一下Shiro的一些源码，终于知道出现这个问题的原因了，于是想将过程记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Shiro" scheme="http://ddnd.cn/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="http://ddnd.cn/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Shiro抛出异常UnavailableSecurityManagerException</title>
    <link href="http://ddnd.cn/2019/02/01/shiro-unavailablesecuritymanagerexception/"/>
    <id>http://ddnd.cn/2019/02/01/shiro-unavailablesecuritymanagerexception/</id>
    <published>2019-02-01T11:20:05.000Z</published>
    <updated>2019-02-01T11:28:32.293Z</updated>
    
    <content type="html"><![CDATA[<p>Shiro报错<code>org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the org.apache.shiro.util.ThreadContext or as a vm static singleton.  This is an invalid application configuration.</code>。<br>解决方法，修改<code>web.xml</code>的filter，将<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>改成<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">&lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">&lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Shiro报错&lt;code&gt;org.apache.shiro.UnavailableSecurityManagerException: No SecurityManager accessible to the calling code, either bound to the
      
    
    </summary>
    
      <category term="Shiro" scheme="http://ddnd.cn/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="http://ddnd.cn/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Tomcat+WebSocket教程 附源码</title>
    <link href="http://ddnd.cn/2019/01/19/spring-websocket/"/>
    <id>http://ddnd.cn/2019/01/19/spring-websocket/</id>
    <published>2019-01-19T11:53:29.000Z</published>
    <updated>2019-02-01T14:44:05.275Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fzc67i7oooj30b404cgll.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们知道<code>HTTP</code>协议是无状态、无连接的，采用的是请求/响应模式，通信请求只能由客户端发起，服务器响应。这种请求/响应模式在客户端服务器需要持续的交互时候就显得很鸡肋，在HMTL5出来之前，要实现客户端服务器持续交互大多数都是通过AJAX轮询，但是轮询效率低，浪费带宽和服务器资源。因此WebSocket就发明出来了，WebSocket是HTML5提供的一种在单个TCP连接上进行全双工通信的协议。接下来我运用Spring和WebSocket实现一个简单的聊天功能，希望能对大家有帮助。</p><a id="more"></a><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://ws3.sinaimg.cn/large/e0e01e43gy1fzcz2qqu1oj20c10ojabh.jpg" alt="image"></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;groupId&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;nChat&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--Sping核心依赖--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-test --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--Mybatis依赖--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-messaging&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-websocket --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--MySQL连接驱动--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.0.1&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="WebSocket实现"><a href="#WebSocket实现" class="headerlink" title="WebSocket实现"></a>WebSocket实现</h1><p>Java实现WebSocket的方式很多，不同厂商实现WebSocket的方式大径相同。</p><h2 id="Spring实现WebSocket"><a href="#Spring实现WebSocket" class="headerlink" title="Spring实现WebSocket"></a>Spring实现WebSocket</h2><p>Spring实现WebSocket，需要先添加Spring的对WebSocket支持的依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-messaging --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-messaging&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-websocket --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-websocket&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.2.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>在Java中导入Spring WebSocket的包<code>import org.springframework.web.socket.*;</code>，Spring实现WebSocket需要编写以下几项。</p><ol><li>配置WebSocket<br>配置WebSocket的方式有2中，一种是编写配置类，另一种是编写配置文件（XML文件），配置WebSocket的作用是将WebSocket处理器、拦截器添加到注册中心，这里我使用的是配置类来配置。<br>WebSocketConfig.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.websocket;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line">import org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line">import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableWebMvc</span><br><span class="line">@EnableWebSocket</span><br><span class="line">public class WebSocketConfig implements WebSocketConfigurer &#123;</span><br><span class="line">    public void registerWebSocketHandlers(WebSocketHandlerRegistry webSocketHandlerRegistry) &#123;</span><br><span class="line">        //这个网址是用于websocket连接的建立 通信用的</span><br><span class="line">        webSocketHandlerRegistry</span><br><span class="line">                .addHandler(new WebSocketHandler(), &quot;/ws/socketServer&quot;)</span><br><span class="line">                .addInterceptors(new WebSocketInterceptor())</span><br><span class="line">                .setAllowedOrigins(&quot;*&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>三个注解的作用如下</p><ul><li>@Configuration注解：声明这个类为配置类（相当于web.xml配置文件中的<beans>）配置Spring容器应用上下文，即项目启动的时候会加载这个配置类。</beans></li><li>@EnableWebMvc注解：开启Spring MVC，不加这个的话，在Controller的RequestMapping就失效，我也不知道为啥。</li><li>@EnableWebSocket注解：开启WebSocket服务。<br><code>registerWebSocketHandlers</code>方法配置WebSocket入口、允许访问的域，注册WebSocket处理器、拦截器等，当请求访问<code>/ws/socketServer</code>的时候，就会建立起WebSocket连接。</li></ul><ol start="2"><li>编写处理器<br>WebSocketHandler.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.websocket;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.web.socket.*;</span><br><span class="line">import org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class WebSocketHandler extends TextWebSocketHandler &#123;</span><br><span class="line"></span><br><span class="line">    public static final Map&lt;Integer,WebSocketSession&gt; USER_SOCKET_SESSION_MAP;</span><br><span class="line">    static&#123;</span><br><span class="line">            USER_SOCKET_SESSION_MAP = new HashMap&lt;Integer, WebSocketSession&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionEstablished(WebSocketSession session) throws Exception &#123;</span><br><span class="line">        int uid = Integer.parseInt(session.getAttributes().get(&quot;WEBSOCKET_UID&quot;).toString());</span><br><span class="line">        //如果是新的用户连接 则将session保存在USER_SOCKET_SESSION_MAP中</span><br><span class="line">        if (USER_SOCKET_SESSION_MAP.get(uid) == null || !USER_SOCKET_SESSION_MAP.get(uid).isOpen()) &#123;</span><br><span class="line">            USER_SOCKET_SESSION_MAP.put(uid, session);</span><br><span class="line">        &#125;</span><br><span class="line">        super.afterConnectionEstablished(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleMessage(WebSocketSession session, WebSocketMessage&lt;?&gt; message) throws Exception &#123;</span><br><span class="line">        super.handleMessage(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception &#123;</span><br><span class="line">        super.handleTextMessage(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void handlePongMessage(WebSocketSession session, PongMessage message) throws Exception &#123;</span><br><span class="line">        super.handlePongMessage(session, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception &#123;</span><br><span class="line">        super.handleTransportError(session, exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception &#123;</span><br><span class="line">        super.afterConnectionClosed(session, status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean supportsPartialMessages() &#123;</span><br><span class="line">        return super.supportsPartialMessages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @description: 给指定用户发送信息</span><br><span class="line">     * @param: [uid, message]</span><br><span class="line">     * @return: void</span><br><span class="line">     * @author: Xue 8</span><br><span class="line">     * @date: 2019/1/19</span><br><span class="line">     */</span><br><span class="line">    public void sendMessageToUser(int uid, TextMessage message)&#123;</span><br><span class="line">        WebSocketSession session = USER_SOCKET_SESSION_MAP.get(uid);</span><br><span class="line">        if (session != null &amp;&amp; session.isOpen()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                session.sendMessage(message);</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>WebSocket处理器继承<code>TextWebSocketHandler</code>（或<code>BinaryWebSocketHandler</code>），在这里重写相应的方法和编写自己的业务代码，Spring在收到WebSocket事件时，就会调用相事件相应的方法，这里我自定义了一个发送信息给指定用户的方法<code>sendMessageToUser</code>。<code>WebSocketSession</code>是WebSocket的抽象，WebSocketSession就像是连接服务器和客户端之间的一条专属通道，一个WebSocketSession对应一个用户，WebSocket的操作都是基于这个WebSocketSession进行的。</p><ol start="3"><li>编写拦截器<br>WebSocketInterceptor.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.websocket;</span><br><span class="line"></span><br><span class="line">import org.springframework.http.server.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.ServerHttpResponse;</span><br><span class="line">import org.springframework.http.server.ServletServerHttpRequest;</span><br><span class="line">import org.springframework.web.socket.WebSocketHandler;</span><br><span class="line">import org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class WebSocketInterceptor extends HttpSessionHandshakeInterceptor &#123;</span><br><span class="line">    public WebSocketInterceptor() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public WebSocketInterceptor(Collection&lt;String&gt; attributeNames) &#123;</span><br><span class="line">        super(attributeNames);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Collection&lt;String&gt; getAttributeNames() &#123;</span><br><span class="line">        return super.getAttributeNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setCopyAllAttributes(boolean copyAllAttributes) &#123;</span><br><span class="line">        super.setCopyAllAttributes(copyAllAttributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCopyAllAttributes() &#123;</span><br><span class="line">        return super.isCopyAllAttributes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setCopyHttpSessionId(boolean copyHttpSessionId) &#123;</span><br><span class="line">        super.setCopyHttpSessionId(copyHttpSessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCopyHttpSessionId() &#123;</span><br><span class="line">        return super.isCopyHttpSessionId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setCreateSession(boolean createSession) &#123;</span><br><span class="line">        super.setCreateSession(createSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean isCreateSession() &#123;</span><br><span class="line">        return super.isCreateSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean beforeHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes) throws Exception &#123;</span><br><span class="line">        ServletServerHttpRequest servletServerHttpRequest = (ServletServerHttpRequest) request;</span><br><span class="line">        int uid = Integer.parseInt(servletServerHttpRequest.getServletRequest().getParameter(&quot;uid&quot;));</span><br><span class="line">        System.out.println(&quot;coming &quot; + uid);</span><br><span class="line">        if (uid != 0) &#123;</span><br><span class="line">            //在这里拦截请求 在捂手前将uid保存到WebSocketSession中 让处理器WebSocketHandler根据这个uid进行操作</span><br><span class="line">            attributes.put(&quot;WEBSOCKET_UID&quot;, uid);</span><br><span class="line">        &#125;</span><br><span class="line">        return super.beforeHandshake(request, response, wsHandler, attributes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterHandshake(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception ex) &#123;</span><br><span class="line">        System.out.println(&quot;out&quot;);</span><br><span class="line">        super.afterHandshake(request, response, wsHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>WebSocket拦截器继承<code>HttpSessionHandshakeInterceptor</code>，在握手前后对请求进行拦截，在握手前将请求拦截，也就是当请求访问<code>/ws/socketServer</code>的时候，会对请求拦截，可以获取到请求中的URL参数、请求头、协议等信息，然后将这些信息保存在WebSocketSession中，将用户和WebSocketSession关联起来。</p><ol start="4"><li>编写Spring MVC控制器<br>IndexController.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.controller;</span><br><span class="line"></span><br><span class="line">import com.nChat.websocket.WebSocketHandler;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.socket.TextMessage;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    WebSocketHandler webSocketHandler;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/send&quot;)</span><br><span class="line">    public String send(HttpServletRequest request,</span><br><span class="line">                        HttpServletResponse response)&#123;</span><br><span class="line">        return &quot;send&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/doSend&quot;)</span><br><span class="line">    public String doSend(HttpServletRequest request,</span><br><span class="line">                       HttpServletResponse response,</span><br><span class="line">                       @RequestParam(value = &quot;uid&quot;) int uid,</span><br><span class="line">                       @RequestParam(value = &quot;messages&quot;) String messages)&#123;</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession(true);</span><br><span class="line">        session.setAttribute(&quot;SESSION_USERNAME&quot;, uid);</span><br><span class="line">        webSocketHandler.sendMessageToUser(uid,new TextMessage(messages));</span><br><span class="line">        return &quot;send&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/register&quot;)</span><br><span class="line">    public String register(HttpServletRequest request,</span><br><span class="line">                        HttpServletResponse response)&#123;</span><br><span class="line"></span><br><span class="line">        return &quot;register&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意这里的<code>@RequestMapping</code>和WebSocket配置类中的<code>/ws/socketServer</code>区别，配置类中的<code>/ws/socketServer</code>是用于客户端和服务器建立WebSocket连接用的，而Controller的<code>@RequestMapping</code>是用于处理客户端请求用的。</p><ol start="4"><li>编写前端 测试WebSocket的建立和发信息<br>用于新建WebSocket连接，其中用UID来表示WebSocket连接<br>register.jsp<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;</span><br><span class="line">         pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;register&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.bootcss.com/sockjs-client/1.1.1/sockjs.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/reconnecting-websocket/1.0.0/reconnecting-websocket.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var websocket = null;</span><br><span class="line">    function createWebSocket() &#123;</span><br><span class="line">        if (&apos;WebSocket&apos; in window) &#123;</span><br><span class="line">            websocket = new WebSocket(&quot;ws://localhost:8080/ws/socketServer?uid=&quot; + $(&quot;#uid&quot;).val());</span><br><span class="line">            console.log($(&quot;#uid&quot;).val())</span><br><span class="line">        &#125;</span><br><span class="line">        else if (&apos;MozWebSocket&apos; in window) &#123;</span><br><span class="line">            websocket = new MozWebSocket(&quot;ws://localhost:8080/ws/socketServer?uid=&quot; + $(&quot;#uid&quot;).val());</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            websocket = new SockJS(&quot;http://localhost:8080/ws/socketServer?uid=&quot; + $(&quot;#uid&quot;).val());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        websocket.onopen = onOpen;</span><br><span class="line">        websocket.onmessage = onMessage;</span><br><span class="line">        websocket.onerror = onError;</span><br><span class="line">        websocket.onclose = onClose;</span><br><span class="line"></span><br><span class="line">        function onOpen(openEvt) &#123;</span><br><span class="line">            //alert(openEvt.Data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function onMessage(evt) &#123;</span><br><span class="line">            alert(evt.data);</span><br><span class="line">        &#125;</span><br><span class="line">        function onError() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        function onClose() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        window.close=function()</span><br><span class="line">        &#123;</span><br><span class="line">            websocket.onclose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">请输入UID：&lt;input rows=&quot;5&quot; cols=&quot;10&quot; id=&quot;uid&quot; name=&quot;uid&quot;&gt;&lt;/input&gt;</span><br><span class="line">&lt;button onclick=&quot;createWebSocket();&quot;&gt;建立WS连接&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><p>用于发信息的页面，根据UID进行信息的发送<br>send.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;</span><br><span class="line">         pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;send messages&lt;/h2&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;/doSend&quot;&gt;</span><br><span class="line">  发送给谁：&lt;input type=&quot;text&quot; name=&quot;uid&quot;/&gt;</span><br><span class="line">  发送什么信息：&lt;input type=&quot;text&quot; name=&quot;messages&quot;/&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;发送&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>运行测试<br>分别建立UID为1、2的WebSocket连接。<br><img src="https://wx1.sinaimg.cn/large/e0e01e43gy1fzd4b56oarj20qd0773yt.jpg" alt="image"><br><img src="https://ws3.sinaimg.cn/large/e0e01e43gy1fzd4b56oarj20qd0773yt.jpg" alt="image"></li></ol><p>给UID为1的WebSocket发送信息<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fzd4dc1dkcj20r007j0t9.jpg" alt="image"><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fzd4djtrshj211y0bpjs1.jpg" alt="image"></p><p>给UID为2的WebSocket发送信息<br><img src="https://ws2.sinaimg.cn/large/e0e01e43gy1fzd4ebmmt7j20se098aan.jpg" alt="image"><br><img src="https://wx1.sinaimg.cn/large/e0e01e43gy1fzd4egz9i7j210509vgmb.jpg" alt="image"></p><h2 id="Tomcat实现WebSocket"><a href="#Tomcat实现WebSocket" class="headerlink" title="Tomcat实现WebSocket"></a>Tomcat实现WebSocket</h2><p>使用Tomcat实现WebSocket没有像Spring实现WebSocket那样繁琐，只需要编写一个处理器即可。<br>首先添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.websocket&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>然后编写处理类即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.nChat;</span><br><span class="line">  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">import java.util.concurrent.ConcurrentHashMap;  </span><br><span class="line">import javax.websocket.*;  </span><br><span class="line">import javax.websocket.server.PathParam;  </span><br><span class="line">import javax.websocket.server.ServerEndpoint;  </span><br><span class="line">import net.sf.json.JSONObject;  </span><br><span class="line">  </span><br><span class="line">@ServerEndpoint(&quot;/websocket/&#123;username&#125;&quot;)  </span><br><span class="line">public class WebSocket &#123;  </span><br><span class="line">  </span><br><span class="line">    private static int onlineCount = 0;  </span><br><span class="line">    private static Map&lt;String, WebSocket&gt; clients = new ConcurrentHashMap&lt;String, WebSocket&gt;();  </span><br><span class="line">    private Session session;  </span><br><span class="line">    private String username;  </span><br><span class="line">      </span><br><span class="line">    @OnOpen  </span><br><span class="line">    public void onOpen(@PathParam(&quot;username&quot;) String username, Session session) throws IOException &#123;  </span><br><span class="line">  </span><br><span class="line">        this.username = username;  </span><br><span class="line">        this.session = session;  </span><br><span class="line">          </span><br><span class="line">        addOnlineCount();  </span><br><span class="line">        clients.put(username, this);  </span><br><span class="line">        System.out.println(&quot;已连接&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @OnClose  </span><br><span class="line">    public void onClose() throws IOException &#123;  </span><br><span class="line">        clients.remove(username);  </span><br><span class="line">        subOnlineCount();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @OnMessage  </span><br><span class="line">    public void onMessage(String message) throws IOException &#123;  </span><br><span class="line">  </span><br><span class="line">        JSONObject jsonTo = JSONObject.fromObject(message);  </span><br><span class="line">          </span><br><span class="line">        if (!jsonTo.get(&quot;To&quot;).equals(&quot;All&quot;))&#123;  </span><br><span class="line">            sendMessageTo(&quot;给一个人&quot;, jsonTo.get(&quot;To&quot;).toString());  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            sendMessageAll(&quot;给所有人&quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    @OnError  </span><br><span class="line">    public void onError(Session session, Throwable error) &#123;  </span><br><span class="line">        error.printStackTrace();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public void sendMessageTo(String message, String To) throws IOException &#123;  </span><br><span class="line">        // session.getBasicRemote().sendText(message);  </span><br><span class="line">        //session.getAsyncRemote().sendText(message);  </span><br><span class="line">        for (WebSocket item : clients.values()) &#123;  </span><br><span class="line">            if (item.username.equals(To) )  </span><br><span class="line">                item.session.getAsyncRemote().sendText(message);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    public void sendMessageAll(String message) throws IOException &#123;  </span><br><span class="line">        for (WebSocket item : clients.values()) &#123;  </span><br><span class="line">            item.session.getAsyncRemote().sendText(message);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  </span><br><span class="line">    public static synchronized int getOnlineCount() &#123;  </span><br><span class="line">        return onlineCount;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static synchronized void addOnlineCount() &#123;  </span><br><span class="line">        WebSocket.onlineCount++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static synchronized void subOnlineCount() &#123;  </span><br><span class="line">        WebSocket.onlineCount--;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public static synchronized Map&lt;String, WebSocket&gt; getClients() &#123;  </span><br><span class="line">        return clients;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Jetty实现WebSocket"><a href="#Jetty实现WebSocket" class="headerlink" title="Jetty实现WebSocket"></a>Jetty实现WebSocket</h2><p>这个好像不常见…这里就不演示如何配置了，有兴趣可以网上搜相关文章。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>WebSocket是HTML5提供的一种在单个TCP连接进行的全双工通讯协议，不用的厂商都可以根据WebSocket API去实现自己的WebSocket框架，比如Spring的WebSocket、Tomcat的WebSocket，我觉得WebSocket和Spring的WebSocket、Tomcat的WebSocket的关系就像JPA和hibernate、Mybatis的关系一样，WebSocket和JPA都是定义了标准，而由各个厂商根据这个标准去实现自己的框架。</p><p>完整源代码：<a href="https://github.com/xue8/Java-Demo/tree/master/nChat" target="_blank" rel="noopener">https://github.com/xue8/Java-Demo/tree/master/nChat</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/mw690/0060lm7Tly1fzc67i7oooj30b404cgll.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们知道&lt;code&gt;HTTP&lt;/code&gt;协议是无状态、无连接的，采用的是请求/响应模式，通信请求只能由客户端发起，服务器响应。这种请求/响应模式在客户端服务器需要持续的交互时候就显得很鸡肋，在HMTL5出来之前，要实现客户端服务器持续交互大多数都是通过AJAX轮询，但是轮询效率低，浪费带宽和服务器资源。因此WebSocket就发明出来了，WebSocket是HTML5提供的一种在单个TCP连接上进行全双工通信的协议。接下来我运用Spring和WebSocket实现一个简单的聊天功能，希望能对大家有帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="WebSocket" scheme="http://ddnd.cn/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>我是如何一步步解决问题 让Spring MVC返回HTML类型的视图</title>
    <link href="http://ddnd.cn/2018/12/25/springmvc-view-webxml/"/>
    <id>http://ddnd.cn/2018/12/25/springmvc-view-webxml/</id>
    <published>2018-12-25T10:09:29.000Z</published>
    <updated>2018-12-26T14:33:04.092Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi08g83uwj20jd05hmxe.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在折腾SSM，在捣鼓<code>Spring MVC</code>的时候，我想让Spring MVC的前端控制器（<code>DispatcherServlet</code>）给用户返回的是HTML类型的视图而不是JSP类型的视图，于是我按照常规的思路，把<code>Spring MVC</code>配置文件里面的视图解析器配置修改成HTML后缀的，然后就遇上了各种问题了……当然这些问题也都是我对Spring MVC不够了解才导致的，接下来详细说一下我遇到的问题以及解决过程。</p><a id="more"></a><h1 id="遇上问题"><a href="#遇上问题" class="headerlink" title="遇上问题"></a>遇上问题</h1><p>为了将返回给用户的视图从<code>JSP</code>改成<code>HTML</code>嘛，我就寻思着不就是把<code>Spring MVC</code>配置文件的视图配置改一下，把<code>.jsp</code>改成<code>.html</code>嘛。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi32ct15hj20ug06qdgc.jpg" alt=""></p><p>原来返回JSP的配置 Spring-MVC.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>因为我的JSP文件就是放在<code>web</code>根目录下，所以这里<code>prefix</code>就留空了。</p><p>修改成返回HTML的配置 Spring-MVC.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.html&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>然后写<code>Controller</code>将视图返回给前端控制器<code>DispatchServlet</code>看看能不能将HTML类型的视图返回给用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">    public String login()&#123;</span><br><span class="line">        return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>emmmm配置文件修改好了，按照我的想法，运行肯定没“问题”吧，可现实总是打我脸…可能是我太年轻了吧，运行之后报错，页面显示404<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">24-Dec-2018 21:57:35.769 警告 [http-nio-8080-exec-3] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:35.778 警告 [http-nio-8080-exec-2] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:35.854 警告 [http-nio-8080-exec-1] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:38.542 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</span><br></pre></td></tr></table></figure></p><p>错误的意思大概是前端控制器<code>DispatchServlet</code>找不到<strong>请求</strong>相对应的<code>mapping</code>，所以抛出<code>noHandlerFound</code>的异常<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi704yuqaj20h807kq2w.jpg" alt=""></p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>我们来分析看看为啥出现这个问题，首先贴出我们前端控制器<code>DispatchServlet</code>的工作流程先<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi7aoqiz7j20w70mbdk1.jpg" alt=""><br>流程用文字说明大概如下：</p><ol><li>用户发送请求，被 SpringMVC 的<strong>前端控制器</strong><code>DispatcherServlet</code> 拦截。</li><li>DispatcherServlet 收到请求后自己不进行处理，而是将请求转发给<strong>处理器映射器</strong><code>HandlerMapping</code>。</li><li><strong>处理器映射器</strong>根据请求的URL确定映射关系找出相应的<strong>处理器适配器</strong>，并且返回HandlerExecutionChain对象给前端控制器。<br>处理器映射器找到具体的<strong>处理器适配器</strong>，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li><li>DispatcherServlet根据3返回的<code>HandlerExecutionChain</code> 调用相应的<strong>处理器适配器</strong><code>HandlerAdapter</code>。</li><li>经过<strong>处理器适配器</strong><code>HandlerAdapter</code>调用具体的处理器（<code>Controller</code>，也叫后端控制器）。</li><li>Controller将结果封装到ModelAndView返回给HandlerAdapter。</li><li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给<strong>视图解析器</strong><code>ViewReslover</code>,查询到相应的视图View。</li><li>ViewReslover解析后返回具体的View。</li><li>DispatcherServlet把Model交给View进行渲染（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol><p>看完整个流程是不是知道问题出在哪了？？<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</code>这个报错是出在了流程的第<code>3</code>步中，也就是<code>DispatchServlet</code>将请求转发给<code>HandlerMapping</code>后，<code>HandlerMapping</code>根据用户的请求<strong>找不到相应处理器映射器</strong>，所以就报了这个错误。那造成这个问题的原因会不会是我们没定义相应的<code>Controller</code>,导致也没有相应的处理器适配器，但是我们的<code>Controller</code>确实已经写好了，而且用返回JSP类型视图的代码测试数是正常的，没任何问题。</p><p>那我们一步步排错，我们在<code>Controller</code>中打印输出个字符，判断看看请求有没有进<code>Controller</code>先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">public String login()&#123;</span><br><span class="line">    System.out.println(&quot;coming&quot;);</span><br><span class="line">    return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单粗暴，添加个<code>System.out.println(&quot;coming&quot;);</code>如果请求进来了我们就可以看到打印<code>coming</code>的内容，我们再重新运行项目测试看看<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi8trsxpcj218b08175h.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coming</span><br><span class="line">24-Dec-2018 23:07:38.974 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</span><br></pre></td></tr></table></figure></p><p>我们可以看到确实进来了，既然进来了，也就是说<strong>用户的请求</strong>至少已经执行到第<code>5</code>步了，那和前面说错误出现在第<code>3</code>步不是矛盾了吗？？莫急，继续往下分析，既然肯定用户的请求前<code>5</code>步都没问题的，那打印完<code>coming</code>后为什么又出现了本该出现在第<code>2</code>的错误呢？<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</code>，莫不是从第<code>5</code>步又跳到第<code>2</code>步了？</p><p>为了继续排查下去，我们继续添加个<code>Controller</code>对应<code>register.html</code>,看看他还报错不<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">    public String login()&#123;</span><br><span class="line">        System.out.println(&quot;coming&quot;);</span><br><span class="line">        return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/register.html&quot;)</span><br><span class="line">    public String  aa()&#123;</span><br><span class="line">        System.out.println(&quot;coming aa&quot;);</span><br><span class="line">        return &quot;/aa&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新启动项目运行看看，输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">coming</span><br><span class="line">coming aa</span><br><span class="line">24-Dec-2018 23:29:00.759 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /aa.html</span><br></pre></td></tr></table></figure></p><p>输出表明既进到了<code>/login</code>又进到了<code>/register.html</code>,然而还是继续报错<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /aa.html</code>，一样的错误但是造成的错误原因不一样，上面的错误是因为找不到<code>/register.html</code>相应的mapping，然后我们把<code>/register.html</code>的Controller加上并且返回<code>/aa.html</code>，所以导致了这次错误找不到<code>/aa.html</code>相应的mapping。<br>看到这里是不是有点头绪了？我们在<code>Controller</code>返回<code>ModelAndView</code>给<code>HandlerAdapter</code>，<code>HandlerAdapter</code>再把<code>ModelAndView</code>返回给<code>DispatchServlet</code>，然后<code>DispatchServlet</code>再把<code>ModelAndView</code>传给视图解析器<code>ViewReslover</code>解析，也就是图中对应的第<code>6</code>到第<code>8</code>步，到这里之前都是没问题的，问题就出现在了第<code>9</code>步身上了，<code>ViewReslover</code>返回的视图名给<code>DispatchServlet</code>，<strong>重点来了!!!! <code>DispatchServlet</code>又把这个视图名当做一个新的请求，去交给<code>HandlerMapping</code>处理！！也就是图中的第<code>2</code>步，然后无限死循环下去……</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyixffzt07j216q0h1n3z.jpg" alt=""></p><h1 id="遇上新问题"><a href="#遇上新问题" class="headerlink" title="遇上新问题"></a>遇上新问题</h1><p>那问题又来了，为什么<code>DispatchServlet</code>会把它当成一个新的请求去处理呢？是不是我们Servlet配置的匹配规则写的不对，把返回的视图也拦截上了？我们来看看我们的Servlet配置<br><strong>项目的web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;Spring-MVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:*.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;Spring-MVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>匹配规则我写的是<code>/</code>，网上的很多文章也都说匹配规则<code>/</code>是不会拦截<code>.jsp、html</code>等格式的URL的，只会拦截<code>/login</code>这样的，而<code>/*</code>的匹配规则才会拦截所有请求包括<code>/login、.jsp、html</code>等，<strong>实践证明网上的这些观点都是错误的！</strong> 在这里我要更正一下，匹配规则<code>/</code>和<code>/*</code>都是会拦截所有请求（包括/login、.jsp、.html、.css等）也就是说他们俩的作用是一样的，既然说<code>.jsp、.html</code>都会拦截那为什么配置<code>/</code>规则的时候.jsp的能正常而.html的却被再次拦截导致死循环和配置<code>/*</code>不管是.jsp还是.html都再次被拦截从而进入死循环？</p><h1 id="拨开云雾见月明"><a href="#拨开云雾见月明" class="headerlink" title="拨开云雾见月明"></a>拨开云雾见月明</h1><p>既然配置<code>/</code>和<code>/*</code>的作用一样，为啥结果不一样呢？玄机就在<code>Tomcat</code>上，在<code>Tomcat</code>的<code>conf/</code>目录下，有个<code>web.xml</code>的文件。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj0235488j20nd0bugn2.jpg" alt=""><br>这个<code>web.xml</code>在Tomcat启动的时候就被加载进来，对所有webapp都有效，至于Tomcat下的web.xml和我们自己项目下的web.xml的区别和联系请自行到<strong>参考文章</strong>查看。这里我们详细分析一下Tomcat下的web.xml里面有啥，打开<code>conf/web.xml</code>看到他里面定义了个<strong>拦截<code>.jsp</code>和<code>.jspx</code>的Servlet</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj05hxdj0j20ud0irtak.jpg" alt=""><br><strong>Tomcat的conf/web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mappings for the JSP servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这个拦截规则也就是把所有的<code>.jsp</code>、<code>.jspx</code> URL请求都拦截在<code>servlet-name</code>为jsp的servlet中，我们搜索<code>&lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</code>查找一下servlet使用的类<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj09y1f5dj210x0hhdhy.jpg" alt=""><br><strong>Tomcat的conf/web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;fork&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到这个拦截<code>.jsp</code>、<code>.jspx</code>的servlet使用的类是<code>org.apache.jasper.servlet.JspServlet</code>，也就是使用的类和我们项目下web.xml的servlet使用的<code>org.springframework.web.servlet.DispatcherServlet</code>类不一样，使用的类不一样也导致<code>.jsp</code>、<code>.jspx</code>的URL请求都不会走上图中DispatchServlet的流程，而是走它使用的类的具体流程，想了解的可以查询这个类的相关资料。到这里我们可以明确一点的就是我们项目下web.xml的servlet规则定义成<code>/</code>或者<code>/*</code>的时候<code>.jsp</code>正常来说应该是会被我们的项目下web.xml的servlet拦截的，但是根据servlet-mapping的匹配规则，<code>.jsp</code>、<code>.jspx</code>的URL都会先被Tomcat下web.xml里面的servlet拦截，而导致<code>.jsp</code>、<code>.jspx</code>不会被我们项目的web.xml里面的servlet拦截。<strong>这也就是为什么匹配规则写成<code>/</code>的时候<code>.jsp</code>会被忽略不进行拦截的原因，</strong>那问题又来了匹配规则写成<code>/*</code>的时候<code>.jsp</code>没有被忽略仍然进行拦截的呢？原因是规则<code>/*</code>会覆盖所有默认的servlet，从而将所有请求都拦截了下来<strong>，接下来我们可以修改Tomcat的web.xml下的servlet配置，让项目的web.xml下的servlet配置规则为<code>/</code>时候也支持返回<code>html</code>类型的视图</strong>Tomcat的conf/web.xml**<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mappings for the JSP servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>添加个规则<code>&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</code>，即URL是.html类型的话就走Tomcat的<code>&lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</code>这个servlet而不走我们项目的servlet，然后重新运行项目测试一下<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1k2ti1cj20fl0apmxp.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1l076vrj20u904uaae.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1ktek6vj20np08oq3j.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1llbr8zj20br0ceaah.jpg" alt=""><br>（请忽略乱码问题o(╥﹏╥)o） 看到了吧，确实可以通过<code>Controller</code>返回html类型的视图了吧，也就是在执行完第<code>9</code>步后返回的视图不再是被<code>org.springframework.web.servlet.DispatcherServlet</code>拦截，而是被<code>org.apache.jasper.servlet.JspServlet</code>拦截，从而跳出了<code>DispatchServlet</code>的魔抓不会再死循环了。<br>那以后想要返回.html类型的视图是不是都要去修改Tomcat的web.xml？也不用这样，我们只要在我们的项目web.xml中配置一个<strong>相同名</strong>的servlet即可，它会自动覆盖Tomcat的web.xml的，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这样配，但是会报错<code>Cannot resolve Servlet &#39;jsp&#39;</code>，我也不懂为啥，知道的朋友可以补充下。Tomcat下的web.xml除了有名为<code>jsp</code>的servlet，还有一个大家应该都很熟悉的，就是名为<code>default</code>的servlet，它的作用和<code>jsp</code>的大概一样，大家知道它是拿来配置静态资源的，却很少了解它怎么来的<br><strong>Tomcat的conf/web.xml</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj7w31ct9j20yx0huwgb.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj817fqjej20nd06rmxg.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;listings&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- The mapping for the default servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>我们也可以用它来代替<code>jsp</code>的servlet来达到不拦截.html类型的视图，同样我们在项目的web.xml下配置名为<code>default</code>的servlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这样即可让.html的请求都不会被前端控制器DispatchServlet拦截到。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当然要返回.html类型的视图也不是只有这种方法，也可以通过更换视图解析器，但是我觉得这样没必要，因为<code>InternalResourceViewResolver</code>视图解析器本身就是支持.html的，只是我们没处理正确而已。通过这次出现的问题，引发我了对Spring MVC的进一步了解，也把分析、解决问题的过程记录下，希望能让自己印象更深刻点，也希望能帮助到大家。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/tangwangming/p/8571551.html" target="_blank" rel="noopener">servlet-mapping url-pattern / 和 /*区别</a></p><p><a href="https://blog.csdn.net/yucdsn/article/details/78729912" target="_blank" rel="noopener">Tomcat文件夹下的context.xml和web.xml</a></p><p><a href="https://www.cnblogs.com/tv151579/p/3500880.html" target="_blank" rel="noopener">web.xml中出现<servlet-name>default</servlet-name>是什么意思？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fyi08g83uwj20jd05hmxe.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这两天在折腾SSM，在捣鼓&lt;code&gt;Spring MVC&lt;/code&gt;的时候，我想让Spring MVC的前端控制器（&lt;code&gt;DispatcherServlet&lt;/code&gt;）给用户返回的是HTML类型的视图而不是JSP类型的视图，于是我按照常规的思路，把&lt;code&gt;Spring MVC&lt;/code&gt;配置文件里面的视图解析器配置修改成HTML后缀的，然后就遇上了各种问题了……当然这些问题也都是我对Spring MVC不够了解才导致的，接下来详细说一下我遇到的问题以及解决过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring MVC" scheme="http://ddnd.cn/categories/Spring-MVC/"/>
    
    
      <category term="Spring MVC" scheme="http://ddnd.cn/tags/Spring-MVC/"/>
    
      <category term="web.xml" scheme="http://ddnd.cn/tags/web-xml/"/>
    
      <category term="servlet" scheme="http://ddnd.cn/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>RPC和RESTful API入门篇</title>
    <link href="http://ddnd.cn/2018/12/19/rpc-and-restful/"/>
    <id>http://ddnd.cn/2018/12/19/rpc-and-restful/</id>
    <published>2018-12-19T05:31:55.000Z</published>
    <updated>2018-12-26T14:45:30.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyaudx4yrxj209u03yt8m.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在和同学谈到RPC、RESTful时候发现自己对这两者并不是很理解，于是查阅了网上相关资料加上自己的理解写下本篇文章以加深印象，由于本人水平有限，若对这两者的理解有不妥之处望指出。</p><a id="more"></a><h1 id="什么是REST和RESTful"><a href="#什么是REST和RESTful" class="headerlink" title="什么是REST和RESTful"></a>什么是REST和RESTful</h1><p>在认识RESTful之前，我们先科普一下REST。</p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST即Representational State Transfer的缩写，<strong>是基于HTTP协议之上的一组约束和属性</strong>，翻译过来是<strong>表现层状态转移</strong>。REST是一种<em>设计风格</em>（并非一种标准），描述的是在网络中Client和Server的一种交互形式，目的是便于<strong>不同</strong>的软件/程序在网络中互相传递消息。按照我的理解：<strong><em>我们通过URI定位到服务器上的资源（例如文本、图片、服务），然后对资源进行某种操作（CRUD）并且返回足够的信息描述服务器的状态（比如：状态码）让客户端知道如何处理，资源传递给客户端并且以某种形式表现（比如JSON、HTML、XML、PNG等）出来</em></strong>，而REST则是将URI的命名风格、对资源操作的实现方式、操作之后返回什么信息和资源以哪种形式表现出来等总结成了一种设计风格，让大家都使用这种设计风格去实现这些设计，当然REST的设计风格不止我指出的这几个，只是这几个是要点。<br>REST设计的风格遵循以下几点：<br>1.<strong>利用HTTP方法让接口统一化</strong><br>REST充分利用HTTP自身的GET、POST、PUT、DELETE的方法实现接口的统一化，比如对同一个资源进行CRUD操作时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /posts     获取文章             GET /getPosts       获取文章 </span><br><span class="line">POST /posts    发布文章             GET /addPosts       发布文章 </span><br><span class="line">PUT /posts     修改文章             GET /editPosts      修改文章 </span><br><span class="line">DELETE /posts  删除文章             GET /deletePosts    删除文章</span><br></pre></td></tr></table></figure></p><p>上面的设计中，左边的是符合REST设计风格的，右边的是不符合REST设计风格的。URI只需将资源准确无误的暴露出来就可以，而不需要加上动作词，而动作则体现在HTTP的GET、POST、PUT、DELETE方法中，其中URI还推荐使用复数。<br>2.<strong>利用HTTP状态码返回状态信息</strong><br>下面举例几个HTTP Status Code和表示的什么：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Status Code: 200 OK</span><br><span class="line">Status Code: 400 Bed Request</span><br><span class="line">Status Code: 404 Not Found</span><br><span class="line">Status Code: 500 Internal Server Error</span><br></pre></td></tr></table></figure></p><p>其中2XX的状态码表示请求已成功被服务器已接收、理解、并接受<br>3XX的状态码表示重定向<br>4XX的状态码表示客户端错误<br>5XX的状态码表示服务器错误<br>3.<strong>利用HTTP报头告知对方如何处理本次请求（相应）</strong><br>HTTP报头是描述客户端与服务器之间的请求或者响应应该如何处理本次请求的，比如该用什么表现形式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Authorization 认证报头 </span><br><span class="line">Cache-Control 缓存报头 </span><br><span class="line">Cnotent-Type  消息体类型报头</span><br></pre></td></tr></table></figure></p><p>4.<strong>无状态</strong><br>REST设计风格要求Server无状态，无状<strong>态并不等于</strong>不保存用户的状态，而是指服务器不保存请求状态（会话信息），客户端必须每次都<strong>带上自己的状态</strong>去请求服务器，如果确实要维持用户的状态，也应由客户端负责，例如：在服务端上通过Cookie保存Token，之后的请求中都带上Token，而这个Token就保存有了用户的状态（如登录信息）。这里需要注意的是：</p><ul><li>通过Session保存状态<strong>不是REST设计风格</strong>，因为Session是将状态信息（用户信息、过期时间等）保存在了服务器上，比如用户登录成功后，会将Session信息保存在服务器，然后返回个SessionID给客户端并且将SessionID保存在Cookies中,之后的请求客户端都会通过Cookies传递SessionID给服务器，服务器根据客户端传来的SessionID去匹配之前保存的Session状态信息，所以这个状态是保存在服务器上的，是靠服务器维持的，所以不是REST设计风格。</li><li>通过Token保存状态<strong>是REST设计风格</strong>，因为状态信息（用户信息、过期时间等）都是保存在Token中，而Token又是保存在客户端中（如Cookies），比如用户登录成功后，服务器会返回一个Token（包含了用户信息、过期时间等）给服务端，服务端将Token保存在Cookies中，之后的请求客户端都会取出Token放到Request Headers中传给服务器，服务器验证Token的有效性即可。<blockquote><p>看到这里是不是能理解*<em>状态转移</em>这个词了？就是状态通过客户端来转移。</p></blockquote></li></ul><p>简单的来说就是状态信息保存在服务器的就是<strong>有状态的</strong>，而状态信息保存在客户端的就是<strong>无状态的</strong>。通过REST的无状态原则恰好有利于实现负载均衡，在分布式的Web系统上，有多个可用的服务器，每个服务器都可以处理客户端发来的请求，及时有一台服务器宕机，无状态的请求可以交给别的服务器处理，这是有状态的请求所做不到的。</p><h2 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h2><p>理解完REST那我们就很容易理解RESTful了，RESTful即实现REST设计风格的一种架构，如RESTful API（REST设计风格的API）</p><h1 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h1><p>RPC就是Remote Procedure Call的简称，翻译成中文就是<strong>远程过程调用</strong>，什么是远程过程调用？举个例子：有两台服务器A、B，一个应用部署在A服务器上，另一个应用部署在B服务器上，A服务器上的应用想要调用B服务器上应用所提供的方法、函数，那么这个调用过程就需要网络来支撑，整个调用过程可以用下图表示。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyc1ig0m9tg207c072jr9.jpg" alt=""></p><h2 id="RPC分类"><a href="#RPC分类" class="headerlink" title="RPC分类"></a>RPC分类</h2><p>其中RPC分为两种：</p><ol><li><strong>同步调用</strong><br>在上面举的例子中，A服务器的应用调用B服务器上应用的方法、函数后，A服务器的应用会处在<strong>阻塞状态</strong>，只有等到B服务器上的应用通过网络返回结果后，A服务器的应用才会继续往下执行。</li><li><strong>异步调用</strong><br>在上面举的例子中，A服务器的应用调用B服务器上应用的方法、函数后，A服务器的应用并不会进入阻塞状态等待结果的返回，可以通过回调通知等方式获得返回的结果。</li></ol><h2 id="RPC的网络通信问题"><a href="#RPC的网络通信问题" class="headerlink" title="RPC的网络通信问题"></a>RPC的网络通信问题</h2><p>我们知道在RPC调用的时候需要网络来支撑，那么以何种方式来实现通信呢。</p><ol><li><strong>HTTP协议</strong><br>A服务器的应用可以通过HTTP将数据传输到B服务器，B服务器接收到数据后执行数据中调用的指定方法、函数，例如谷歌的gRPC就是在HTTP上进行数据传输的。但是由于HTTP报头中有太多不需要的信息造成带宽的浪费，所以很多人都是用比HTTP传输效率高的TCP、UDP进行数据传输。</li><li><strong>TCP、UDP</strong><br>例如著名的Netty就是基于TCP、UDP上进行传输的，当然你也可以不使用框架，自己编写Socket实现网络数据传输。</li></ol><h1 id="RESTful-API和RPC"><a href="#RESTful-API和RPC" class="headerlink" title="RESTful API和RPC"></a>RESTful API和RPC</h1><h2 id="RESTful-API和RPC区别和关系"><a href="#RESTful-API和RPC区别和关系" class="headerlink" title="RESTful API和RPC区别和关系"></a>RESTful API和RPC区别和关系</h2><p>在我理解中，RESTful API和RPC是两种完全不同概念的东西，是没法放在一起比较的，如果硬要将它俩比较，我认为RESTful是RPC的一种实现，即RPC包括RESTful API，但RPC不等于RESTful API。</p><ul><li>RPC：我认为RPC是一种为实现远程调用而提出<strong>一种思想</strong>，至于你用什么方式去达到目的都可以（例如：用什么网络协议来传输数据看自己的选择）。</li><li>RESTful API：符合REST设计风格的一种接口架构，它也是通过网络进行的远程调用，但是远程调用仅限于HTTP。<h2 id="RESTful-API和RPC用途"><a href="#RESTful-API和RPC用途" class="headerlink" title="RESTful API和RPC用途"></a>RESTful API和RPC用途</h2>既然RESTful API和RPC都可以实现远程调用，那我们应该在这两者之中如何抉择呢？</li><li>RESTful API：主要用在为第三方提供调用自家系统的一种途径。</li><li>RPC：主要用在自家系统之间的互相调用，即实现系统的分布式。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这里我仅是以我掌握的知识给大家介绍RPC和RESTful，给初学者大概了解一下RPC和RESTful，若文中有不妥的地方希望大家指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fyaudx4yrxj209u03yt8m.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这两天在和同学谈到RPC、RESTful时候发现自己对这两者并不是很理解，于是查阅了网上相关资料加上自己的理解写下本篇文章以加深印象，由于本人水平有限，若对这两者的理解有不妥之处望指出。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://ddnd.cn/categories/Technique/"/>
    
    
      <category term="RPC" scheme="http://ddnd.cn/tags/RPC/"/>
    
      <category term="RESTful" scheme="http://ddnd.cn/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合 附源码</title>
    <link href="http://ddnd.cn/2018/12/16/SSM-integration/"/>
    <id>http://ddnd.cn/2018/12/16/SSM-integration/</id>
    <published>2018-12-16T07:33:50.000Z</published>
    <updated>2018-12-17T13:18:23.750Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8muss9bdj20m8078mx7.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经介绍<a href="https://ddnd.cn/2018/12/01/Spring-Mybatis/">Spring和Mybatis整合</a>，而本篇介绍在IDEA下Spring、Spring MVC、Mybatis（SSM）三个框架的整合，在阅读本篇之前，建议大家先去了解一下Spring、Spring MVC、Mybatis（<a href="https://ddnd.cn/categories/">三大框架基础入门传送门</a>），会达到事半功倍的效果。至于Spring MVC相对于Servlet、JSP的优点这里就不累赘了，大家可以上网查阅相关资料。本篇注重整合思路、整合过程以及整合过程中出现的坑。</p><a id="more"></a><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8nvkchhzj20ca0ofabe.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加spring核心依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  `password` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `users_email_unique` (`email`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=240 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据库对应的实体类"><a href="#新建数据库对应的实体类" class="headerlink" title="新建数据库对应的实体类"></a>新建数据库对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类：User.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建Mapper-xml文件和Mapper接口（Dao层）"><a href="#新建Mapper-xml文件和Mapper接口（Dao层）" class="headerlink" title="新建Mapper.xml文件和Mapper接口（Dao层）"></a>新建Mapper.xml文件和Mapper接口（Dao层）</h1><blockquote><p>这里注意Mapper.xml文件名要和Mapper接口的名字相同</p></blockquote><p>1.Mapper接口：UserDao.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public User getUserByEmail(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里为了测试，仅编写一个接口，即通过用户email查询到用户的信息。</p><ol start="2"><li>Mapper.xml文件：UserDao.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.UserDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUserByEmail&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这里需要注意用一下：我们使用的是IDEA，而IDEA默认是不编译<code>main/src/java</code>目录下的xml文件的，即在编译的时候不会把将这些xml一块打包进classes文件，而是<strong>直接丢弃</strong>。为了解决这个问题，有两种方法，1.将xml文件都放到<code>resources</code>目录下。2.配置maven的pom文件。这里我就用第一种方法，将mapper.xml文件都放到resources目录。</p><h1 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h1><p>Mybatis-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>这里为<code>cn.ddnd.www.Entity.User</code>这个类设置个<code>User</code>的别名，这样直接使用<code>User</code>即可使用<code>cn.ddnd.www.Entity.User</code>这个类。</p><h1 id="Spring-MVC配置文件"><a href="#Spring-MVC配置文件" class="headerlink" title="Spring MVC配置文件"></a>Spring MVC配置文件</h1><p>Spring-mvc.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>这里配置个<code>InternalResourceViewResolver</code>解析器，<code>prefix</code>属性指定资源文件的<strong>前缀</strong>，因为我的资源文件就放在<code>web</code>目录下，所以我这个属性留空，<code>suffix</code>属性配置资源页面的<strong>后缀</strong>。</p><h1 id="Spring-配置文件"><a href="#Spring-配置文件" class="headerlink" title="Spring 配置文件"></a>Spring 配置文件</h1><p>前面配置完Mybatis是不是觉得配置的代码很少、很简单？这是因为Mybatis的一些配置都放在Spring中配置啦！接下来看我们Spring的配置文件。<br>applicationContext.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=&quot;cn.ddnd.www&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入连接池数据源配置--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--注入mybatis配置信息 注意加上classpath 不然编译出来后是找不到Mybatis-config.xml的文件的--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--mapper.xml和mapper.java不在同一个目录 则配置此参数--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的Mapper映射器 这个是指定接口配置--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="line">        &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.UserDaoao&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描Mapper接口并注册为Bean 这个是通过扫描包来配置--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>applicationContext</code>配置了<code>Mybatis</code>的<strong>数据源</strong>、<strong>SqlSessionFactory</strong>、<strong>Mapper映射器</strong>，为了简便我们选择用扫描包的方式注册。<br>这里需要注意一下几点：</p><ol><li>添加<code>mapperLocations</code>属性：因为我们把Mapper.xml文件和Mapper接口放在了不同的目录下，所以我们需要在配置Mybatis的<code>SqlSessionFactory</code>时候添加一个属性<code>mapperLocations</code>，即指定<code>mapper.xml</code>文件的路径。</li><li>启动扫描JavaBean：<code>&lt;context:component-scan base-package=&quot;cn.ddnd.www&quot;&gt;&lt;/context:component-scan&gt;</code>扫描指定包下的所有JavaBean，</li><li>添加XML命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code>,<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code>，不然会出现通配符的匹配很全面, 但无法找到元素 ‘context:component-scan’ 的声明的问题。</li><li>路径前添加classpath：在指定XML路径的时候，需要以<code>classpath:文件路径</code>的形式，不然会出现XML文件找不到的问题，因为工程编译后XML文件都是放在<code>classes</code>的文件夹下。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8pkuz1huj20pk08ddgb.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8pl9cs0aj20nn08bwf4.jpg" alt=""></li></ol><h1 id="编写Service层"><a href="#编写Service层" class="headerlink" title="编写Service层"></a>编写Service层</h1><p>虽然前面已经编写了Dao层（UserDao）了，但是Dao层的工作主要是做数据持久化的，而Service层则负责业务模块的逻辑应用设计，Service调用已定义的Dao层的接口实现数据的持久化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Service;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Dao.UserDao;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class Uservice &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    public User getUserByEmail(String email) &#123;</span><br><span class="line">        return userDao.getUserByEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编写Controller层"><a href="#编写Controller层" class="headerlink" title="编写Controller层"></a>编写Controller层</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Controller;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import cn.ddnd.www.Service.Uservice;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    Uservice uservice;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&quot;)</span><br><span class="line">    public ModelAndView Index()&#123;</span><br><span class="line">        User user;</span><br><span class="line">        user = uservice.getUserByEmail(&quot;xue8@ddnd.cn&quot;);</span><br><span class="line">        return new ModelAndView(&quot;index&quot;, &quot;user&quot;, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里自动装配Service层的Uservice，实现数据查询，查询结果将在View层显示。这里为了方便，默认查询email为<a href="mailto:`xue8@ddnd.cn">`xue8@ddnd.cn</a>`的用户信息。</p><h1 id="编写View层"><a href="#编写View层" class="headerlink" title="编写View层"></a>编写View层</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: xueba</span><br><span class="line">  Date: 2018/11/29</span><br><span class="line">  Time: 17:34</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;SSM整合&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    email：$&#123;user.email&#125; &lt;br&gt;</span><br><span class="line">    id：$&#123;user.id&#125; &lt;br&gt;</span><br><span class="line">    password：$&#123;user.password&#125; &lt;br&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将查询出来的用户信息显示出来。</p><h1 id="配置Web-xml"><a href="#配置Web-xml" class="headerlink" title="配置Web.xml"></a>配置Web.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;Spring&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:*.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;Spring&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>在Web.xml中配置<strong>前端控制器</strong><code>DispatcherServlet</code>，负责发送每个请求到合适的处理程序。</p><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8q8xln3bj20lr08mq3b.jpg" alt=""></p><p>源码下载：<a href="https://github.com/xue8/Java-Demo/tree/master/SSM" target="_blank" rel="noopener">SSM整合例子</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fy8muss9bdj20m8078mx7.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面已经介绍&lt;a href=&quot;https://ddnd.cn/2018/12/01/Spring-Mybatis/&quot;&gt;Spring和Mybatis整合&lt;/a&gt;，而本篇介绍在IDEA下Spring、Spring MVC、Mybatis（SSM）三个框架的整合，在阅读本篇之前，建议大家先去了解一下Spring、Spring MVC、Mybatis（&lt;a href=&quot;https://ddnd.cn/categories/&quot;&gt;三大框架基础入门传送门&lt;/a&gt;），会达到事半功倍的效果。至于Spring MVC相对于Servlet、JSP的优点这里就不累赘了，大家可以上网查阅相关资料。本篇注重整合思路、整合过程以及整合过程中出现的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="Spring-MVC" scheme="http://ddnd.cn/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Mybatis整合</title>
    <link href="http://ddnd.cn/2018/12/01/Spring-Mybatis/"/>
    <id>http://ddnd.cn/2018/12/01/Spring-Mybatis/</id>
    <published>2018-12-01T10:14:46.000Z</published>
    <updated>2018-12-16T09:53:32.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxreyw9u7sj21y013edog.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在很多项目中，Mybatis都是和Spring配合起来一起发挥作用的，利用Spring的注入、基于接口编程等优势，将Mybatis的一些琐事交给Spring管理，而Mybatis可以更加注重在自身业务SQL语句上。Mybatis和Spring的整合思路如下：</p><ol><li>Mybatis将SqlSessionFactory交给Spring创建和管理<br><code>SqlSessionFactoryBean</code>代替了<code>SqlSessionFactoryBuilder</code>来创建<code>SqlSessionFactory</code>,SqlSessionFactoryBean实现了Spring的FactoryBean接口，Spring在应用启动的时候为你创建SqlSessionFactory对象，然后将它以SqlSessionFactory为命名来存储。</li><li>Mybatis将数据映射器Mapper交给Spring管理<br><code>MapperFactoryBean</code>封装了原有的<code>session.getMapper()</code>功能的实现，它可以把我们对应的Mapper接口<strong>注入</strong>到由Spring管理的Bean对象中(如Service Bean对象)，这样当我们需要使用到相应的Mapper对象时候，<code>MapperFactoryBean</code>会从它的getObject方法中获取到对应的Mapper.xml文件，即通过<strong>Mapper接口</strong>(xx.java)获取我们想要的<strong>Mapper对象</strong>。<a id="more"></a></li></ol><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxtoptc78xj20b70eqmxo.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加spring核心依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据表对应的实体类"><a href="#新建数据表对应的实体类" class="headerlink" title="新建数据表对应的实体类"></a>新建数据表对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类：User.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建Mapper-xml文件和Mapper接口"><a href="#新建Mapper-xml文件和Mapper接口" class="headerlink" title="新建Mapper.xml文件和Mapper接口"></a>新建Mapper.xml文件和Mapper接口</h1><p>Mapper.xml文件和Mapper接口最好在同一个路径下，不同路径的话需要配置的话需要配置<code>SqlSessionFactoryBean</code>的<code>configLocation</code>属性来指定Mapper.xml文件的路径。</p><ol><li><p>Mapper对象：IUser.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口：IUser.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h1><p>Mybatis-config.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>注意这里：如果Mybatis没有整合Spring的时候，数据源的配置信息需要在这个文件中配置好，现在配合Spring使用之后，数据源的配置也就交给了Spring来创建和管理。同时<code>typeAliases</code>别名也可以在Spring的<code>SqlSessionFactoryBean</code>中设置</p><h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><p>applicationContext.xml：</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="配置Mybatis的SqlSessionFactory"><a href="#配置Mybatis的SqlSessionFactory" class="headerlink" title="配置Mybatis的SqlSessionFactory"></a>配置Mybatis的SqlSessionFactory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--注入连接池数据源配置 必要属性--&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--注入mybatis配置信息--&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在配置<code>SqlSessionFactoryBean</code>的时候，有一个属性是<strong>必须</strong>的，就是<code>dataSource</code>,它表示用于连接数据库的数据源（可以是Tomcat DBCP、C3P0等连接池）。除了<code>SqlSessionFactoryBean</code>外，别的属性都不是必要的，如指定Mybatis配置文件的<code>configLocation</code>，指定Mapper.xml文件存放位置的属性<code>mapperLocations</code>，当我们的Mapper.xml文件跟Mapper接口处在同一个目录下时候，这个参数不用设置。<code>typeAliasesPackage</code>可以设置别名，一般对应我们的<strong>实体类</strong>所在的包，会<strong>自动扫描</strong>包下的类并且将类名设置为别名，如果有多个包的话，可以用逗号<code>,</code>或者分号<code>:</code>进行分隔。</p><h2 id="配置Mybatis数据映射器Mapper"><a href="#配置Mybatis数据映射器Mapper" class="headerlink" title="配置Mybatis数据映射器Mapper"></a>配置Mybatis数据映射器Mapper</h2><p>有两种方式将Mapper的接口注册成Bean，分别是单例注册、扫描注册</p><h3 id="通过指定Mapper的接口注册相应的Bean"><a href="#通过指定Mapper的接口注册相应的Bean" class="headerlink" title="通过指定Mapper的接口注册相应的Bean"></a>通过指定Mapper的接口注册相应的Bean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Mybatis的Mapper映射器--&gt;</span><br><span class="line">&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果要配置多个的话 得新建MapperFactoryBean --&gt;</span><br><span class="line">&lt;!--&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IBook&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;--&gt;</span><br></pre></td></tr></table></figure><ol><li><code>mapperInterface</code>：指定接口的路径，<code>MapperFactoryBean</code>创建的代理类实现了<code>IUser</code>接口（Spring将接口注入到Spring管理的Bean中），并且注入到应用程序中。注意IUser.xml文件的路径需要和IUser.java接口的路径相同，否则需要在<code>SqlSessionFactoryBean</code>中设置<code>configLocation</code>属性，指定.xml文件路径。</li><li><code>sqlSessionFactory</code>：指定<code>SqlSessionFactory</code>,用于提供SqlSession。</li></ol><h3 id="通过扫描指定包批量将Mapper的接口并注册相应的Bean"><a href="#通过扫描指定包批量将Mapper的接口并注册相应的Bean" class="headerlink" title="通过扫描指定包批量将Mapper的接口并注册相应的Bean"></a>通过扫描指定包批量将Mapper的接口并注册相应的Bean</h3><p>通过指定Mapper的接口进行注册Bean的话，我们的Mapper少的时候还可以应付，但是Mapper多了就显得很麻烦了，Mybatis-Spring为了我们提供了一个<code>MapperScannerConfigurer</code>的类，它可以自动扫描Mapper接口并注册为Bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描Mapper接口并注册为Bean--&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><ol><li><code>basePackage</code>：指定接口所在的包的路径，<code>MapperScannerConfigurer</code>会自动扫描包下的接口并创建为<code>MapperFactoryBean</code>。</li><li>可以不指定<code>sqlSessionFactory</code>，因为<code>MapperScannerConfigurer</code>会创建在创建<code>MapperFactoryBean</code>之后自动装配<code>sqlSessionFactory</code>。但是如果你使用了一个以上的DataSource，那么自动装配<strong>失效</strong>。</li></ol><p>applicationContext.xml完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入连接池数据源配置--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--注入mybatis配置信息--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的Mapper映射器--&gt;</span><br><span class="line">    &lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描Mapper接口并注册为Bean--&gt;</span><br><span class="line">    &lt;!--&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>test.jav：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">//        只需要加载Spring的配置文件</span><br><span class="line">        applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">//            获取Mapper对象</span><br><span class="line">            IUser iUser = (IUser) applicationContext.getBean(&quot;userBean&quot;);</span><br><span class="line">//            调用Mapper对象的方法</span><br><span class="line">            User user = iUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这里可以看到单独使用Mybatis<a href="https://ddnd.cn/2018/11/29/Mybatis-Introduction/">Mybatis实现数据库操作</a>和Mybatis-Spring整合使用的区别，Mybatis将<code>SqlSessionFactory</code>和<code>数据映射器Mapper</code>交给Spring管理之后，我们不再需要sqlSession的获取和close，不在需要手动指定映射器。<br>运行结果：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxtoo9a2naj20s606s74v.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxreyw9u7sj21y013edog.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在很多项目中，Mybatis都是和Spring配合起来一起发挥作用的，利用Spring的注入、基于接口编程等优势，将Mybatis的一些琐事交给Spring管理，而Mybatis可以更加注重在自身业务SQL语句上。Mybatis和Spring的整合思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mybatis将SqlSessionFactory交给Spring创建和管理&lt;br&gt;&lt;code&gt;SqlSessionFactoryBean&lt;/code&gt;代替了&lt;code&gt;SqlSessionFactoryBuilder&lt;/code&gt;来创建&lt;code&gt;SqlSessionFactory&lt;/code&gt;,SqlSessionFactoryBean实现了Spring的FactoryBean接口，Spring在应用启动的时候为你创建SqlSessionFactory对象，然后将它以SqlSessionFactory为命名来存储。&lt;/li&gt;
&lt;li&gt;Mybatis将数据映射器Mapper交给Spring管理&lt;br&gt;&lt;code&gt;MapperFactoryBean&lt;/code&gt;封装了原有的&lt;code&gt;session.getMapper()&lt;/code&gt;功能的实现，它可以把我们对应的Mapper接口&lt;strong&gt;注入&lt;/strong&gt;到由Spring管理的Bean对象中(如Service Bean对象)，这样当我们需要使用到相应的Mapper对象时候，&lt;code&gt;MapperFactoryBean&lt;/code&gt;会从它的getObject方法中获取到对应的Mapper.xml文件，即通过&lt;strong&gt;Mapper接口&lt;/strong&gt;(xx.java)获取我们想要的&lt;strong&gt;Mapper对象&lt;/strong&gt;。
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis mapper动态代理方式</title>
    <link href="http://ddnd.cn/2018/11/30/Mybatis-Proxy/"/>
    <id>http://ddnd.cn/2018/11/30/Mybatis-Proxy/</id>
    <published>2018-11-30T13:33:59.000Z</published>
    <updated>2018-11-30T15:21:16.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxqf5iw6clj20m80cin0d.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在使用Mybatis的时候，获取需要执行的SQL语句的时候，都是通过调用xml文件来获取，例如：<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</code>。这种方式是通过字符串去调用标签定义的SQL语句，第一容易出错，第二是当xml当中的id修改过后你不知道在程序当中有多少个地方使用了这个id，需要手动一一修改。后来Mybatis推出了Mapper动态代理方式，只需要编写<strong>Mapper接口</strong>（相当于Dao层）,由Mybatis框架根据接口定义创建接口的动态代理对象。</p><a id="more"></a><h1 id="Mapper接口规范"><a href="#Mapper接口规范" class="headerlink" title="Mapper接口规范"></a>Mapper接口规范</h1><ol><li>Mapper.xml中的namespace和Mapper.java接口中的类路径相同，即<code>&lt;mapper namespace=&quot;cn.ddnd.www.Dao.User&quot;&gt;</code>对应的是<code>cn.ddnd.www.Dao</code>包下的<code>User</code>类。</li><li>Mapper.xml中的<code>select</code>ID要和Mapper.java接口中的类方法名相同，即<code>&lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</code>的<code>getUser</code>和<code>public User getUser(String email);</code>的<code>getUser</code>方法名对应。</li><li>Mapper.xml中的<code>parameterType</code>的类型要和Mapper接口中方法的<strong>传入参数类型</strong>相同。</li><li>Mapper.xml中的<code>resultType</code>的类型要和Mapper接口中方法的<strong>返回参数类型</strong>相同。</li></ol><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="配置Mapper-xml"><a href="#配置Mapper-xml" class="headerlink" title="配置Mapper.xml"></a>配置Mapper.xml</h2><p>IUser.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h2 id="配置Mapper-java接口"><a href="#配置Mapper-java接口" class="headerlink" title="配置Mapper.java接口"></a>配置Mapper.java接口</h2><p>IUser.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="编写Mybatis配置文件"><a href="#编写Mybatis配置文件" class="headerlink" title="编写Mybatis配置文件"></a>编写Mybatis配置文件</h2><p>Mybatis-config.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;cn/ddnd/www/Dao/IUser.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>test.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</span><br><span class="line">            User user = IUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</code>sqlSession会帮我们生成一个实现类（给IUser接口）,这样即可获取IUser接口的代理对象。<code>User user = IUser.getUser(&quot;xue8@qq.com&quot;);</code>代理对象方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxqf5iw6clj20m80cin0d.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在使用Mybatis的时候，获取需要执行的SQL语句的时候，都是通过调用xml文件来获取，例如：&lt;code&gt;User user = (User) sqlSession.selectOne(&amp;quot;cn.ddnd.www.Entity.User.getUser&amp;quot;, &amp;quot;xue8@qq.com&amp;quot;);&lt;/code&gt;。这种方式是通过字符串去调用标签定义的SQL语句，第一容易出错，第二是当xml当中的id修改过后你不知道在程序当中有多少个地方使用了这个id，需要手动一一修改。后来Mybatis推出了Mapper动态代理方式，只需要编写&lt;strong&gt;Mapper接口&lt;/strong&gt;（相当于Dao层）,由Mybatis框架根据接口定义创建接口的动态代理对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis接口注解实现映射</title>
    <link href="http://ddnd.cn/2018/11/30/Mybatis-Annotation/"/>
    <id>http://ddnd.cn/2018/11/30/Mybatis-Annotation/</id>
    <published>2018-11-30T07:50:28.000Z</published>
    <updated>2018-11-30T08:41:00.644Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq59jtsmsj20jk09mjr9.jpg" style="width:100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章介绍了xml文件映射SQL语句，即<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;)</code>，但是这种方式过于繁杂，所以我们本篇介绍使用<strong>注解</strong>和<strong>SQL语句返回值的接口</strong>（如：IUser.class），即可实现xml配置文件的功能。<br><a id="more"></a></p><h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>将工程新建成和上篇的一样<a href="https://ddnd.cn/2018/11/29/Mybatis-Introduction/">Mybatis实现数据库操作</a>，即把上篇的内容搬过来。</p><h1 id="修改成用注解方式"><a href="#修改成用注解方式" class="headerlink" title="修改成用注解方式"></a>修改成用注解方式</h1><ol><li><p>可以删除 <code>cn.ddnd.www.Entity</code>包下的<code>User.xml</code>，去掉<code>Mybatis-config.xml</code>的如下代码。因为此时<code>User.xml</code>已经没用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;cn/ddnd/www/Entity/User.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li><li><p>新建<code>cn.ddnd.www.Dao</code>包，并且建立<code>IUser</code>接口和方法。<br>IUser.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    @Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改测试类，即增加了<code>sqlSessionFactory.getConfiguration().addMapper(IUser.class);</code>，作用是注册SQL语句映射的接口，去掉<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</code>，增加<code>IUser IUser = (IUser) sqlSession.getMapper(IUser.class); User user = IUser.getUser(&quot;xue8@qq.com&quot;);</code>即可。<br>text.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">//            注册SQL语句映射的接口</span><br><span class="line">            sqlSessionFactory.getConfiguration().addMapper(IUser.class);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">//            User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</span><br><span class="line"></span><br><span class="line">//            IUser.class只是个接口 Mybatis面向接口编程 只写接口 不用写接口的实现类 Mybatis帮我们去写实现类了！</span><br><span class="line">            IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</span><br><span class="line">            User user = IUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq6alhwtcj20e90e6t9a.jpg" alt=""></p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>运行测试类<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq6bhkzs1j20pb06iq3a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxq59jtsmsj20jk09mjr9.jpg&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上一篇文章介绍了xml文件映射SQL语句，即&lt;code&gt;User user = (User) sqlSession.selectOne(&amp;quot;cn.ddnd.www.Entity.User.getUser&amp;quot;, &amp;quot;xue8@qq.com&amp;quot;)&lt;/code&gt;，但是这种方式过于繁杂，所以我们本篇介绍使用&lt;strong&gt;注解&lt;/strong&gt;和&lt;strong&gt;SQL语句返回值的接口&lt;/strong&gt;（如：IUser.class），即可实现xml配置文件的功能。&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/29/Mybatis-Introduction/"/>
    <id>http://ddnd.cn/2018/11/29/Mybatis-Introduction/</id>
    <published>2018-11-29T13:49:11.000Z</published>
    <updated>2018-11-30T03:29:20.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>什么是Mybatis？维基百科是这样定义的：Mybatis是一个Java持久化框架，它通过<strong>XML描述符</strong>或<strong>注解</strong>把对象与储存过程或SQL语句关联起来。通俗点说就是Mybatis是对<strong>JPA</strong>（Java持久化API，一个Java应用程序<strong>接口</strong>规范）的实现，是为了简化数据库操作过程而衍生出来的产品。<br>关于Mybatis的教程，推荐到官方文档看：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方文档</a><br><a id="more"></a></p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpb9imgc0j20dn0ffq3j.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>本文中用到的Jar依赖包有：Mybatis包、Mysql驱动包。<br>pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建Mybatis配置文件"><a href="#创建Mybatis配置文件" class="headerlink" title="创建Mybatis配置文件"></a>创建Mybatis配置文件</h1><p>新建Mybatis-config.xml文件，完成对Mybatis的配置。其中<code>cn/ddnd/www/Entity/User.xml</code>是包含要映射的类的xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;cn/ddnd/www/Entity/User.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。<br>数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据表对应的实体类"><a href="#新建数据表对应的实体类" class="headerlink" title="新建数据表对应的实体类"></a>新建数据表对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建User类的对应映射层"><a href="#新建User类的对应映射层" class="headerlink" title="新建User类的对应映射层"></a>新建User类的对应映射层</h1><p>在User类的路径下新建User.xml完成对对象的映射。<code>resultType=&quot;User&quot;</code>中的<code>User</code>为Mybatis配置文件中的<code>&lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</code>所指定的<code>User</code>别名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Entity.User&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>新建一个测试类，查找邮箱是<a href="mailto:xue8@qq.com" target="_blank" rel="noopener">xue8@qq.com</a>的用户信息。<br>test.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import sun.awt.geom.AreaOp;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据表信息：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbahhgrdj20cf04x3yk.jpg" alt=""></p><p>测试结果：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbb0l37lj20on04i74i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;什么是Mybatis？维基百科是这样定义的：Mybatis是一个Java持久化框架，它通过&lt;strong&gt;XML描述符&lt;/strong&gt;或&lt;strong&gt;注解&lt;/strong&gt;把对象与储存过程或SQL语句关联起来。通俗点说就是Mybatis是对&lt;strong&gt;JPA&lt;/strong&gt;（Java持久化API，一个Java应用程序&lt;strong&gt;接口&lt;/strong&gt;规范）的实现，是为了简化数据库操作过程而衍生出来的产品。&lt;br&gt;关于Mybatis的教程，推荐到官方文档看：&lt;a href=&quot;http://www.mybatis.org/mybatis-3/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mybatis官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Tomcat自带的连接池实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/"/>
    <id>http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/</id>
    <published>2018-11-26T11:12:06.000Z</published>
    <updated>2018-11-26T12:51:04.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们已经用<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Spring和传统的Jdbc实现数据库操作</a>、<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/">Spring和JdbcTemplate实现数据库操作</a>。但是这些都是基于<strong>直连的数据源</strong>进行的，现在我们将介绍基于<strong>连接池的数据源</strong>进行数据库操作。前面几个步骤都相同。<br><a id="more"></a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlomtejdlj20k20dm3zg.jpg" alt=""></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlop5qno4j20yy0hytb5.jpg" alt=""></p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。<br>UserDao.java：</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloq9510lj20s50haabs.jpg" alt=""><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><p>UserDaoImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line">import javax.naming.NamingException;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private Connection connection;</span><br><span class="line"></span><br><span class="line">    //构造函数 向连接池获得连接</span><br><span class="line">    UserDaoImpl()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Context initContext = new InitialContext();</span><br><span class="line">            DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br><span class="line">            connection = ds.getConnection();</span><br><span class="line">        &#125;catch (NamingException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(&quot;insert into user(name,email,password) values(?,?,?)&quot;);</span><br><span class="line">            ps.setString(1,user.getName());</span><br><span class="line">            ps.setString(2,user.getEmail());</span><br><span class="line">            ps.setString(3,user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloqs9hebj21c80i7tc1.jpg" alt=""><br>注意这里，通过JNDI查找到数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Context initContext = new InitialContext();</span><br><span class="line">DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br></pre></td></tr></table></figure></p><p>然后<code>connection = ds.getConnection();</code>在数据源中获取一个连接对象。</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><h2 id="配置context-xml"><a href="#配置context-xml" class="headerlink" title="配置context.xml"></a>配置context.xml</h2><p>在webapp中新建一个<code>META-INF</code>文件夹，然后新建个<code>context.xml</code>来配置数据源。<br>context.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Context&gt;</span><br><span class="line">    &lt;Resource name=&quot;jdbc/dataSource&quot;</span><br><span class="line">              auth=&quot;Container&quot;</span><br><span class="line">              factory=&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span><br><span class="line">              type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">              url=&quot;jdbc:mysql://localhost:3306/spring&quot;</span><br><span class="line">              username=&quot;root&quot;</span><br><span class="line">              password=&quot;root&quot;</span><br><span class="line">              maxTotal=&quot;100&quot;</span><br><span class="line">              maxIdle=&quot;30&quot;</span><br><span class="line">              maxWaitMillis=&quot;1000&quot;</span><br><span class="line">              driverClassName=&quot;com.mysql.jdbc.Driver&quot;&gt;</span><br><span class="line">    &lt;/Resource&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6q1be5j213l0hgact.jpg" alt=""></p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>在web.xml中配置context.xml的引用关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6j5a2vj20yj0iwju9.jpg" alt=""></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>由于TomcatDBCP是内置在Tomcat容器的连接池，所以要使用这个连接池得运行Tomcat，接下来我们编写在Tomcat容器中实现连接池操作数据库。</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ol><li>新建一个测试类，来测试我们的连接池操作数据库。需要注意的是，<code>servlet</code>的生命周期是由<strong>servlet容器管理</strong>（如Tomcat）的，而Spring的Bean是由<strong>Srping容器</strong>管理的，所以我们在servlet容器中是无法使用<code>@Autowired</code>等Spring的注解的，那么如何在Spring容器外面获取到Spring容器的Bean实例呢？这就需要用到Spring为我们提供的<code>WebApplicationContextUtils</code>工具类，该工具的作用是获取到Spring容器的引用，进而获得我们需要的Bean实例。<br>test.java：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.test;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.impl.UserDaoImpl;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class test extends HttpServlet&#123;</span><br><span class="line"></span><br><span class="line">    private UserDaoImpl userDaoImpl;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest args, HttpServletResponse args1) throws ServletException &#123;</span><br><span class="line">        //获取spring的bean</span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;context.xml&quot;);</span><br><span class="line">        this.userDaoImpl = (UserDaoImpl) applicationContext.getBean(&quot;userDaoImpl&quot;);</span><br><span class="line"></span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue811&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDaoImpl.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr03bqm4j21920ip77l.jpg" alt=""></p><ol start="2"><li>我们在resources中新建一个context.xml进行配置Bean。<br>context.xml：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr0b6970j212w0j6adc.jpg" alt=""></p><h2 id="Web配置"><a href="#Web配置" class="headerlink" title="Web配置"></a>Web配置</h2><p>在<code>web.xml</code>配置文件中添加servlet，来处理请求。我们将/index的请求让<code>cn.biecheng.www.test.test</code>测试类进行处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;cn.biecheng.www.test.test&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/index&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我们在IDEA运行后，在浏览器中输入<code>http://localhost:8080/index</code>，即可在数据库中发现数据已插入。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr50y7zhj20qc0ebmyi.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面我们已经用&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Spring和传统的Jdbc实现数据库操作&lt;/a&gt;、&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/&quot;&gt;Spring和JdbcTemplate实现数据库操作&lt;/a&gt;。但是这些都是基于&lt;strong&gt;直连的数据源&lt;/strong&gt;进行的，现在我们将介绍基于&lt;strong&gt;连接池的数据源&lt;/strong&gt;进行数据库操作。前面几个步骤都相同。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="TomcatDBCP" scheme="http://ddnd.cn/tags/TomcatDBCP/"/>
    
      <category term="连接池" scheme="http://ddnd.cn/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Spring和JdbcTemplate实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/</id>
    <published>2018-11-19T09:49:06.000Z</published>
    <updated>2018-11-25T08:07:29.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完<a href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Srping和传统JDBC实现数据库操作</a>之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的<code>JdbcTemplate</code>就很有必要了，当然JdbcTemplate也是<strong>直连的数据源</strong>。<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">传统JDBC和JdbcTemplate区别</a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc38c95c?w=1351&amp;h=622&amp;f=png&amp;s=107313" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc8957d5?w=1060&amp;h=591&amp;f=png&amp;s=81342" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate)&#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dcac1fea?w=1349&amp;h=635&amp;f=png&amp;s=113118" alt="在这里插入图片描述"><br>注意：看这里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br></pre></td></tr></table></figure></p><p>一行代码即可实现插入功能，和传统的JDBC相比实现插入真的是简单到不行吧！</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--装配UserDaoImpl类--&gt;</span><br><span class="line">    &lt;bean id=&quot;userDaoImple&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置jdbcTemplate--&gt;</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--建立连接--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2deb347b9?w=1466&amp;h=623&amp;f=png&amp;s=169046" alt="在这里插入图片描述"><br>数据源配置的过程大概是这样的</p><ul><li>通过<code>org.springframework.jdbc.datasource.DriverManagerDataSource</code>建立<strong>数据源连接</strong>（连接对象Connection）</li><li>配置JdbcTemplate，其中<code>ref=&quot;dataSource&quot;</code>的dataSource为数据源连接的id</li><li>装配装配<code>UserDaoImpl</code>类，将JdbcTemplate对象<strong>注入</strong>到UserDaoImpl类的名为jdbcTemplate成员属性中</li></ul><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;DataSource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.biecheng.www&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2defc2e0a?w=1337&amp;h=605&amp;f=png&amp;s=134263" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes = &#123;cn.biecheng.www.Config.Config.class&#125;)</span><br><span class="line">public class test &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue8&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f34894bc9e?w=1457&amp;h=634&amp;f=png&amp;s=142401" alt="在这里插入图片描述"></p><p>运行测试类。<br>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2df477aab?w=475&amp;h=155&amp;f=png&amp;s=12345" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看完&lt;a href=&quot;http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Srping和传统JDBC实现数据库操作&lt;/a&gt;之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的&lt;code&gt;JdbcTemplate&lt;/code&gt;就很有必要了，当然JdbcTemplate也是&lt;strong&gt;直连的数据源&lt;/strong&gt;。&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;传统JDBC和JdbcTemplate区别&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Srping和传统JDBC实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/</id>
    <published>2018-11-19T04:04:36.000Z</published>
    <updated>2018-11-25T08:06:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习完了<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">Spring对JDBC的支持</a>和<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">【JAVA】JAVA数据源</a>之后，那我们就可以进行数据库的操作了。</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail()&#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword()&#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password)&#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b533fc07" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User User);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b6573640?w=1270&amp;h=677&amp;f=png&amp;s=92459" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public void setDataSource(DataSource dataSource)&#123;</span><br><span class="line">        this.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user)&#123;</span><br><span class="line">        String sql = &quot;INSERT INTO `spring`.`user` (`email`, `name`, `password`) VALUES (?, ?,?)&quot;;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(1, user.getEmail());</span><br><span class="line">            ps.setString(2, user.getName());</span><br><span class="line">            ps.setString(3, user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;catch(SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b5bcbf45?w=1781&amp;h=738&amp;f=png&amp;s=203125" alt="在这里插入图片描述"><br>这里直接用了传统的JDBC，没有使用Spring的JdbcTemplate或者别的ORM框架。<a href="https://blog.csdn.net/xueba8/article/details/84065855" target="_blank" rel="noopener">传统JDBC和Spring的JdbcTemplate区别</a><br><code>private DataSource dataSource;</code>这里对</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b7cc7f72?w=1708&amp;h=627&amp;f=png&amp;s=196146" alt="在这里插入图片描述"><br>这里为了方便直接使用了<strong>直连的数据源</strong>（<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">关于直连的数据源和连接池的数据源</a>）,也可以使用连接池的数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>其中<code>name=&quot;dataSource&quot;</code>为向<code>cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl</code>这个类名为<code>dataSource</code>成员属性<strong>注入</strong>一个<code>id</code>为<code>dataSource</code>（<code>ref=&quot;dataSource&quot;</code>）的Bean（通过setter方法即<code>setDataSource</code>），也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>这样在<code>UserDao</code>的实现类<code>UserDaoImpl</code>就能完成了数据源的装配了。</p><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;Spring-Datasource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.zhenta.www.service.impl&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b9d7ab20?w=1407&amp;h=728&amp;f=png&amp;s=135454" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71e6636956?w=1553&amp;h=762&amp;f=png&amp;s=184494" alt="在这里插入图片描述"></p><p><code>ContextConfiguration</code> 指定Spring配置信息来源，<code>UserDao userDAO</code>引用UserDao接口，<code>User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;)</code>创建一个User实体类中储存我们要保存的数据，<code>userDAO.inSert(user)</code>通过接口的实现类插入数据。<a href="https://blog.csdn.net/xueba8/article/details/83898278" target="_blank" rel="noopener">接口的引用</a></p><p>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71ebceb2ef?w=409&amp;h=156&amp;f=png&amp;s=11100" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习完了&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;Spring对JDBC的支持&lt;/a&gt;和&lt;a href=&quot;https://blog.csdn.net/xueba8/article/details/84107204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【JAVA】JAVA数据源&lt;/a&gt;之后，那我们就可以进行数据库的操作了。&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JAVA数据源</title>
    <link href="http://ddnd.cn/2018/11/18/Java-DataSource/"/>
    <id>http://ddnd.cn/2018/11/18/Java-DataSource/</id>
    <published>2018-11-18T08:00:19.000Z</published>
    <updated>2018-11-25T08:02:14.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在进行数据访问，声明模板和repository之前<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">【JAVA】Spring对JDBC的支持</a>，都需要配置<strong>数据源</strong>用来连接数据库。数据源又可以分为两大类：<strong><em>直连的数据源</em></strong> 和 <strong><em>连接池的数据源</em></strong> ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道<strong>连接池</strong>、<strong>数据源</strong>、<strong>JNDI</strong>是什么，分别从当什么角色，有什么作用。</p><h1 id="连接池、数据源、JNDI"><a href="#连接池、数据源、JNDI" class="headerlink" title="连接池、数据源、JNDI"></a>连接池、数据源、JNDI</h1><h2 id="连接池、数据源"><a href="#连接池、数据源" class="headerlink" title="连接池、数据源"></a>连接池、数据源</h2><p>Java中的数据源就是连接到数据库的一条<strong>路径</strong>，数据源中并无真正的数据，它仅仅记录的是你连接到<strong>哪个数据库</strong>，以及<strong>如何连接</strong>。<code>DataSource</code>的创建可以有不同的实现。<code>DataSource</code>通常被称为数据源，它包含<strong>连接池</strong> 和<strong>连接池管理</strong> 两部分，习惯上也经常把<code>DataSource</code>称为连接池。<br><a id="more"></a></p><h3 id="连接池思想"><a href="#连接池思想" class="headerlink" title="连接池思想"></a>连接池思想</h3><p>在系统<strong>初始化</strong>的时候，将数据库<strong>连接对象（Connection）</strong> 存储在内存中，当用户需要访问数据库时候，并不是建立一个新的连接，而是从连接池中取出一个已经建立好的空闲连接对象。而连接池负责分配、管理、释放数据库连接对象。注意的是：连接池是由<strong>容器（比如tomcat）</strong> 提供的，同时容器也管理着连接池。</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p><strong>JNDI（Java Naming and Directory Interface，Java命名和目录接口）</strong>，JNDI是Java平台的一个标准扩展，提供一组接口、类和关于命名空间的概念。<strong><em>其功能通俗的来说，就是提供一个类似全局的map，key保存JNDI的名称，value保存你要放到里面的资源的引用（如Java对象），以后要想要获取value的资源即可通过<code>lookup</code>名称检索</em></strong>。<br>注意：需要区分开JNDI和通过JNDI查找的数据源的概念，不能将JNDI和连接池混为一谈。</p><ul><li>这套API的主要作用在于：它可以将<strong>Java对象</strong>放在一个容器中（支持JNDI的容器例如Tomcat），并且为容器中的Java对象取一个名称，以后程序想要获得Java对象，只要通过名称检索即可。</li><li>其核心API为Context，它代表JNDI容器，其lookup方法为检索容器中对应名称的对象。</li></ul><p><strong>使用JNDI访问Tomcat内置连接池</strong></p><ul><li>将数据库驱动的包复制到Tomcat的安装目录<code>/lib/</code>中，这样Tomcat服务器才能找到数据库驱动</li><li>编写访问JNDI程序，运行在Tomcat内部，所以通常运行在servlet、jsp中</li><li>在Tomcat启动时，自动加载配置文件（<code>context.xml</code>），创建数据库连接池，该连接池由Tomcat管理。<br><img src="https://user-gold-cdn.xitu.io/2018/11/18/16725f1f2310a0a7?w=1155&amp;h=650&amp;f=png&amp;s=36621" alt="在这里插入图片描述"></li></ul><h1 id="直连的数据源"><a href="#直连的数据源" class="headerlink" title="直连的数据源"></a>直连的数据源</h1><p>用户每次请求都需要向数据库<strong>获得连接</strong>，而数据库<strong>创建连接</strong>通常需要消耗相对较大的资源，创建的时间也较长。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f691cb3?w=896&amp;h=430&amp;f=png&amp;s=45745" alt="在这里插入图片描述"></p><h1 id="连接池的数据源"><a href="#连接池的数据源" class="headerlink" title="连接池的数据源"></a>连接池的数据源</h1><h2 id="连接池的思想"><a href="#连接池的思想" class="headerlink" title="连接池的思想"></a>连接池的思想</h2><p>数据库连接是一种关键的有限的昂贵的资源，如果每次访问数据库的时候，都需要进行数据库连接，那么势必会造成<strong>性能低下</strong>；同时，如果用户失误忘记释放数据库连接，会导致<strong>资源的浪费</strong>等。而数据库连接池就是刚好可以解决这些问题，通过管理连接池中的多个<strong>连接对象（Connection）</strong>，实现连接对象（connection）重复利用，从而大大提高了数据库连接方面的性能。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f73bc88?w=896&amp;h=490&amp;f=png&amp;s=80470" alt="在这里插入图片描述"></p><h2 id="常用的数据库连接池"><a href="#常用的数据库连接池" class="headerlink" title="常用的数据库连接池"></a>常用的数据库连接池</h2><h3 id="Tomcat内置的连接池（Tomcat-Dbcp）"><a href="#Tomcat内置的连接池（Tomcat-Dbcp）" class="headerlink" title="Tomcat内置的连接池（Tomcat Dbcp）"></a>Tomcat内置的连接池（Tomcat Dbcp）</h3><p>Tomcat在7.0以前的版本都是使用<strong>commons-dbcp</strong>作为连接池的实现，但是由于commons-dbcp饱受诟病。因此很多人会选择一些第三方的连接池组件，例如c3p0，bonecp等。为此，Tomcat从7.0开始引入了一个新的模块：Tomcat Jdbc Pool（Tomcat Dbcp）。<a href="https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html" target="_blank" rel="noopener">关于更多请看这里</a><br><strong>连接池的配置</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line">     &lt;Resource name=&quot;jdbc/login_register&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">           maxActive=&quot;100&quot; maxIdle=&quot;30&quot; maxWait=&quot;10000&quot;</span><br><span class="line">           username=&quot;root&quot; password=&quot;root&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">           url=&quot;jdbc:mysql://localhost:3306/db_user&quot;/&gt;</span><br><span class="line">           factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><strong>属性的说明</strong>：</p><ul><li>Resource：声明这个是<strong>资源</strong></li><li>name=指定Resource（资源）的<strong>JNDI名称</strong></li><li>auth=指定管理Resource的Manager(Container由容器创建和管理，Application由Web应用创建和管理) </li><li>factory：必需的属性，其值应为 <code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>type=指定Resource的java类（<strong>即指定JNDI能拿到的是什么类型的数据，<code>javax.sql.DataSource</code>这里指定为连接池对象</strong>）。类型应为 javax.sql.DataSource 或 javax.sql.XADataSource。根据类型，将创org.apache.tomcat.jdbc.pool.DataSource 或 org.apache.tomcat.jdbc.pool.XADataSource。</li><li>maxActive=指定连接池中处于活动状态的数据库连接的最大数量</li><li>maxIdle=指定连接池中处于空闲状态的数据库的最大数量</li><li>maxWait=指定连接池中连接处于空闲的最长时间，超过这个时间会提示异常，取值为-1，表示可以无限期等待，单位为毫秒（ms）</li></ul><p>我们需要注意的属性是<code>factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</code><br>如果你没有声明以上的属性，当<strong>Tomcat</strong>读到<code>type=&quot;javax.sql.DataSource&quot;</code>属性时也会<strong>自动</strong>安装<strong>DBCP</strong>，除非你指定不同的factory。</p><p>  <strong>连接池的获取</strong>：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Context c = new InitialContext();</span><br><span class="line">            DataSource dataSource = (DataSource) c.lookup(&quot;java:/comp/env/jdbc/login_register&quot;);//这里的jdbc/login_register和篇配置文件中的name属性一致</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            return conn;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <code>lookup</code>方法用于查找指定JNDI名称的连接池，<code>java:/comp/env/jdbc/login_registe</code>的<code>jdbc/login_registe</code>和配置文件中JNDI的名称相对应。这样既可查找到数据库连接池，也就能获得到连接对象了。当然，连接池的获取方式不只一种，比如还有通过配置文件来获取的，感兴趣的可以查阅资料。</p><p>  <strong>大概流程是这样的：</strong></p><ul><li>通过配置文件<code>Resource</code>声明资源为<strong>连接池</strong>类型（<code>javax.sql.DataSource</code>）的<strong>对象</strong></li><li>加载连接池factory，<code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>通过JNDI找到连接池资源</li></ul><p>通过这个例子我们看到了JNDI的作用，JNDI你可以理解成一个水池的门牌,连接池就相当于这个水池，应用要取到要访问数据库时,通过找到JNDI，然后再通过连接池和数据库所建立的连接来访问。</p><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能。C3P0是改写的<code>javax.sql.DataSource</code>。</p><p><strong>连接池的配置</strong><br>配置文件：c3p0-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">  &lt;default-config&gt;</span><br><span class="line">//默认是mysql数据库</span><br><span class="line">     &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">  &lt;/default-config&gt;</span><br><span class="line">//也可以用oracle数据库</span><br><span class="line">  &lt;named-config name=&quot;oracleConfig&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">   &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure></p><p><strong>连接池的获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> // 创建c3p0连接池核心工具类</span><br><span class="line">// 自动加载src下c3p0的配置文件【c3p0-config.xml】</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();// 使用默认的配置</span><br><span class="line">PreparedStatement pstmt = null;</span><br><span class="line">// 获取连接</span><br><span class="line">Connection con = dataSource.getConnection();</span><br><span class="line">//执行sql语句</span><br><span class="line">String sql=&quot;sql语句&quot;</span><br><span class="line">//执行</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">//关闭连接</span><br><span class="line">pstmt.close();</span><br><span class="line">con.close();</span><br></pre></td></tr></table></figure></p><p>注意：创建C3P0的连接池时候还可以在（）加上名称，连接指定配置文件中的连接池。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = </span><br><span class="line">      new ComboPooledDataSource(&quot;oracleConfig&quot;);</span><br></pre></td></tr></table></figure></p><p><strong>当然数据库连接池除了以上的配置、获取方式外，还有别的方式，例如用JNDI配置和获取的</strong>。</p><p><strong>连接池配置</strong><br><strong>在tomcat的context.xml里的<context>标签添加<resource>标签</resource></context></strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;jdbc/TestDB&quot; </span><br><span class="line">        auth=&quot;Container&quot; </span><br><span class="line">       factory=&quot;org.apache.naming.factory.BeanFactory&quot;</span><br><span class="line">       type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><br><span class="line">       driverClass=&quot;oracle.jdbc.driver.OracleDriver&quot;</span><br><span class="line">           jdbcUrl=&quot;jdbc:oracle:thin:@localhost:1521:XE&quot;</span><br><span class="line">           user=&quot;orcl&quot;</span><br><span class="line">           password=&quot;newsnews&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>不同数据源的 driverClass，jdbcUrl等 属性不同，依照连接池自身的属性配置，这里是使用的c3p0数据源，若使用其他数据源要修改属性。<code>jdbc/TestDB</code>为JNDI名称。</p><p><strong>在项目的web.xml添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;resource-ref&gt;</span><br><span class="line">    &lt;description&gt;DB Connection&lt;/description&gt;</span><br><span class="line">    &lt;res-ref-name&gt;jdbc/TestDB&lt;/res-ref-name&gt;</span><br><span class="line">    &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">    &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line"> &lt;/resource-ref&gt;</span><br></pre></td></tr></table></figure></p><p>res-ref-name引入context.xml里配置的Resource,res-type都设置为javax.sql.DataSource。</p><p><strong>在spring的applicationContext.xml配置里添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jndiName&quot; value=&quot;java:/comp/env/jdbc/TestDB&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h3><p><strong>DBCP（Database Connection Pool）</strong> 是一个依赖Jakarta commons-pool对象池机制的数据库连接池，Tomcat的数据源使用的就是DBCP。</p><p><strong>连接池配置</strong><br>dbcpconfig.properties文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/db_user</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=10</span><br><span class="line">maxActive=50</span><br><span class="line">maxIdle=20</span><br><span class="line">minIdle=5</span><br><span class="line">maxWait=60000</span><br><span class="line">connectionProperties=useUnicode=true;characterEncoding=utf8</span><br><span class="line">defaultAutoCommit=true</span><br><span class="line">defaultReadOnly=</span><br><span class="line">defaultTransactionIsolation=REPEATABLE_READ</span><br></pre></td></tr></table></figure></p><p><strong>连接池获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = getDataSource().getConnection();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static DataSource getDataSource()&#123;</span><br><span class="line">        DataSource dataSource=null;</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            p.load(DBUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));</span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(p);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;获取DataSource对象失败&quot;);</span><br><span class="line">        &#125; </span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h3><p>编写连接池需要实现<code>javax.sql.DataSource</code>接口，具体可以网上查阅相关资料。</p><h3 id="其他连接池"><a href="#其他连接池" class="headerlink" title="其他连接池"></a>其他连接池</h3><p>还有更多的连接池例如：Proxool、BoneCP、HikariCP、阿里druid等可以自行查阅资料。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上，介绍了几种常用的数据源连接池；这几种连接池在使用过程，即支持硬编码的方式，也支持配置文件的配置方式；在正式实用的时候，应该尽量使用配置的方式，便于维护和管理。硬编码的方式，可以做为测试使用。同时，spring框架，通过他自己的方式集成上述几种数据源，理论上来说，都支持。各个数据源连接池都有一些公有的属性，因为他们都是从javax.sql.datasource继 承而来，而且都有最大连接数，初始化连接数等概念。同时，他们又分别有各自不同的属性，做了扩展。这里只是简单的介绍，在实际使用中，想要实现高性能的数 据库连接池管理，还需要深入研究每种方式的连接属性配置；例如：根据实际需要，设置合适的最小连接数和最大连接数，等待时间等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在进行数据访问，声明模板和repository之前&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;【JAVA】Spring对JDBC的支持&lt;/a&gt;，都需要配置&lt;strong&gt;数据源&lt;/strong&gt;用来连接数据库。数据源又可以分为两大类：&lt;strong&gt;&lt;em&gt;直连的数据源&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;连接池的数据源&lt;/em&gt;&lt;/strong&gt; ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道&lt;strong&gt;连接池&lt;/strong&gt;、&lt;strong&gt;数据源&lt;/strong&gt;、&lt;strong&gt;JNDI&lt;/strong&gt;是什么，分别从当什么角色，有什么作用。&lt;/p&gt;
&lt;h1 id=&quot;连接池、数据源、JNDI&quot;&gt;&lt;a href=&quot;#连接池、数据源、JNDI&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源、JNDI&quot;&gt;&lt;/a&gt;连接池、数据源、JNDI&lt;/h1&gt;&lt;h2 id=&quot;连接池、数据源&quot;&gt;&lt;a href=&quot;#连接池、数据源&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源&quot;&gt;&lt;/a&gt;连接池、数据源&lt;/h2&gt;&lt;p&gt;Java中的数据源就是连接到数据库的一条&lt;strong&gt;路径&lt;/strong&gt;，数据源中并无真正的数据，它仅仅记录的是你连接到&lt;strong&gt;哪个数据库&lt;/strong&gt;，以及&lt;strong&gt;如何连接&lt;/strong&gt;。&lt;code&gt;DataSource&lt;/code&gt;的创建可以有不同的实现。&lt;code&gt;DataSource&lt;/code&gt;通常被称为数据源，它包含&lt;strong&gt;连接池&lt;/strong&gt; 和&lt;strong&gt;连接池管理&lt;/strong&gt; 两部分，习惯上也经常把&lt;code&gt;DataSource&lt;/code&gt;称为连接池。&lt;br&gt;
    
    </summary>
    
      <category term="Java编程基础" scheme="http://ddnd.cn/categories/Java-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring对JDBC的支持</title>
    <link href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/"/>
    <id>http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/</id>
    <published>2018-11-18T07:58:04.000Z</published>
    <updated>2018-11-25T07:59:28.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准<strong>接口</strong> JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的<strong>接口类</strong>，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。</p><p>利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在<strong>Java对象</strong>与<strong>关系数据</strong>之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为<strong>对象-关系映射（Ovject/Relation Mapping，ORM）</strong>。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了<strong>JPA（Java Persistence API）</strong>。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。<br><a id="more"></a><br>好了，说了这么多，也是为了大家能清楚JDBC和JPA的区别。回归正题，本文关注的是Spring对JDBC的支持，至于Spring对于JPA的支持往后的文章再介绍。</p><h1 id="Spring对JDBC的封装"><a href="#Spring对JDBC的封装" class="headerlink" title="Spring对JDBC的封装"></a>Spring对JDBC的封装</h1><h2 id="传统的JDBC"><a href="#传统的JDBC" class="headerlink" title="传统的JDBC"></a>传统的JDBC</h2><p>首先我们了解一下传统JDBC的工作流程</p><ul><li>加载数据库驱动程序（Mysql、SQL Server等）</li><li>通过<code>DriverManager</code>获取<code>Connection</code>对象</li><li>获取Statement对象</li><li>执行SQL语句</li><li>操作结果集ResultSet</li><li>关闭资源</li></ul><p>传统的JDBC使用过程中有一定的局限：</p><ol><li>都需要按照上面的6个步骤进行数据库的访问，应用程序中可能会出现大量重复的代码。</li><li>数据库访问的代码和业务代码混杂在一起，难以维护。</li><li>不适当的SQL异常处理操作，有时候程序员并不清楚如何处理SQL异常但又不能忽略（检查性异常，编译器不通过）。</li><li>……<h2 id="Spring对于JDBC的封装"><a href="#Spring对于JDBC的封装" class="headerlink" title="Spring对于JDBC的封装"></a>Spring对于JDBC的封装</h2>鉴于传统JDBC的不足，Spring对JDBC进行深层次的封装（<strong>JdbcTemplate</strong>）,让JDBC更加易用和维护，也降低了代码的耦合度。接下来让我们来了解一下Spring是怎么封装的JDBC。<h3 id="Spring的数据访问哲学"><a href="#Spring的数据访问哲学" class="headerlink" title="Spring的数据访问哲学"></a>Spring的数据访问哲学</h3>为了避免持久化的逻辑分散到应用的各个组件中，最好将数据访问的功能放到一个或多个专注与此项任务的组件中。这样的组件通常称为数据<strong>访问对象（Data Access object DAO）</strong> 或<strong>Repository</strong>。<br>为了避免应用于特定的数据访问策略耦合在一起，编写良好的Repository应该以<strong>接口</strong>的方式暴露功能。如下图。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac879cb0?w=945&amp;h=382&amp;f=png&amp;s=171916" alt="在这里插入图片描述"></li></ol><p>服务对象通过接口来访问Repository。<a href="https://blog.csdn.net/xueba8/article/details/84071837" target="_blank" rel="noopener">【设计模式】MVC模式与三层架构关系</a></p><h3 id="数据访问模板化"><a href="#数据访问模板化" class="headerlink" title="数据访问模板化"></a>数据访问模板化</h3><p>在我们进行数据访问的过程中，我们都需要<strong>获取</strong>到一个数据存储的连接并在处理完成后<strong>释放</strong>。这些都是在数据访问处理过程中固定步骤，但是每种数据访问的方法又会有些不同，我们会查询不同的对象或以不同的方式更新数据，这都是数据访问过程中变化的部分。<br>Spring将数据访问过程中固定的和可变的部分明确划分为两个不同的类：<strong>模板（template）</strong> 和<strong>回调（callback）</strong>。模板管理过程中固定的部分，而回调处理自定义的数据访问代码。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac78e04c?w=875&amp;h=446&amp;f=png&amp;s=319992" alt="在这里插入图片描述"></p><h2 id="传统JDBC和Spring封装的JdbcTemplate区别"><a href="#传统JDBC和Spring封装的JdbcTemplate区别" class="headerlink" title="传统JDBC和Spring封装的JdbcTemplate区别"></a>传统JDBC和Spring封装的JdbcTemplate区别</h2><table><thead><tr><th>操作</th><th>传统JDBC</th><th>JdbcTemplate</th></tr></thead><tbody><tr><td>获取JDBC连接</td><td>√</td><td></td></tr><tr><td>声明SQL</td><td>√</td><td>√</td></tr><tr><td>预编译SQL</td><td>√</td><td></td></tr><tr><td>执行SQL</td><td>√</td><td></td></tr><tr><td>处理结果集</td><td>√</td><td>√</td></tr><tr><td>释放结果集</td><td>√</td><td></td></tr><tr><td>释放Statement</td><td>√</td><td></td></tr><tr><td>提交事务</td><td>√</td><td></td></tr><tr><td>处理异常并回滚事务</td><td>√</td><td></td></tr><tr><td>释放JDBC连接</td><td>√</td></tr></tbody></table><p>由表格我们就可以看出，JdbcTemplate 只需程序员关注需要<strong>执行的SQL</strong>和<strong>获取结果</strong>，而别的部分操作则不需要程序员关注，模板都帮处理好了，这样一看，JdbcTemplate 是不是比JDBC用起来更加方便呀？<br>本文介绍的是Spring对JDBC的支持（JdbcTemplate），至于Spring对JPA的支持（HibernateTemplate、JpaTemplate后面文章再写）</p><blockquote><p>欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准&lt;strong&gt;接口&lt;/strong&gt; JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的&lt;strong&gt;接口类&lt;/strong&gt;，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。&lt;/p&gt;
&lt;p&gt;利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在&lt;strong&gt;Java对象&lt;/strong&gt;与&lt;strong&gt;关系数据&lt;/strong&gt;之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为&lt;strong&gt;对象-关系映射（Ovject/Relation Mapping，ORM）&lt;/strong&gt;。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了&lt;strong&gt;JPA（Java Persistence API）&lt;/strong&gt;。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解自动装配Bean</title>
    <link href="http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/"/>
    <id>http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/</id>
    <published>2018-11-17T07:50:54.000Z</published>
    <updated>2018-11-25T07:53:30.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>上文：<a href="http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/">Spring自动装配Bean实现hello world</a> 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。</p><h2 id="开启自动化装配Bean"><a href="#开启自动化装配Bean" class="headerlink" title="开启自动化装配Bean"></a>开启自动化装配Bean</h2><h3 id="通过xml开启"><a href="#通过xml开启" class="headerlink" title="通过xml开启"></a>通过xml开启</h3><p>需要开启注解装配功能，则需要在web.xml中加入配置<code>&lt;context:annotation-config /&gt;</code>或者<code>&lt; component-scan /&gt;</code>，配置代码的如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans </span><br><span class="line">//...</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">//...</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">&lt;context:annotation-config /&gt; //或者&lt;component-scan /&gt;</span><br><span class="line">//...</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这两者的区别如下：</p><p> &lt;context:annotation-config&gt;：<br> :  是用于<strong>激活</strong>那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式），是对已注册Bean的进行操作的配置，也就是说，Bean需要首先通过某种方式（比如Xml配置，或者其他注解）被注册，然后使用这个配置，可以对已注册的Bean进行进一步操作（比如注入到某个类的内部），也就是说，这个配置是用于“激活”已注册的Bean的，让已注册的Bean开始工作。</p><p>&lt;context:component-scan&gt;：<br>:  除了具有<code>&lt;context:annotation-config&gt;</code>的功能之外，<code>&lt;context:component-scan&gt;</code>还可以在指定的package下扫描以及注册javabean</p><p> 另外compontent-scan可以扫描类、方法、属性上面的注解； compontent-config只扫描属性上面的注解。</p><h3 id="通过JAVA代码开启"><a href="#通过JAVA代码开启" class="headerlink" title="通过JAVA代码开启"></a>通过JAVA代码开启</h3><p>创建Config.java，Config配置类，首先需要添加<code>@Configuration</code> ，声明这个类为配置类，然后添加<code>@ComponentScan()</code><br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan()</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36cf86506?w=1402&amp;h=601&amp;f=png&amp;s=112504" alt="在这里插入图片描述"><br>@Configuration<br>: 表明这个类是<strong>配置类</strong>，这个类相当于web.xml的作用。<code>@Configuration</code>标注在类上，相当于把该类作为spring的xml配置文件中的<code>&lt;beans&gt;</code>，作用为：配置spring容器(应用上下文)。</p><p>@ComponentScan()<br>:  作用是，开启<strong>组件扫描</strong>，去寻找带有@Component注解的类，并且为其创建Bean。<code>ComponentScan()</code>可以扫描指定的包，例如<code>@ComponentScan(basePackages = &quot;cn.zhenta.www.service.impl&quot;)</code>则会扫描<code>cn.zhenta.www.service.impl</code>这个包以及这个包下的所有子包。</p><h2 id="通过注解声明组件类"><a href="#通过注解声明组件类" class="headerlink" title="通过注解声明组件类"></a>通过注解声明组件类</h2><p>在需要声明为组件类的<strong>类</strong>（只适用于类）上，添加<code>@Component</code>注解，这个注解表明该类会作为组件类（ComponentScan() 既通过这个注解扫描），并告知Spring要为这个类创建Bean。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestA;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component()</span><br><span class="line">public class TestA</span><br><span class="line">&#123;</span><br><span class="line">    public void pri()&#123;</span><br><span class="line">        System.out.println(&quot;hi &quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6582ec?w=1254&amp;h=570&amp;f=png&amp;s=97323" alt="在这里插入图片描述"><br>其中不只有<code>@Component</code>这个注解，还有如下：<br><code>@Service</code>用于标注业务层组件<br><code>@Controller</code>用于标注控制层组件（如struts中的action）<br><code>@Repository</code>用于标注数据访问组件，即DAO组件<br><code>@Component</code>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="通过注解实现自动装配"><a href="#通过注解实现自动装配" class="headerlink" title="通过注解实现自动装配"></a>通过注解实现自动装配</h2><p>简单来说，自动装配就是让Spring自动满足Bean<strong>依赖</strong>的一种方法，在满足依赖的过程中，会在Spring应用上下文中寻找匹配某个Bean需求的其他Bean。为了声明要进行自动装配，我们可以借助Spring的<code>@Autowired</code>注解。</p><p>其中<code>@Autowired</code>可以作用在多个地方</p><ol><li>setter方法</li><li>构造方法</li><li>成员属性</li><li>任意方法</li></ol><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestB;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestA.TestA;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class TestB &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private TestA testA;</span><br><span class="line">    public void priTestA()&#123;</span><br><span class="line">        this.testA = testA;</span><br><span class="line">        testA.pri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6b5f36?w=1261&amp;h=647&amp;f=png&amp;s=134125" alt="在这里插入图片描述"></p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>以上已经开启自动化装配、注解声明组件类、注解实现自动化装配，那么我们该如何在测试这些配置好了没有呢，这就需要用到我们的测试类了。首先创建一个TestC.java 作为我们的测试类，在类上添加<code>@ContextConfiguration(classes = cn.zhenta.www.service.impl.TestB.TestB.class)</code>其中<strong>classes = 你的配置类的命名空间</strong>，再添加<code>@RunWith(SpringJUnit4ClassRunner.class)</code>，那这两个注解有什么作用呢？</p><p>@ContextConfiguration()<br>:  <code>@ContextConfiguration()</code>注释标签是 Spring test context 提供的，<strong><em>用来指定 Spring 配置信息的来源</em></strong>，支持指定 XML 文件位置或者 Spring 配置类的命名空间。</p><p>@RunWith()<br>:  <code>@RunWith()</code> 注释标签是 Junit 提供的，用来说明此测试类的运行者，这里用了 SpringJUnit4ClassRunner，这个类是一个针对 Junit 运行环境的自定义扩展，用来标准化在 Spring 环境中 Junit4.5 的测试用例，例如支持的注释标签的标准化。</p><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestB.TestB;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestB testB = new TestB();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        testB.priTestA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36f2501b4?w=1383&amp;h=586&amp;f=png&amp;s=129001" alt="在这里插入图片描述"></p><p>运行测试类，最后输出：hi。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;上文：&lt;a href=&quot;http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/&quot;&gt;Spring自动装配Bean实现hello world&lt;/a&gt; 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。&lt;/p&gt;
&lt;h2 id=&quot;开启自动化装配Bean&quot;&gt;&lt;a href=&quot;#开启自动化装配Bean&quot; class=&quot;headerlink&quot; title=&quot;开启自动化装配Bean&quot;&gt;&lt;/a&gt;开启自动化装配Bean&lt;/h2&gt;&lt;h3 id=&quot;通过xml开启&quot;&gt;&lt;a href=&quot;#通过xml开启&quot; class=&quot;headerlink&quot; title=&quot;通过xml开启&quot;&gt;&lt;/a&gt;通过xml开启&lt;/h3&gt;&lt;p&gt;需要开启注解装配功能，则需要在web.xml中加入配置&lt;code&gt;&amp;lt;context:annotation-config /&amp;gt;&lt;/code&gt;或者&lt;code&gt;&amp;lt; component-scan /&amp;gt;&lt;/code&gt;，配置代码的如下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;beans &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;context:annotation-config /&amp;gt; //或者&amp;lt;component-scan /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
</feed>
