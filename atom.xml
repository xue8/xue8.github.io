<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>薛8的个人网站 - xue8&#39;s Blog - DDND.CN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ddnd.cn/"/>
  <updated>2018-12-25T12:26:28.800Z</updated>
  <id>http://ddnd.cn/</id>
  
  <author>
    <name>薛8</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我是如何一步步解决问题 让Spring MVC返回HTML类型的视图</title>
    <link href="http://ddnd.cn/2018/12/25/springmvc-view-webxml/"/>
    <id>http://ddnd.cn/2018/12/25/springmvc-view-webxml/</id>
    <published>2018-12-25T10:09:29.000Z</published>
    <updated>2018-12-25T12:26:28.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi08g83uwj20jd05hmxe.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在折腾SSM，在捣鼓<code>Spring MVC</code>的时候，我想让Spring MVC的前端控制器（<code>DispatcherServlet</code>）给用户返回的是HTML类型的视图而不是JSP类型的视图，于是我按照常规的思路，把<code>Spring MVC</code>配置文件里面的视图解析器配置修改成HTML后缀的，然后就遇上了各种问题了……当然这些问题也都是我对Spring MVC不够了解才导致的，接下来详细说一下我遇到的问题以及解决过程。</p><a id="more"></a><h1 id="遇上问题"><a href="#遇上问题" class="headerlink" title="遇上问题"></a>遇上问题</h1><p>为了将返回给用户的视图从<code>JSP</code>改成<code>HTML</code>嘛，我就寻思着不就是把<code>Spring MVC</code>配置文件的视图配置改一下，把<code>.jsp</code>改成<code>.html</code>嘛。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi32ct15hj20ug06qdgc.jpg" alt=""></p><p>原来返回JSP的配置 Spring-MVC.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>因为我的JSP文件就是放在<code>web</code>根目录下，所以这里<code>prefix</code>就留空了。</p><p>修改成返回HTML的配置 Spring-MVC.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;suffix&quot; value=&quot;.html&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>然后写<code>Controller</code>将视图返回给前端控制器<code>DispatchServlet</code>看看能不能将HTML类型的视图返回给用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.nChat.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">    public String login()&#123;</span><br><span class="line">        return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>emmmm配置文件修改好了，按照我的想法，运行肯定没“问题”吧，可现实总是打我脸…可能是我太年轻了吧，运行之后报错，页面显示404<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">24-Dec-2018 21:57:35.769 警告 [http-nio-8080-exec-3] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:35.778 警告 [http-nio-8080-exec-2] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:35.854 警告 [http-nio-8080-exec-1] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</span><br><span class="line">24-Dec-2018 21:57:38.542 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</span><br></pre></td></tr></table></figure></p><p>错误的意思大概是前端控制器<code>DispatchServlet</code>找不到<strong>请求</strong>相对应的<code>mapping</code>，所以抛出<code>noHandlerFound</code>的异常<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi704yuqaj20h807kq2w.jpg" alt=""></p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>我们来分析看看为啥出现这个问题，首先贴出我们前端控制器<code>DispatchServlet</code>的工作流程先<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi7aoqiz7j20w70mbdk1.jpg" alt=""><br>流程用文字说明大概如下：</p><ol><li>用户发送请求，被 SpringMVC 的<strong>前端控制器</strong><code>DispatcherServlet</code> 拦截。</li><li>DispatcherServlet 收到请求后自己不进行处理，而是将请求转发给<strong>处理器映射器</strong><code>HandlerMapping</code>。</li><li><strong>处理器映射器</strong>根据请求的URL确定映射关系找出相应的<strong>处理器适配器</strong>，并且返回HandlerExecutionChain对象给前端控制器。<br>处理器映射器找到具体的<strong>处理器适配器</strong>，生成处理器对象及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li><li>DispatcherServlet根据3返回的<code>HandlerExecutionChain</code> 调用相应的<strong>处理器适配器</strong><code>HandlerAdapter</code>。</li><li>经过<strong>处理器适配器</strong><code>HandlerAdapter</code>调用具体的处理器（<code>Controller</code>，也叫后端控制器）。</li><li>Controller将结果封装到ModelAndView返回给HandlerAdapter。</li><li>HandlerAdapter将Controller执行结果ModelAndView返回给DispatcherServlet。</li><li>DispatcherServlet将ModelAndView传给<strong>视图解析器</strong><code>ViewReslover</code>,查询到相应的视图View。</li><li>ViewReslover解析后返回具体的View。</li><li>DispatcherServlet把Model交给View进行渲染（即将模型数据填充至视图中）。</li><li>DispatcherServlet响应用户。</li></ol><p>看完整个流程是不是知道问题出在哪了？？<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /</code>这个报错是出在了流程的第<code>3</code>步中，也就是<code>DispatchServlet</code>将请求转发给<code>HandlerMapping</code>后，<code>HandlerMapping</code>根据用户的请求<strong>找不到相应处理器映射器</strong>，所以就报了这个错误。那造成这个问题的原因会不会是我们没定义相应的<code>Controller</code>,导致也没有相应的处理器适配器，但是我们的<code>Controller</code>确实已经写好了，而且用返回JSP类型视图的代码测试数是正常的，没任何问题。</p><p>那我们一步步排错，我们在<code>Controller</code>中打印输出个字符，判断看看请求有没有进<code>Controller</code>先<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">public String login()&#123;</span><br><span class="line">    System.out.println(&quot;coming&quot;);</span><br><span class="line">    return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单粗暴，添加个<code>System.out.println(&quot;coming&quot;);</code>如果请求进来了我们就可以看到打印<code>coming</code>的内容，我们再重新运行项目测试看看<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyi8trsxpcj218b08175h.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">coming</span><br><span class="line">24-Dec-2018 23:07:38.974 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</span><br></pre></td></tr></table></figure></p><p>我们可以看到确实进来了，既然进来了，也就是说<strong>用户的请求</strong>至少已经执行到第<code>5</code>步了，那和前面说错误出现在第<code>3</code>步不是矛盾了吗？？莫急，继续往下分析，既然肯定用户的请求前<code>5</code>步都没问题的，那打印完<code>coming</code>后为什么又出现了本该出现在第<code>2</code>的错误呢？<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /register.html</code>，莫不是从第<code>5</code>步又跳到第<code>2</code>步了？</p><p>为了继续排查下去，我们继续添加个<code>Controller</code>对应<code>register.html</code>,看看他还报错不<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/login&quot;)</span><br><span class="line">    public String login()&#123;</span><br><span class="line">        System.out.println(&quot;coming&quot;);</span><br><span class="line">        return &quot;/register&quot;;  //返回web根目录下的register.html</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/register.html&quot;)</span><br><span class="line">    public String  aa()&#123;</span><br><span class="line">        System.out.println(&quot;coming aa&quot;);</span><br><span class="line">        return &quot;/aa&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新启动项目运行看看，输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">coming</span><br><span class="line">coming aa</span><br><span class="line">24-Dec-2018 23:29:00.759 警告 [http-nio-8080-exec-4] org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /aa.html</span><br></pre></td></tr></table></figure></p><p>输出表明既进到了<code>/login</code>又进到了<code>/register.html</code>,然而还是继续报错<code>org.springframework.web.servlet.DispatcherServlet.noHandlerFound No mapping for GET /aa.html</code>，一样的错误但是造成的错误原因不一样，上面的错误是因为找不到<code>/register.html</code>相应的mapping，然后我们把<code>/register.html</code>的Controller加上并且返回<code>/aa.html</code>，所以导致了这次错误找不到<code>/aa.html</code>相应的mapping。<br>看到这里是不是有点头绪了？我们在<code>Controller</code>返回<code>ModelAndView</code>给<code>HandlerAdapter</code>，<code>HandlerAdapter</code>再把<code>ModelAndView</code>返回给<code>DispatchServlet</code>，然后<code>DispatchServlet</code>再把<code>ModelAndView</code>传给视图解析器<code>ViewReslover</code>解析，也就是图中对应的第<code>6</code>到第<code>8</code>步，到这里之前都是没问题的，问题就出现在了第<code>9</code>步身上了，<code>ViewReslover</code>返回的视图名给<code>DispatchServlet</code>，<strong>重点来了!!!! <code>DispatchServlet</code>又把这个视图名当做一个新的请求，去交给<code>HandlerMapping</code>处理！！也就是图中的第<code>2</code>步，然后无限死循环下去……</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyixffzt07j216q0h1n3z.jpg" alt=""></p><h1 id="遇上新问题"><a href="#遇上新问题" class="headerlink" title="遇上新问题"></a>遇上新问题</h1><p>那问题又来了，为什么<code>DispatchServlet</code>会把它当成一个新的请求去处理呢？是不是我们Servlet配置的匹配规则写的不对，把返回的视图也拦截上了？我们来看看我们的Servlet配置<br><strong>项目的web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;Spring-MVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:*.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;Spring-MVC&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>匹配规则我写的是<code>/</code>，网上的很多文章也都说匹配规则<code>/</code>是不会拦截<code>.jsp、html</code>等格式的URL的，只会拦截<code>/login</code>这样的，而<code>/*</code>的匹配规则才会拦截所有请求包括<code>/login、.jsp、html</code>等，<strong>实践证明网上的这些观点都是错误的！</strong> 在这里我要更正一下，匹配规则<code>/</code>和<code>/*</code>都是会拦截所有请求（包括/login、.jsp、.html、.css等）也就是说他们俩的作用是一样的，既然说<code>.jsp、.html</code>都会拦截那为什么配置<code>/</code>规则的时候.jsp的能正常而.html的却被再次拦截导致死循环和配置<code>/*</code>不管是.jsp还是.html都再次被拦截从而进入死循环？</p><h1 id="拨开云雾见月明"><a href="#拨开云雾见月明" class="headerlink" title="拨开云雾见月明"></a>拨开云雾见月明</h1><p>既然配置<code>/</code>和<code>/*</code>的作用一样，为啥结果不一样呢？玄机就在<code>Tomcat</code>上，在<code>Tomcat</code>的<code>conf/</code>目录下，有个<code>web.xml</code>的文件。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj0235488j20nd0bugn2.jpg" alt=""><br>这个<code>web.xml</code>在Tomcat启动的时候就被加载进来，对所有webapp都有效，至于Tomcat下的web.xml和我们自己项目下的web.xml的区别和联系请自行到<strong>参考文章</strong>查看。这里我们详细分析一下Tomcat下的web.xml里面有啥，打开<code>conf/web.xml</code>看到他里面定义了个<strong>拦截<code>.jsp</code>和<code>.jspx</code>的Servlet</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj05hxdj0j20ud0irtak.jpg" alt=""><br><strong>Tomcat的conf/web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mappings for the JSP servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这个拦截规则也就是把所有的<code>.jsp</code>、<code>.jspx</code> URL请求都拦截在<code>servlet-name</code>为jsp的servlet中，我们搜索<code>&lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</code>查找一下servlet使用的类<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj09y1f5dj210x0hhdhy.jpg" alt=""><br><strong>Tomcat的conf/web.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;fork&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;3&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到这个拦截<code>.jsp</code>、<code>.jspx</code>的servlet使用的类是<code>org.apache.jasper.servlet.JspServlet</code>，也就是使用的类和我们项目下web.xml的servlet使用的<code>org.springframework.web.servlet.DispatcherServlet</code>类不一样，使用的类不一样也导致<code>.jsp</code>、<code>.jspx</code>的URL请求都不会走上图中DispatchServlet的流程，而是走它使用的类的具体流程，想了解的可以查询这个类的相关资料。到这里我们可以明确一点的就是我们项目下web.xml的servlet规则定义成<code>/</code>或者<code>/*</code>的时候<code>.jsp</code>正常来说应该是会被我们的项目下web.xml的servlet拦截的，但是根据servlet-mapping的匹配规则，<code>.jsp</code>、<code>.jspx</code>的URL都会先被Tomcat下web.xml里面的servlet拦截，而导致<code>.jsp</code>、<code>.jspx</code>不会被我们项目的web.xml里面的servlet拦截。<strong>这也就是为什么匹配规则写成<code>/</code>的时候<code>.jsp</code>会被忽略不进行拦截的原因，</strong>那问题又来了匹配规则写成<code>/*</code>的时候<code>.jsp</code>没有被忽略仍然进行拦截的呢？原因是规则<code>/*</code>会覆盖所有默认的servlet，从而将所有请求都拦截了下来<strong>，接下来我们可以修改Tomcat的web.xml下的servlet配置，让项目的web.xml下的servlet配置规则为<code>/</code>时候也支持返回<code>html</code>类型的视图</strong>Tomcat的conf/web.xml**<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- The mappings for the JSP servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>添加个规则<code>&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</code>，即URL是.html类型的话就走Tomcat的<code>&lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</code>这个servlet而不走我们项目的servlet，然后重新运行项目测试一下<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1k2ti1cj20fl0apmxp.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1l076vrj20u904uaae.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1ktek6vj20np08oq3j.jpg" alt=""></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj1llbr8zj20br0ceaah.jpg" alt=""><br>（请忽略乱码问题o(╥﹏╥)o） 看到了吧，确实可以通过<code>Controller</code>返回html类型的视图了吧，也就是在执行完第<code>9</code>步后返回的视图不再是被<code>org.springframework.web.servlet.DispatcherServlet</code>拦截，而是被<code>org.apache.jasper.servlet.JspServlet</code>拦截，从而跳出了<code>DispatchServlet</code>的魔抓不会再死循环了。<br>那以后想要返回.html类型的视图是不是都要去修改Tomcat的web.xml？也不用这样，我们只要在我们的项目web.xml中配置一个<strong>相同名</strong>的servlet即可，它会自动覆盖Tomcat的web.xml的，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这样配，但是会报错<code>Cannot resolve Servlet &#39;jsp&#39;</code>，我也不懂为啥，知道的朋友可以补充下。Tomcat下的web.xml除了有名为<code>jsp</code>的servlet，还有一个大家应该都很熟悉的，就是名为<code>default</code>的servlet，它的作用和<code>jsp</code>的大概一样，大家知道它是拿来配置静态资源的，却很少了解它怎么来的<br><strong>Tomcat的conf/web.xml</strong><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj7w31ct9j20yx0huwgb.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyj817fqjej20nd06rmxg.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.catalina.servlets.DefaultServlet&lt;/servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;debug&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;0&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;listings&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- The mapping for the default servlet --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>我们也可以用它来代替<code>jsp</code>的servlet来达到不拦截.html类型的视图，同样我们在项目的web.xml下配置名为<code>default</code>的servlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;default&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></p><p>这样即可让.html的请求都不会被前端控制器DispatchServlet拦截到。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当然要返回.html类型的视图也不是只有这种方法，也可以通过更换视图解析器，但是我觉得这样没必要，因为<code>InternalResourceViewResolver</code>视图解析器本身就是支持.html的，只是我们没处理正确而已。通过这次出现的问题，引发我了对Spring MVC的进一步了解，也把分析、解决问题的过程记录下，希望能让自己印象更深刻点，也希望能帮助到大家。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/tangwangming/p/8571551.html" target="_blank" rel="noopener">servlet-mapping url-pattern / 和 /*区别</a></p><p><a href="https://blog.csdn.net/yucdsn/article/details/78729912" target="_blank" rel="noopener">Tomcat文件夹下的context.xml和web.xml</a></p><p><a href="https://www.cnblogs.com/tv151579/p/3500880.html" target="_blank" rel="noopener">web.xml中出现<servlet-name>default</servlet-name>是什么意思？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fyi08g83uwj20jd05hmxe.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这两天在折腾SSM，在捣鼓&lt;code&gt;Spring MVC&lt;/code&gt;的时候，我想让Spring MVC的前端控制器（&lt;code&gt;DispatcherServlet&lt;/code&gt;）给用户返回的是HTML类型的视图而不是JSP类型的视图，于是我按照常规的思路，把&lt;code&gt;Spring MVC&lt;/code&gt;配置文件里面的视图解析器配置修改成HTML后缀的，然后就遇上了各种问题了……当然这些问题也都是我对Spring MVC不够了解才导致的，接下来详细说一下我遇到的问题以及解决过程。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring MVC" scheme="http://ddnd.cn/categories/Spring-MVC/"/>
    
    
      <category term="Spring MVC" scheme="http://ddnd.cn/tags/Spring-MVC/"/>
    
      <category term="web.xml" scheme="http://ddnd.cn/tags/web-xml/"/>
    
      <category term="servlet" scheme="http://ddnd.cn/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>RPC和RESTful API入门篇</title>
    <link href="http://ddnd.cn/2018/12/19/rpc-and-restful/"/>
    <id>http://ddnd.cn/2018/12/19/rpc-and-restful/</id>
    <published>2018-12-19T05:31:55.000Z</published>
    <updated>2018-12-19T07:58:17.922Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyaudx4yrxj209u03yt8m.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两天在和同学谈到RPC、RESTful时候发现自己对这两者并不是很理解，于是查阅了网上相关资料加上自己的理解写下本篇文章以加深印象，由于本人水平有限，若对这两者的理解有不妥之处望指出。</p><a id="more"></a><h1 id="什么是REST和RESTful"><a href="#什么是REST和RESTful" class="headerlink" title="什么是REST和RESTful"></a>什么是REST和RESTful</h1><p>在认识RESTful之前，我们先科普一下REST。</p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST即Representational State Transfer的缩写，<strong>是基于HTTP协议之上的一组约束和属性</strong>，翻译过来是<strong>表现层状态转移</strong>。REST是一种<em>设计风格</em>（并非一种标准），描述的是在网络中Client和Server的一种交互形式，目的是便于<strong>不同</strong>的软件/程序在网络中互相传递消息。按照我的理解：<strong><em>我们通过URI定位到服务器上的资源（例如文本、图片、服务），然后对资源进行某种操作（CRUD）并且返回足够的信息描述服务器的状态（比如：状态码）让客户端知道如何处理，资源传递给客户端并且以某种形式表现（比如JSON、HTML、XML、PNG等）出来</em></strong>，而REST则是将URI的命名风格、对资源操作的实现方式、操作之后返回什么信息和资源以哪种形式表现出来等总结成了一种设计风格，让大家都使用这种设计风格去实现这些设计，当然REST的设计风格不止我指出的这几个，只是这几个是要点。<br>REST设计的风格遵循以下几点：</p><ol><li><strong>利用HTTP方法让接口统一化</strong><br>REST充分利用HTTP自身的GET、POST、PUT、DELETE的方法实现接口的统一化，比如对同一个资源进行CRUD操作时：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /posts     获取文章             GET /getPosts       获取文章 </span><br><span class="line">POST /posts    发布文章             GET /addPosts       发布文章 </span><br><span class="line">PUT /posts     修改文章             GET /editPosts      修改文章 </span><br><span class="line">DELETE /posts  删除文章             GET /deletePosts    删除文章</span><br></pre></td></tr></table></figure></li></ol><p>上面的设计中，左边的是符合REST设计风格的，右边的是不符合REST设计风格的。URI只需将资源准确无误的暴露出来就可以，而不需要加上动作词，而动作则体现在HTTP的GET、POST、PUT、DELETE方法中，其中URI还推荐使用复数。</p><ol start="2"><li><strong>利用HTTP状态码返回状态信息</strong><br>下面举例几个HTTP Status Code和表示的什么：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Status Code: 200 OK</span><br><span class="line">Status Code: 400 Bed Request</span><br><span class="line">Status Code: 404 Not Found</span><br><span class="line">Status Code: 500 Internal Server Error</span><br></pre></td></tr></table></figure></li></ol><p>其中2XX的状态码表示请求已成功被服务器已接收、理解、并接受<br>3XX的状态码表示重定向<br>4XX的状态码表示客户端错误<br>5XX的状态码表示服务器错误</p><ol start="3"><li><p><strong>利用HTTP报头告知对方如何处理本次请求（相应）</strong><br>HTTP报头是描述客户端与服务器之间的请求或者响应应该如何处理本次请求的，比如该用什么表现形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Authorization 认证报头 </span><br><span class="line">Cache-Control 缓存报头 </span><br><span class="line">Cnotent-Type  消息体类型报头</span><br></pre></td></tr></table></figure></li><li><p><strong>无状态</strong><br>REST设计风格要求Server无状态，无状<strong>态并不等于</strong>不保存用户的状态，而是指服务器不保存请求状态（会话信息），客户端必须每次都<strong>带上自己的状态</strong>去请求服务器，如果确实要维持用户的状态，也应由客户端负责，例如：在服务端上通过Cookie保存Token，之后的请求中都带上Token，而这个Token就保存有了用户的状态（如登录信息）。这里需要注意的是：</p></li></ol><ul><li>通过Session保存状态<strong>不是REST设计风格</strong>，因为Session是将状态信息（用户信息、过期时间等）保存在了服务器上，比如用户登录成功后，会将Session信息保存在服务器，然后返回个SessionID给客户端并且将SessionID保存在Cookies中,之后的请求客户端都会通过Cookies传递SessionID给服务器，服务器根据客户端传来的SessionID去匹配之前保存的Session状态信息，所以这个状态是保存在服务器上的，是靠服务器维持的，所以不是REST设计风格。</li><li>通过Token保存状态<strong>是REST设计风格</strong>，因为状态信息（用户信息、过期时间等）都是保存在Token中，而Token又是保存在客户端中（如Cookies），比如用户登录成功后，服务器会返回一个Token（包含了用户信息、过期时间等）给服务端，服务端将Token保存在Cookies中，之后的请求客户端都会取出Token放到Request Headers中传给服务器，服务器验证Token的有效性即可。<blockquote><p>看到这里是不是能理解*<em>状态转移</em>这个词了？就是状态通过客户端来转移。</p></blockquote></li></ul><p>简单的来说就是状态信息保存在服务器的就是<strong>有状态的</strong>，而状态信息保存在客户端的就是<strong>无状态的</strong>。通过REST的无状态原则恰好有利于实现负载均衡，在分布式的Web系统上，有多个可用的服务器，每个服务器都可以处理客户端发来的请求，及时有一台服务器宕机，无状态的请求可以交给别的服务器处理，这是有状态的请求所做不到的。</p><h2 id="什么是RESTful"><a href="#什么是RESTful" class="headerlink" title="什么是RESTful"></a>什么是RESTful</h2><p>理解完REST那我们就很容易理解RESTful了，RESTful即实现REST设计风格的一种架构，如RESTful API（REST设计风格的API）</p><h1 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h1><p>RPC就是Remote Procedure Call的简称，翻译成中文就是<strong>远程过程调用</strong>，什么是远程过程调用？举个例子：有两台服务器A、B，一个应用部署在A服务器上，另一个应用部署在B服务器上，A服务器上的应用想要调用B服务器上应用所提供的方法、函数，那么这个调用过程就需要网络来支撑，整个调用过程可以用下图表示。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fyc1ig0m9tg207c072jr9.jpg" alt=""></p><h2 id="RPC分类"><a href="#RPC分类" class="headerlink" title="RPC分类"></a>RPC分类</h2><p>其中RPC分为两种：</p><ol><li><strong>同步调用</strong><br>在上面举的例子中，A服务器的应用调用B服务器上应用的方法、函数后，A服务器的应用会处在<strong>阻塞状态</strong>，只有等到B服务器上的应用通过网络返回结果后，A服务器的应用才会继续往下执行。</li><li><strong>异步调用</strong><br>在上面举的例子中，A服务器的应用调用B服务器上应用的方法、函数后，A服务器的应用并不会进入阻塞状态等待结果的返回，可以通过回调通知等方式获得返回的结果。</li></ol><h2 id="RPC的网络通信问题"><a href="#RPC的网络通信问题" class="headerlink" title="RPC的网络通信问题"></a>RPC的网络通信问题</h2><p>我们知道在RPC调用的时候需要网络来支撑，那么以何种方式来实现通信呢。</p><ol><li><strong>HTTP协议</strong><br>A服务器的应用可以通过HTTP将数据传输到B服务器，B服务器接收到数据后执行数据中调用的指定方法、函数，例如谷歌的gRPC就是在HTTP上进行数据传输的。但是由于HTTP报头中有太多不需要的信息造成带宽的浪费，所以很多人都是用比HTTP传输效率高的TCP、UDP进行数据传输。</li><li><strong>TCP、UDP</strong><br>例如著名的Netty就是基于TCP、UDP上进行传输的，当然你也可以不使用框架，自己编写Socket实现网络数据传输。</li></ol><h1 id="RESTful-API和RPC"><a href="#RESTful-API和RPC" class="headerlink" title="RESTful API和RPC"></a>RESTful API和RPC</h1><h2 id="RESTful-API和RPC区别和关系"><a href="#RESTful-API和RPC区别和关系" class="headerlink" title="RESTful API和RPC区别和关系"></a>RESTful API和RPC区别和关系</h2><p>在我理解中，RESTful API和RPC是两种完全不同概念的东西，是没法放在一起比较的，如果硬要将它俩比较，我认为RESTful是RPC的一种实现，即RPC包括RESTful API，但RPC不等于RESTful API。</p><ul><li>RPC：我认为RPC是一种为实现远程调用而提出<strong>一种思想</strong>，至于你用什么方式去达到目的都可以（例如：用什么网络协议来传输数据看自己的选择）。</li><li>RESTful API：符合REST设计风格的一种接口架构，它也是通过网络进行的远程调用，但是远程调用仅限于HTTP。<h2 id="RESTful-API和RPC用途"><a href="#RESTful-API和RPC用途" class="headerlink" title="RESTful API和RPC用途"></a>RESTful API和RPC用途</h2>既然RESTful API和RPC都可以实现远程调用，那我们应该在这两者之中如何抉择呢？</li><li>RESTful API：主要用在为第三方提供调用自家系统的一种途径。</li><li>RPC：主要用在自家系统之间的互相调用，即实现系统的分布式。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这里我仅是以我掌握的知识给大家介绍RPC和RESTful，给初学者大概了解一下RPC和RESTful，若文中有不妥的地方希望大家指出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fyaudx4yrxj209u03yt8m.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这两天在和同学谈到RPC、RESTful时候发现自己对这两者并不是很理解，于是查阅了网上相关资料加上自己的理解写下本篇文章以加深印象，由于本人水平有限，若对这两者的理解有不妥之处望指出。&lt;/p&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://ddnd.cn/categories/Technique/"/>
    
    
      <category term="RPC" scheme="http://ddnd.cn/tags/RPC/"/>
    
      <category term="RESTful" scheme="http://ddnd.cn/tags/RESTful/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合 附源码</title>
    <link href="http://ddnd.cn/2018/12/16/SSM-integration/"/>
    <id>http://ddnd.cn/2018/12/16/SSM-integration/</id>
    <published>2018-12-16T07:33:50.000Z</published>
    <updated>2018-12-17T13:18:23.750Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8muss9bdj20m8078mx7.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经介绍<a href="https://ddnd.cn/2018/12/01/Spring-Mybatis/">Spring和Mybatis整合</a>，而本篇介绍在IDEA下Spring、Spring MVC、Mybatis（SSM）三个框架的整合，在阅读本篇之前，建议大家先去了解一下Spring、Spring MVC、Mybatis（<a href="https://ddnd.cn/categories/">三大框架基础入门传送门</a>），会达到事半功倍的效果。至于Spring MVC相对于Servlet、JSP的优点这里就不累赘了，大家可以上网查阅相关资料。本篇注重整合思路、整合过程以及整合过程中出现的坑。</p><a id="more"></a><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8nvkchhzj20ca0ofabe.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加spring核心依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  `password` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `users_email_unique` (`email`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=240 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据库对应的实体类"><a href="#新建数据库对应的实体类" class="headerlink" title="新建数据库对应的实体类"></a>新建数据库对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类：User.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建Mapper-xml文件和Mapper接口（Dao层）"><a href="#新建Mapper-xml文件和Mapper接口（Dao层）" class="headerlink" title="新建Mapper.xml文件和Mapper接口（Dao层）"></a>新建Mapper.xml文件和Mapper接口（Dao层）</h1><blockquote><p>这里注意Mapper.xml文件名要和Mapper接口的名字相同</p></blockquote><p>1.Mapper接口：UserDao.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public User getUserByEmail(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里为了测试，仅编写一个接口，即通过用户email查询到用户的信息。</p><ol start="2"><li>Mapper.xml文件：UserDao.xml<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.UserDao&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUserByEmail&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li></ol><p>这里需要注意用一下：我们使用的是IDEA，而IDEA默认是不编译<code>main/src/java</code>目录下的xml文件的，即在编译的时候不会把将这些xml一块打包进classes文件，而是<strong>直接丢弃</strong>。为了解决这个问题，有两种方法，1.将xml文件都放到<code>resources</code>目录下。2.配置maven的pom文件。这里我就用第一种方法，将mapper.xml文件都放到resources目录。</p><h1 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h1><p>Mybatis-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>这里为<code>cn.ddnd.www.Entity.User</code>这个类设置个<code>User</code>的别名，这样直接使用<code>User</code>即可使用<code>cn.ddnd.www.Entity.User</code>这个类。</p><h1 id="Spring-MVC配置文件"><a href="#Spring-MVC配置文件" class="headerlink" title="Spring MVC配置文件"></a>Spring MVC配置文件</h1><p>Spring-mvc.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;prefix&quot; value=&quot;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>这里配置个<code>InternalResourceViewResolver</code>解析器，<code>prefix</code>属性指定资源文件的<strong>前缀</strong>，因为我的资源文件就放在<code>web</code>目录下，所以我这个属性留空，<code>suffix</code>属性配置资源页面的<strong>后缀</strong>。</p><h1 id="Spring-配置文件"><a href="#Spring-配置文件" class="headerlink" title="Spring 配置文件"></a>Spring 配置文件</h1><p>前面配置完Mybatis是不是觉得配置的代码很少、很简单？这是因为Mybatis的一些配置都放在Spring中配置啦！接下来看我们Spring的配置文件。<br>applicationContext.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context</span><br><span class="line">       http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:component-scan base-package=&quot;cn.ddnd.www&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入连接池数据源配置--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--注入mybatis配置信息 注意加上classpath 不然编译出来后是找不到Mybatis-config.xml的文件的--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--mapper.xml和mapper.java不在同一个目录 则配置此参数--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的Mapper映射器 这个是指定接口配置--&gt;</span><br><span class="line">    &lt;!--&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="line">        &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.UserDaoao&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描Mapper接口并注册为Bean 这个是通过扫描包来配置--&gt;</span><br><span class="line">    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>applicationContext</code>配置了<code>Mybatis</code>的<strong>数据源</strong>、<strong>SqlSessionFactory</strong>、<strong>Mapper映射器</strong>，为了简便我们选择用扫描包的方式注册。<br>这里需要注意一下几点：</p><ol><li>添加<code>mapperLocations</code>属性：因为我们把Mapper.xml文件和Mapper接口放在了不同的目录下，所以我们需要在配置Mybatis的<code>SqlSessionFactory</code>时候添加一个属性<code>mapperLocations</code>，即指定<code>mapper.xml</code>文件的路径。</li><li>启动扫描JavaBean：<code>&lt;context:component-scan base-package=&quot;cn.ddnd.www&quot;&gt;&lt;/context:component-scan&gt;</code>扫描指定包下的所有JavaBean，</li><li>添加XML命名空间：<code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code>,<code>xsi:schemaLocation=&quot;http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</code>，不然会出现通配符的匹配很全面, 但无法找到元素 ‘context:component-scan’ 的声明的问题。</li><li>路径前添加classpath：在指定XML路径的时候，需要以<code>classpath:文件路径</code>的形式，不然会出现XML文件找不到的问题，因为工程编译后XML文件都是放在<code>classes</code>的文件夹下。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8pkuz1huj20pk08ddgb.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8pl9cs0aj20nn08bwf4.jpg" alt=""></li></ol><h1 id="编写Service层"><a href="#编写Service层" class="headerlink" title="编写Service层"></a>编写Service层</h1><p>虽然前面已经编写了Dao层（UserDao）了，但是Dao层的工作主要是做数据持久化的，而Service层则负责业务模块的逻辑应用设计，Service调用已定义的Dao层的接口实现数据的持久化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Service;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Dao.UserDao;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class Uservice &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    public User getUserByEmail(String email) &#123;</span><br><span class="line">        return userDao.getUserByEmail(email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="编写Controller层"><a href="#编写Controller层" class="headerlink" title="编写Controller层"></a>编写Controller层</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Controller;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import cn.ddnd.www.Service.Uservice;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    Uservice uservice;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/&quot;)</span><br><span class="line">    public ModelAndView Index()&#123;</span><br><span class="line">        User user;</span><br><span class="line">        user = uservice.getUserByEmail(&quot;xue8@ddnd.cn&quot;);</span><br><span class="line">        return new ModelAndView(&quot;index&quot;, &quot;user&quot;, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里自动装配Service层的Uservice，实现数据查询，查询结果将在View层显示。这里为了方便，默认查询email为<a href="mailto:`xue8@ddnd.cn">`xue8@ddnd.cn</a>`的用户信息。</p><h1 id="编写View层"><a href="#编写View层" class="headerlink" title="编写View层"></a>编写View层</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: xueba</span><br><span class="line">  Date: 2018/11/29</span><br><span class="line">  Time: 17:34</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;SSM整合&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    email：$&#123;user.email&#125; &lt;br&gt;</span><br><span class="line">    id：$&#123;user.id&#125; &lt;br&gt;</span><br><span class="line">    password：$&#123;user.password&#125; &lt;br&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将查询出来的用户信息显示出来。</p><h1 id="配置Web-xml"><a href="#配置Web-xml" class="headerlink" title="配置Web.xml"></a>配置Web.xml</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;Spring&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:*.xml&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;Spring&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>在Web.xml中配置<strong>前端控制器</strong><code>DispatcherServlet</code>，负责发送每个请求到合适的处理程序。</p><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fy8q8xln3bj20lr08mq3b.jpg" alt=""></p><p>源码下载：<a href="https://github.com/xue8/Java-Demo/tree/master/SSM" target="_blank" rel="noopener">SSM整合例子</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fy8muss9bdj20m8078mx7.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面已经介绍&lt;a href=&quot;https://ddnd.cn/2018/12/01/Spring-Mybatis/&quot;&gt;Spring和Mybatis整合&lt;/a&gt;，而本篇介绍在IDEA下Spring、Spring MVC、Mybatis（SSM）三个框架的整合，在阅读本篇之前，建议大家先去了解一下Spring、Spring MVC、Mybatis（&lt;a href=&quot;https://ddnd.cn/categories/&quot;&gt;三大框架基础入门传送门&lt;/a&gt;），会达到事半功倍的效果。至于Spring MVC相对于Servlet、JSP的优点这里就不累赘了，大家可以上网查阅相关资料。本篇注重整合思路、整合过程以及整合过程中出现的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="Spring-MVC" scheme="http://ddnd.cn/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Mybatis整合</title>
    <link href="http://ddnd.cn/2018/12/01/Spring-Mybatis/"/>
    <id>http://ddnd.cn/2018/12/01/Spring-Mybatis/</id>
    <published>2018-12-01T10:14:46.000Z</published>
    <updated>2018-12-16T09:53:32.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxreyw9u7sj21y013edog.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在很多项目中，Mybatis都是和Spring配合起来一起发挥作用的，利用Spring的注入、基于接口编程等优势，将Mybatis的一些琐事交给Spring管理，而Mybatis可以更加注重在自身业务SQL语句上。Mybatis和Spring的整合思路如下：</p><ol><li>Mybatis将SqlSessionFactory交给Spring创建和管理<br><code>SqlSessionFactoryBean</code>代替了<code>SqlSessionFactoryBuilder</code>来创建<code>SqlSessionFactory</code>,SqlSessionFactoryBean实现了Spring的FactoryBean接口，Spring在应用启动的时候为你创建SqlSessionFactory对象，然后将它以SqlSessionFactory为命名来存储。</li><li>Mybatis将数据映射器Mapper交给Spring管理<br><code>MapperFactoryBean</code>封装了原有的<code>session.getMapper()</code>功能的实现，它可以把我们对应的Mapper接口<strong>注入</strong>到由Spring管理的Bean对象中(如Service Bean对象)，这样当我们需要使用到相应的Mapper对象时候，<code>MapperFactoryBean</code>会从它的getObject方法中获取到对应的Mapper.xml文件，即通过<strong>Mapper接口</strong>(xx.java)获取我们想要的<strong>Mapper对象</strong>。<a id="more"></a></li></ol><h1 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxtoptc78xj20b70eqmxo.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- spring版本号 --&gt;</span><br><span class="line">        &lt;spring.version&gt;4.2.5.RELEASE&lt;/spring.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 添加spring核心依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-oxm&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据表对应的实体类"><a href="#新建数据表对应的实体类" class="headerlink" title="新建数据表对应的实体类"></a>新建数据表对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类：User.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建Mapper-xml文件和Mapper接口"><a href="#新建Mapper-xml文件和Mapper接口" class="headerlink" title="新建Mapper.xml文件和Mapper接口"></a>新建Mapper.xml文件和Mapper接口</h1><p>Mapper.xml文件和Mapper接口最好在同一个路径下，不同路径的话需要配置的话需要配置<code>SqlSessionFactoryBean</code>的<code>configLocation</code>属性来指定Mapper.xml文件的路径。</p><ol><li><p>Mapper对象：IUser.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口：IUser.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h1><p>Mybatis-config.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><p>注意这里：如果Mybatis没有整合Spring的时候，数据源的配置信息需要在这个文件中配置好，现在配合Spring使用之后，数据源的配置也就交给了Spring来创建和管理。同时<code>typeAliases</code>别名也可以在Spring的<code>SqlSessionFactoryBean</code>中设置</p><h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><p>applicationContext.xml：</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置数据源--&gt;</span><br><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="配置Mybatis的SqlSessionFactory"><a href="#配置Mybatis的SqlSessionFactory" class="headerlink" title="配置Mybatis的SqlSessionFactory"></a>配置Mybatis的SqlSessionFactory</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--注入连接池数据源配置 必要属性--&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--注入mybatis配置信息--&gt;</span><br><span class="line">    &lt;property name=&quot;configLocation&quot; value=&quot;Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在配置<code>SqlSessionFactoryBean</code>的时候，有一个属性是<strong>必须</strong>的，就是<code>dataSource</code>,它表示用于连接数据库的数据源（可以是Tomcat DBCP、C3P0等连接池）。除了<code>SqlSessionFactoryBean</code>外，别的属性都不是必要的，如指定Mybatis配置文件的<code>configLocation</code>，指定Mapper.xml文件存放位置的属性<code>mapperLocations</code>，当我们的Mapper.xml文件跟Mapper接口处在同一个目录下时候，这个参数不用设置。<code>typeAliasesPackage</code>可以设置别名，一般对应我们的<strong>实体类</strong>所在的包，会<strong>自动扫描</strong>包下的类并且将类名设置为别名，如果有多个包的话，可以用逗号<code>,</code>或者分号<code>:</code>进行分隔。</p><h2 id="配置Mybatis数据映射器Mapper"><a href="#配置Mybatis数据映射器Mapper" class="headerlink" title="配置Mybatis数据映射器Mapper"></a>配置Mybatis数据映射器Mapper</h2><p>有两种方式将Mapper的接口注册成Bean，分别是单例注册、扫描注册</p><h3 id="通过指定Mapper的接口注册相应的Bean"><a href="#通过指定Mapper的接口注册相应的Bean" class="headerlink" title="通过指定Mapper的接口注册相应的Bean"></a>通过指定Mapper的接口注册相应的Bean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--配置Mybatis的Mapper映射器--&gt;</span><br><span class="line">&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--如果要配置多个的话 得新建MapperFactoryBean --&gt;</span><br><span class="line">&lt;!--&lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IBook&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;--&gt;</span><br></pre></td></tr></table></figure><ol><li><code>mapperInterface</code>：指定接口的路径，<code>MapperFactoryBean</code>创建的代理类实现了<code>IUser</code>接口（Spring将接口注入到Spring管理的Bean中），并且注入到应用程序中。注意IUser.xml文件的路径需要和IUser.java接口的路径相同，否则需要在<code>SqlSessionFactoryBean</code>中设置<code>configLocation</code>属性，指定.xml文件路径。</li><li><code>sqlSessionFactory</code>：指定<code>SqlSessionFactory</code>,用于提供SqlSession。</li></ol><h3 id="通过扫描指定包批量将Mapper的接口并注册相应的Bean"><a href="#通过扫描指定包批量将Mapper的接口并注册相应的Bean" class="headerlink" title="通过扫描指定包批量将Mapper的接口并注册相应的Bean"></a>通过扫描指定包批量将Mapper的接口并注册相应的Bean</h3><p>通过指定Mapper的接口进行注册Bean的话，我们的Mapper少的时候还可以应付，但是Mapper多了就显得很麻烦了，Mybatis-Spring为了我们提供了一个<code>MapperScannerConfigurer</code>的类，它可以自动扫描Mapper接口并注册为Bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--扫描Mapper接口并注册为Bean--&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><ol><li><code>basePackage</code>：指定接口所在的包的路径，<code>MapperScannerConfigurer</code>会自动扫描包下的接口并创建为<code>MapperFactoryBean</code>。</li><li>可以不指定<code>sqlSessionFactory</code>，因为<code>MapperScannerConfigurer</code>会创建在创建<code>MapperFactoryBean</code>之后自动装配<code>sqlSessionFactory</code>。但是如果你使用了一个以上的DataSource，那么自动装配<strong>失效</strong>。</li></ol><p>applicationContext.xml完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的SqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--注入连接池数据源配置--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--注入mybatis配置信息--&gt;</span><br><span class="line">        &lt;property name=&quot;configLocation&quot; value=&quot;Mybatis-config.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置Mybatis的Mapper映射器--&gt;</span><br><span class="line">    &lt;bean id=&quot;userBean&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--SqlSessionFactory是用来指定生成实现SqlSession接口的SqlSessionTemplate对象的--&gt;</span><br><span class="line">        &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!--mapperInterface指定我们Mapper对应的接口--&gt;</span><br><span class="line">        &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描Mapper接口并注册为Bean--&gt;</span><br><span class="line">    &lt;!--&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;property name=&quot;basePackage&quot; value=&quot;cn.ddnd.www.Dao&quot; /&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;/bean&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>test.jav：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">//        只需要加载Spring的配置文件</span><br><span class="line">        applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">//            获取Mapper对象</span><br><span class="line">            IUser iUser = (IUser) applicationContext.getBean(&quot;userBean&quot;);</span><br><span class="line">//            调用Mapper对象的方法</span><br><span class="line">            User user = iUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从这里可以看到单独使用Mybatis<a href="https://ddnd.cn/2018/11/29/Mybatis-Introduction/">Mybatis实现数据库操作</a>和Mybatis-Spring整合使用的区别，Mybatis将<code>SqlSessionFactory</code>和<code>数据映射器Mapper</code>交给Spring管理之后，我们不再需要sqlSession的获取和close，不在需要手动指定映射器。<br>运行结果：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxtoo9a2naj20s606s74v.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxreyw9u7sj21y013edog.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在很多项目中，Mybatis都是和Spring配合起来一起发挥作用的，利用Spring的注入、基于接口编程等优势，将Mybatis的一些琐事交给Spring管理，而Mybatis可以更加注重在自身业务SQL语句上。Mybatis和Spring的整合思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mybatis将SqlSessionFactory交给Spring创建和管理&lt;br&gt;&lt;code&gt;SqlSessionFactoryBean&lt;/code&gt;代替了&lt;code&gt;SqlSessionFactoryBuilder&lt;/code&gt;来创建&lt;code&gt;SqlSessionFactory&lt;/code&gt;,SqlSessionFactoryBean实现了Spring的FactoryBean接口，Spring在应用启动的时候为你创建SqlSessionFactory对象，然后将它以SqlSessionFactory为命名来存储。&lt;/li&gt;
&lt;li&gt;Mybatis将数据映射器Mapper交给Spring管理&lt;br&gt;&lt;code&gt;MapperFactoryBean&lt;/code&gt;封装了原有的&lt;code&gt;session.getMapper()&lt;/code&gt;功能的实现，它可以把我们对应的Mapper接口&lt;strong&gt;注入&lt;/strong&gt;到由Spring管理的Bean对象中(如Service Bean对象)，这样当我们需要使用到相应的Mapper对象时候，&lt;code&gt;MapperFactoryBean&lt;/code&gt;会从它的getObject方法中获取到对应的Mapper.xml文件，即通过&lt;strong&gt;Mapper接口&lt;/strong&gt;(xx.java)获取我们想要的&lt;strong&gt;Mapper对象&lt;/strong&gt;。
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis mapper动态代理方式</title>
    <link href="http://ddnd.cn/2018/11/30/Mybatis-Proxy/"/>
    <id>http://ddnd.cn/2018/11/30/Mybatis-Proxy/</id>
    <published>2018-11-30T13:33:59.000Z</published>
    <updated>2018-11-30T15:21:16.805Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxqf5iw6clj20m80cin0d.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在使用Mybatis的时候，获取需要执行的SQL语句的时候，都是通过调用xml文件来获取，例如：<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</code>。这种方式是通过字符串去调用标签定义的SQL语句，第一容易出错，第二是当xml当中的id修改过后你不知道在程序当中有多少个地方使用了这个id，需要手动一一修改。后来Mybatis推出了Mapper动态代理方式，只需要编写<strong>Mapper接口</strong>（相当于Dao层）,由Mybatis框架根据接口定义创建接口的动态代理对象。</p><a id="more"></a><h1 id="Mapper接口规范"><a href="#Mapper接口规范" class="headerlink" title="Mapper接口规范"></a>Mapper接口规范</h1><ol><li>Mapper.xml中的namespace和Mapper.java接口中的类路径相同，即<code>&lt;mapper namespace=&quot;cn.ddnd.www.Dao.User&quot;&gt;</code>对应的是<code>cn.ddnd.www.Dao</code>包下的<code>User</code>类。</li><li>Mapper.xml中的<code>select</code>ID要和Mapper.java接口中的类方法名相同，即<code>&lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</code>的<code>getUser</code>和<code>public User getUser(String email);</code>的<code>getUser</code>方法名对应。</li><li>Mapper.xml中的<code>parameterType</code>的类型要和Mapper接口中方法的<strong>传入参数类型</strong>相同。</li><li>Mapper.xml中的<code>resultType</code>的类型要和Mapper接口中方法的<strong>返回参数类型</strong>相同。</li></ol><h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="配置Mapper-xml"><a href="#配置Mapper-xml" class="headerlink" title="配置Mapper.xml"></a>配置Mapper.xml</h2><p>IUser.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Dao.IUser&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h2 id="配置Mapper-java接口"><a href="#配置Mapper-java接口" class="headerlink" title="配置Mapper.java接口"></a>配置Mapper.java接口</h2><p>IUser.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="编写Mybatis配置文件"><a href="#编写Mybatis配置文件" class="headerlink" title="编写Mybatis配置文件"></a>编写Mybatis配置文件</h2><p>Mybatis-config.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;cn/ddnd/www/Dao/IUser.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>test.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</span><br><span class="line">            User user = IUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</code>sqlSession会帮我们生成一个实现类（给IUser接口）,这样即可获取IUser接口的代理对象。<code>User user = IUser.getUser(&quot;xue8@qq.com&quot;);</code>代理对象方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxqf5iw6clj20m80cin0d.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在使用Mybatis的时候，获取需要执行的SQL语句的时候，都是通过调用xml文件来获取，例如：&lt;code&gt;User user = (User) sqlSession.selectOne(&amp;quot;cn.ddnd.www.Entity.User.getUser&amp;quot;, &amp;quot;xue8@qq.com&amp;quot;);&lt;/code&gt;。这种方式是通过字符串去调用标签定义的SQL语句，第一容易出错，第二是当xml当中的id修改过后你不知道在程序当中有多少个地方使用了这个id，需要手动一一修改。后来Mybatis推出了Mapper动态代理方式，只需要编写&lt;strong&gt;Mapper接口&lt;/strong&gt;（相当于Dao层）,由Mybatis框架根据接口定义创建接口的动态代理对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis接口注解实现映射</title>
    <link href="http://ddnd.cn/2018/11/30/Mybatis-Annotation/"/>
    <id>http://ddnd.cn/2018/11/30/Mybatis-Annotation/</id>
    <published>2018-11-30T07:50:28.000Z</published>
    <updated>2018-11-30T08:41:00.644Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq59jtsmsj20jk09mjr9.jpg" style="width:100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇文章介绍了xml文件映射SQL语句，即<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;)</code>，但是这种方式过于繁杂，所以我们本篇介绍使用<strong>注解</strong>和<strong>SQL语句返回值的接口</strong>（如：IUser.class），即可实现xml配置文件的功能。<br><a id="more"></a></p><h1 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h1><p>将工程新建成和上篇的一样<a href="https://ddnd.cn/2018/11/29/Mybatis-Introduction/">Mybatis实现数据库操作</a>，即把上篇的内容搬过来。</p><h1 id="修改成用注解方式"><a href="#修改成用注解方式" class="headerlink" title="修改成用注解方式"></a>修改成用注解方式</h1><ol><li><p>可以删除 <code>cn.ddnd.www.Entity</code>包下的<code>User.xml</code>，去掉<code>Mybatis-config.xml</code>的如下代码。因为此时<code>User.xml</code>已经没用了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;cn/ddnd/www/Entity/User.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure></li><li><p>新建<code>cn.ddnd.www.Dao</code>包，并且建立<code>IUser</code>接口和方法。<br>IUser.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line">public interface IUser &#123;</span><br><span class="line">    @Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span><br><span class="line">    public User getUser(String email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改测试类，即增加了<code>sqlSessionFactory.getConfiguration().addMapper(IUser.class);</code>，作用是注册SQL语句映射的接口，去掉<code>User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</code>，增加<code>IUser IUser = (IUser) sqlSession.getMapper(IUser.class); User user = IUser.getUser(&quot;xue8@qq.com&quot;);</code>即可。<br>text.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Dao.IUser;</span><br><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">//            注册SQL语句映射的接口</span><br><span class="line">            sqlSessionFactory.getConfiguration().addMapper(IUser.class);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">//            User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</span><br><span class="line"></span><br><span class="line">//            IUser.class只是个接口 Mybatis面向接口编程 只写接口 不用写接口的实现类 Mybatis帮我们去写实现类了！</span><br><span class="line">            IUser IUser = (IUser) sqlSession.getMapper(IUser.class);</span><br><span class="line">            User user = IUser.getUser(&quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq6alhwtcj20e90e6t9a.jpg" alt=""></p><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>运行测试类<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxq6bhkzs1j20pb06iq3a.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxq59jtsmsj20jk09mjr9.jpg&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上一篇文章介绍了xml文件映射SQL语句，即&lt;code&gt;User user = (User) sqlSession.selectOne(&amp;quot;cn.ddnd.www.Entity.User.getUser&amp;quot;, &amp;quot;xue8@qq.com&amp;quot;)&lt;/code&gt;，但是这种方式过于繁杂，所以我们本篇介绍使用&lt;strong&gt;注解&lt;/strong&gt;和&lt;strong&gt;SQL语句返回值的接口&lt;/strong&gt;（如：IUser.class），即可实现xml配置文件的功能。&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/29/Mybatis-Introduction/"/>
    <id>http://ddnd.cn/2018/11/29/Mybatis-Introduction/</id>
    <published>2018-11-29T13:49:11.000Z</published>
    <updated>2018-11-30T03:29:20.328Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg" style="width: 100%"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>什么是Mybatis？维基百科是这样定义的：Mybatis是一个Java持久化框架，它通过<strong>XML描述符</strong>或<strong>注解</strong>把对象与储存过程或SQL语句关联起来。通俗点说就是Mybatis是对<strong>JPA</strong>（Java持久化API，一个Java应用程序<strong>接口</strong>规范）的实现，是为了简化数据库操作过程而衍生出来的产品。<br>关于Mybatis的教程，推荐到官方文档看：<a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">Mybatis官方文档</a><br><a id="more"></a></p><h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpb9imgc0j20dn0ffq3j.jpg" alt=""></p><h1 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h1><p>本文中用到的Jar依赖包有：Mybatis包、Mysql驱动包。<br>pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;ddnd&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ddnd&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建Mybatis配置文件"><a href="#创建Mybatis配置文件" class="headerlink" title="创建Mybatis配置文件"></a>创建Mybatis配置文件</h1><p>新建Mybatis-config.xml文件，完成对Mybatis的配置。其中<code>cn/ddnd/www/Entity/User.xml</code>是包含要映射的类的xml配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</span><br><span class="line">    &lt;/typeAliases&gt;</span><br><span class="line">    &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type=&quot;JDBC&quot;/&gt;</span><br><span class="line">            &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/spring?serverTimezone=GMT%2B8&quot; /&gt;</span><br><span class="line">                &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">                &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=&quot;cn/ddnd/www/Entity/User.xml&quot;&gt;&lt;/mapper&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p><h1 id="创建数据库和数据表"><a href="#创建数据库和数据表" class="headerlink" title="创建数据库和数据表"></a>创建数据库和数据表</h1><p>本文中使用Mysql，为了演示方便，仅创建个简单的数据库spring，还有数据表user。<br>数据表创建SQL代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></p><h1 id="新建数据表对应的实体类"><a href="#新建数据表对应的实体类" class="headerlink" title="新建数据表对应的实体类"></a>新建数据表对应的实体类</h1><p>为了实现与数据库中的user表进行关系映射，这里新建一个User类。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package cn.ddnd.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="新建User类的对应映射层"><a href="#新建User类的对应映射层" class="headerlink" title="新建User类的对应映射层"></a>新建User类的对应映射层</h1><p>在User类的路径下新建User.xml完成对对象的映射。<code>resultType=&quot;User&quot;</code>中的<code>User</code>为Mybatis配置文件中的<code>&lt;typeAlias type=&quot;cn.ddnd.www.Entity.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;</code>所指定的<code>User</code>别名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;cn.ddnd.www.Entity.User&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;getUser&quot; parameterType=&quot;String&quot; resultType=&quot;User&quot;&gt;</span><br><span class="line">        select * from user where email = #&#123;email&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><p>新建一个测试类，查找邮箱是<a href="mailto:xue8@qq.com" target="_blank" rel="noopener">xue8@qq.com</a>的用户信息。<br>test.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import cn.ddnd.www.Entity.User;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import sun.awt.geom.AreaOp;</span><br><span class="line"></span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    private static Reader reader;</span><br><span class="line">    private static SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            reader = Resources.getResourceAsReader(&quot;Mybatis-config.xml&quot;);</span><br><span class="line">            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void a() throws IOException &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            User user = (User) sqlSession.selectOne(&quot;cn.ddnd.www.Entity.User.getUser&quot;, &quot;xue8@qq.com&quot;);</span><br><span class="line">            System.out.println(&quot;用户的邮箱是：&quot; + user.getEmail() + &quot;，用户的名称是：&quot; + user.getName() + &quot;，用户的密码是：&quot; + user.getPassword());</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>数据表信息：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbahhgrdj20cf04x3yk.jpg" alt=""></p><p>测试结果：<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxpbb0l37lj20on04i74i.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/e0e01e43gy1fxp9wjlfgej209q02ggm0.jpg&quot; style=&quot;width: 100%&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;什么是Mybatis？维基百科是这样定义的：Mybatis是一个Java持久化框架，它通过&lt;strong&gt;XML描述符&lt;/strong&gt;或&lt;strong&gt;注解&lt;/strong&gt;把对象与储存过程或SQL语句关联起来。通俗点说就是Mybatis是对&lt;strong&gt;JPA&lt;/strong&gt;（Java持久化API，一个Java应用程序&lt;strong&gt;接口&lt;/strong&gt;规范）的实现，是为了简化数据库操作过程而衍生出来的产品。&lt;br&gt;关于Mybatis的教程，推荐到官方文档看：&lt;a href=&quot;http://www.mybatis.org/mybatis-3/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mybatis官方文档&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://ddnd.cn/categories/Mybatis-Programming/"/>
    
    
      <category term="Mybatis" scheme="http://ddnd.cn/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring和Tomcat自带的连接池实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/"/>
    <id>http://ddnd.cn/2018/11/26/Spring-Tomcat-DBCP/</id>
    <published>2018-11-26T11:12:06.000Z</published>
    <updated>2018-11-26T12:51:04.053Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们已经用<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Spring和传统的Jdbc实现数据库操作</a>、<a href="https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/">Spring和JdbcTemplate实现数据库操作</a>。但是这些都是基于<strong>直连的数据源</strong>进行的，现在我们将介绍基于<strong>连接池的数据源</strong>进行数据库操作。前面几个步骤都相同。<br><a id="more"></a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlomtejdlj20k20dm3zg.jpg" alt=""></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br>User.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlop5qno4j20yy0hytb5.jpg" alt=""></p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。<br>UserDao.java：</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloq9510lj20s50haabs.jpg" alt=""><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><p>UserDaoImpl.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.naming.Context;</span><br><span class="line">import javax.naming.InitialContext;</span><br><span class="line">import javax.naming.NamingException;</span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private Connection connection;</span><br><span class="line"></span><br><span class="line">    //构造函数 向连接池获得连接</span><br><span class="line">    UserDaoImpl()&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Context initContext = new InitialContext();</span><br><span class="line">            DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br><span class="line">            connection = ds.getConnection();</span><br><span class="line">        &#125;catch (NamingException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(&quot;insert into user(name,email,password) values(?,?,?)&quot;);</span><br><span class="line">            ps.setString(1,user.getName());</span><br><span class="line">            ps.setString(2,user.getEmail());</span><br><span class="line">            ps.setString(3,user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">        &#125;catch (SQLException e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxloqs9hebj21c80i7tc1.jpg" alt=""><br>注意这里，通过JNDI查找到数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Context initContext = new InitialContext();</span><br><span class="line">DataSource ds = (DataSource) initContext.lookup(&quot;java:/comp/env/jdbc/dataSource&quot;);</span><br></pre></td></tr></table></figure></p><p>然后<code>connection = ds.getConnection();</code>在数据源中获取一个连接对象。</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><h2 id="配置context-xml"><a href="#配置context-xml" class="headerlink" title="配置context.xml"></a>配置context.xml</h2><p>在webapp中新建一个<code>META-INF</code>文件夹，然后新建个<code>context.xml</code>来配置数据源。<br>context.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;Context&gt;</span><br><span class="line">    &lt;Resource name=&quot;jdbc/dataSource&quot;</span><br><span class="line">              auth=&quot;Container&quot;</span><br><span class="line">              factory=&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span><br><span class="line">              type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">              url=&quot;jdbc:mysql://localhost:3306/spring&quot;</span><br><span class="line">              username=&quot;root&quot;</span><br><span class="line">              password=&quot;root&quot;</span><br><span class="line">              maxTotal=&quot;100&quot;</span><br><span class="line">              maxIdle=&quot;30&quot;</span><br><span class="line">              maxWaitMillis=&quot;1000&quot;</span><br><span class="line">              driverClassName=&quot;com.mysql.jdbc.Driver&quot;&gt;</span><br><span class="line">    &lt;/Resource&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6q1be5j213l0hgact.jpg" alt=""></p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>在web.xml中配置context.xml的引用关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">         </span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlp6j5a2vj20yj0iwju9.jpg" alt=""></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>由于TomcatDBCP是内置在Tomcat容器的连接池，所以要使用这个连接池得运行Tomcat，接下来我们编写在Tomcat容器中实现连接池操作数据库。</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><ol><li>新建一个测试类，来测试我们的连接池操作数据库。需要注意的是，<code>servlet</code>的生命周期是由<strong>servlet容器管理</strong>（如Tomcat）的，而Spring的Bean是由<strong>Srping容器</strong>管理的，所以我们在servlet容器中是无法使用<code>@Autowired</code>等Spring的注解的，那么如何在Spring容器外面获取到Spring容器的Bean实例呢？这就需要用到Spring为我们提供的<code>WebApplicationContextUtils</code>工具类，该工具的作用是获取到Spring容器的引用，进而获得我们需要的Bean实例。<br>test.java：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.test;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.impl.UserDaoImpl;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">public class test extends HttpServlet&#123;</span><br><span class="line"></span><br><span class="line">    private UserDaoImpl userDaoImpl;</span><br><span class="line"></span><br><span class="line">    public void doGet(HttpServletRequest args, HttpServletResponse args1) throws ServletException &#123;</span><br><span class="line">        //获取spring的bean</span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;context.xml&quot;);</span><br><span class="line">        this.userDaoImpl = (UserDaoImpl) applicationContext.getBean(&quot;userDaoImpl&quot;);</span><br><span class="line"></span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue811&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDaoImpl.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr03bqm4j21920ip77l.jpg" alt=""></p><ol start="2"><li>我们在resources中新建一个context.xml进行配置Bean。<br>context.xml：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;userDaoImpl&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr0b6970j212w0j6adc.jpg" alt=""></p><h2 id="Web配置"><a href="#Web配置" class="headerlink" title="Web配置"></a>Web配置</h2><p>在<code>web.xml</code>配置文件中添加servlet，来处理请求。我们将/index的请求让<code>cn.biecheng.www.test.test</code>测试类进行处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;cn.biecheng.www.test.test&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;index&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/index&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resource-ref&gt;</span><br><span class="line">        &lt;res-ref-name&gt;jdbc/dataSource&lt;/res-ref-name&gt;</span><br><span class="line">        &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">        &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line">    &lt;/resource-ref&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p>我们在IDEA运行后，在浏览器中输入<code>http://localhost:8080/index</code>，即可在数据库中发现数据已插入。<br><img src="https://ws1.sinaimg.cn/large/e0e01e43gy1fxlr50y7zhj20qc0ebmyi.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面我们已经用&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Spring和传统的Jdbc实现数据库操作&lt;/a&gt;、&lt;a href=&quot;https://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/&quot;&gt;Spring和JdbcTemplate实现数据库操作&lt;/a&gt;。但是这些都是基于&lt;strong&gt;直连的数据源&lt;/strong&gt;进行的，现在我们将介绍基于&lt;strong&gt;连接池的数据源&lt;/strong&gt;进行数据库操作。前面几个步骤都相同。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="TomcatDBCP" scheme="http://ddnd.cn/tags/TomcatDBCP/"/>
    
      <category term="连接池" scheme="http://ddnd.cn/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Spring和JdbcTemplate实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-JdbcTemplate/</id>
    <published>2018-11-19T09:49:06.000Z</published>
    <updated>2018-11-25T08:07:29.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看完<a href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/">Srping和传统JDBC实现数据库操作</a>之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的<code>JdbcTemplate</code>就很有必要了，当然JdbcTemplate也是<strong>直连的数据源</strong>。<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">传统JDBC和JdbcTemplate区别</a></p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    String email;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String name, String email, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail() &#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email) &#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc38c95c?w=1351&amp;h=622&amp;f=png&amp;s=107313" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dc8957d5?w=1060&amp;h=591&amp;f=png&amp;s=81342" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    public void setJdbcTemplate(JdbcTemplate jdbcTemplate)&#123;</span><br><span class="line">        this.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user) &#123;</span><br><span class="line">        jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2dcac1fea?w=1349&amp;h=635&amp;f=png&amp;s=113118" alt="在这里插入图片描述"><br>注意：看这里的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.update(&quot;insert into user(name,email,password) values(?,?,?)&quot;, user.getName(), user.getEmail(), user.getPassword());</span><br></pre></td></tr></table></figure></p><p>一行代码即可实现插入功能，和传统的JDBC相比实现插入真的是简单到不行吧！</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--装配UserDaoImpl类--&gt;</span><br><span class="line">    &lt;bean id=&quot;userDaoImple&quot; class=&quot;cn.biecheng.www.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置jdbcTemplate--&gt;</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--建立连接--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2deb347b9?w=1466&amp;h=623&amp;f=png&amp;s=169046" alt="在这里插入图片描述"><br>数据源配置的过程大概是这样的</p><ul><li>通过<code>org.springframework.jdbc.datasource.DriverManagerDataSource</code>建立<strong>数据源连接</strong>（连接对象Connection）</li><li>配置JdbcTemplate，其中<code>ref=&quot;dataSource&quot;</code>的dataSource为数据源连接的id</li><li>装配装配<code>UserDaoImpl</code>类，将JdbcTemplate对象<strong>注入</strong>到UserDaoImpl类的名为jdbcTemplate成员属性中</li></ul><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package cn.biecheng.www.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;DataSource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.biecheng.www&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2defc2e0a?w=1337&amp;h=605&amp;f=png&amp;s=134263" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import cn.biecheng.www.Dao.UserDao;</span><br><span class="line">import cn.biecheng.www.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(classes = &#123;cn.biecheng.www.Config.Config.class&#125;)</span><br><span class="line">public class test &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        User user;</span><br><span class="line">        user = new User(&quot;xue8&quot;, &quot;xue8&quot;, &quot;xue8&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f34894bc9e?w=1457&amp;h=634&amp;f=png&amp;s=142401" alt="在这里插入图片描述"></p><p>运行测试类。<br>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/167213f2df477aab?w=475&amp;h=155&amp;f=png&amp;s=12345" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看完&lt;a href=&quot;http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/&quot;&gt;Srping和传统JDBC实现数据库操作&lt;/a&gt;之后，是否觉得传统的JDBC太繁琐了，就算是只写一个简单的数据库插入功能都要写好多与业务无关的代码，那么使用spring封装的&lt;code&gt;JdbcTemplate&lt;/code&gt;就很有必要了，当然JdbcTemplate也是&lt;strong&gt;直连的数据源&lt;/strong&gt;。&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;传统JDBC和JdbcTemplate区别&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Srping和传统JDBC实现数据库操作</title>
    <link href="http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/"/>
    <id>http://ddnd.cn/2018/11/19/Spring-Jdbc-CRUD/</id>
    <published>2018-11-19T04:04:36.000Z</published>
    <updated>2018-11-25T08:06:20.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习完了<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">Spring对JDBC的支持</a>和<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">【JAVA】JAVA数据源</a>之后，那我们就可以进行数据库的操作了。</p><h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><p>首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：</p><ol><li>创建一个名为<code>spring</code>的数据库。</li><li>创建一个名为user的数据表，表包括id、email、name、password四个字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email` varchar(255) DEFAULT NULL,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `password` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b52d10e4?w=645&amp;h=469&amp;f=png&amp;s=51367" alt="在这里插入图片描述"></p><h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><p>创建一个<strong>实体类</strong>和数据库的表相对应（模型用来储存要操作的数据）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Entity;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String email;</span><br><span class="line">    String name;</span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    public User(String email, String name, String password)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getEmail()&#123;</span><br><span class="line">        return email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setEmail(String email)&#123;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword()&#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password)&#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b533fc07" alt="在这里插入图片描述"><br>模型中的成员属性<code>id</code>、<code>email</code>、<code>name</code>、<code>password</code>分别对应数据表user的<strong>字段</strong>，为每个成员属性添加<code>getter</code>和<code>setter</code>方法，实现对成员属性的操作。</p><h1 id="数据访问对象（DAO）模式"><a href="#数据访问对象（DAO）模式" class="headerlink" title="数据访问对象（DAO）模式"></a>数据访问对象（DAO）模式</h1><p><strong>DAO（data access object）</strong>，数据库访问对象，主要的功能就是用于惊险数据库操作的。</p><h2 id="UserDao接口"><a href="#UserDao接口" class="headerlink" title="UserDao接口"></a>UserDao接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    public void inSert(User User);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b6573640?w=1270&amp;h=677&amp;f=png&amp;s=92459" alt="在这里插入图片描述"><br><strong>抽象</strong>了User的操作，即User可以进行<strong>插入操作（inSert）</strong>。</p><h2 id="UserDao接口的实现"><a href="#UserDao接口的实现" class="headerlink" title="UserDao接口的实现"></a>UserDao接口的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Dao.impl;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public void setDataSource(DataSource dataSource)&#123;</span><br><span class="line">        this.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void inSert(User user)&#123;</span><br><span class="line">        String sql = &quot;INSERT INTO `spring`.`user` (`email`, `name`, `password`) VALUES (?, ?,?)&quot;;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">            ps.setString(1, user.getEmail());</span><br><span class="line">            ps.setString(2, user.getName());</span><br><span class="line">            ps.setString(3, user.getPassword());</span><br><span class="line">            ps.executeUpdate();</span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;catch(SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b5bcbf45?w=1781&amp;h=738&amp;f=png&amp;s=203125" alt="在这里插入图片描述"><br>这里直接用了传统的JDBC，没有使用Spring的JdbcTemplate或者别的ORM框架。<a href="https://blog.csdn.net/xueba8/article/details/84065855" target="_blank" rel="noopener">传统JDBC和Spring的JdbcTemplate区别</a><br><code>private DataSource dataSource;</code>这里对</p><h1 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;dataSource&quot;</span><br><span class="line">          class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b7cc7f72?w=1708&amp;h=627&amp;f=png&amp;s=196146" alt="在这里插入图片描述"><br>这里为了方便直接使用了<strong>直连的数据源</strong>（<a href="https://blog.csdn.net/xueba8/article/details/84107204" target="_blank" rel="noopener">关于直连的数据源和连接池的数据源</a>）,也可以使用连接池的数据源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;customerDAO&quot; class=&quot;cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>其中<code>name=&quot;dataSource&quot;</code>为向<code>cn.zhenta.www.service.impl.Dao.impl.UserDaoImpl</code>这个类名为<code>dataSource</code>成员属性<strong>注入</strong>一个<code>id</code>为<code>dataSource</code>（<code>ref=&quot;dataSource&quot;</code>）的Bean（通过setter方法即<code>setDataSource</code>），也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot;</span><br><span class="line">      class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/spring&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">    &lt;property name=&quot;password&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>这样在<code>UserDao</code>的实现类<code>UserDaoImpl</code>就能完成了数据源的装配了。</p><h1 id="装配Bean"><a href="#装配Bean" class="headerlink" title="装配Bean"></a>装配Bean</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.ImportResource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ImportResource(locations = &#123;&quot;Spring-Datasource.xml&quot;&#125;)</span><br><span class="line">@ComponentScan(basePackages = &#123;&quot;cn.zhenta.www.service.impl&quot;&#125;)</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71b9d7ab20?w=1407&amp;h=728&amp;f=png&amp;s=135454" alt="在这里插入图片描述"></p><p><code>@Configuration</code>声明这个是配置类，<code>@ImportResource</code>装配xml配置文件（Spring-Datasource.xml为直连数据源的配置文件），<code>@ComponentScan</code>开启组件扫描。</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.Dao.UserDao;</span><br><span class="line">import cn.zhenta.www.service.impl.Entity.User;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;);</span><br><span class="line">        userDao.inSert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71e6636956?w=1553&amp;h=762&amp;f=png&amp;s=184494" alt="在这里插入图片描述"></p><p><code>ContextConfiguration</code> 指定Spring配置信息来源，<code>UserDao userDAO</code>引用UserDao接口，<code>User user = new User(&quot;22&quot;, &quot;xue8&quot;,&quot;22&quot;)</code>创建一个User实体类中储存我们要保存的数据，<code>userDAO.inSert(user)</code>通过接口的实现类插入数据。<a href="https://blog.csdn.net/xueba8/article/details/83898278" target="_blank" rel="noopener">接口的引用</a></p><p>最后我们数据库成功插入了我们插入的数据。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720d71ebceb2ef?w=409&amp;h=156&amp;f=png&amp;s=11100" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;学习完了&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;Spring对JDBC的支持&lt;/a&gt;和&lt;a href=&quot;https://blog.csdn.net/xueba8/article/details/84107204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【JAVA】JAVA数据源&lt;/a&gt;之后，那我们就可以进行数据库的操作了。&lt;/p&gt;
&lt;h1 id=&quot;创建数据库&quot;&gt;&lt;a href=&quot;#创建数据库&quot; class=&quot;headerlink&quot; title=&quot;创建数据库&quot;&gt;&lt;/a&gt;创建数据库&lt;/h1&gt;&lt;p&gt;首先创建我们的数据库（这里我使用的是Mysql），为了演示方便，我这里简单的创建一个spring数据库，然后数据库有一个user用户表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个名为&lt;code&gt;spring&lt;/code&gt;的数据库。&lt;/li&gt;
&lt;li&gt;创建一个名为user的数据表，表包括id、email、name、password四个字段。&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE TABLE `user` (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `email` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `name` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `password` varchar(255) DEFAULT NULL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JAVA数据源</title>
    <link href="http://ddnd.cn/2018/11/18/Java-DataSource/"/>
    <id>http://ddnd.cn/2018/11/18/Java-DataSource/</id>
    <published>2018-11-18T08:00:19.000Z</published>
    <updated>2018-11-25T08:02:14.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们在进行数据访问，声明模板和repository之前<a href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/">【JAVA】Spring对JDBC的支持</a>，都需要配置<strong>数据源</strong>用来连接数据库。数据源又可以分为两大类：<strong><em>直连的数据源</em></strong> 和 <strong><em>连接池的数据源</em></strong> ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道<strong>连接池</strong>、<strong>数据源</strong>、<strong>JNDI</strong>是什么，分别从当什么角色，有什么作用。</p><h1 id="连接池、数据源、JNDI"><a href="#连接池、数据源、JNDI" class="headerlink" title="连接池、数据源、JNDI"></a>连接池、数据源、JNDI</h1><h2 id="连接池、数据源"><a href="#连接池、数据源" class="headerlink" title="连接池、数据源"></a>连接池、数据源</h2><p>Java中的数据源就是连接到数据库的一条<strong>路径</strong>，数据源中并无真正的数据，它仅仅记录的是你连接到<strong>哪个数据库</strong>，以及<strong>如何连接</strong>。<code>DataSource</code>的创建可以有不同的实现。<code>DataSource</code>通常被称为数据源，它包含<strong>连接池</strong> 和<strong>连接池管理</strong> 两部分，习惯上也经常把<code>DataSource</code>称为连接池。<br><a id="more"></a></p><h3 id="连接池思想"><a href="#连接池思想" class="headerlink" title="连接池思想"></a>连接池思想</h3><p>在系统<strong>初始化</strong>的时候，将数据库<strong>连接对象（Connection）</strong> 存储在内存中，当用户需要访问数据库时候，并不是建立一个新的连接，而是从连接池中取出一个已经建立好的空闲连接对象。而连接池负责分配、管理、释放数据库连接对象。注意的是：连接池是由<strong>容器（比如tomcat）</strong> 提供的，同时容器也管理着连接池。</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p><strong>JNDI（Java Naming and Directory Interface，Java命名和目录接口）</strong>，JNDI是Java平台的一个标准扩展，提供一组接口、类和关于命名空间的概念。<strong><em>其功能通俗的来说，就是提供一个类似全局的map，key保存JNDI的名称，value保存你要放到里面的资源的引用（如Java对象），以后要想要获取value的资源即可通过<code>lookup</code>名称检索</em></strong>。<br>注意：需要区分开JNDI和通过JNDI查找的数据源的概念，不能将JNDI和连接池混为一谈。</p><ul><li>这套API的主要作用在于：它可以将<strong>Java对象</strong>放在一个容器中（支持JNDI的容器例如Tomcat），并且为容器中的Java对象取一个名称，以后程序想要获得Java对象，只要通过名称检索即可。</li><li>其核心API为Context，它代表JNDI容器，其lookup方法为检索容器中对应名称的对象。</li></ul><p><strong>使用JNDI访问Tomcat内置连接池</strong></p><ul><li>将数据库驱动的包复制到Tomcat的安装目录<code>/lib/</code>中，这样Tomcat服务器才能找到数据库驱动</li><li>编写访问JNDI程序，运行在Tomcat内部，所以通常运行在servlet、jsp中</li><li>在Tomcat启动时，自动加载配置文件（<code>context.xml</code>），创建数据库连接池，该连接池由Tomcat管理。<br><img src="https://user-gold-cdn.xitu.io/2018/11/18/16725f1f2310a0a7?w=1155&amp;h=650&amp;f=png&amp;s=36621" alt="在这里插入图片描述"></li></ul><h1 id="直连的数据源"><a href="#直连的数据源" class="headerlink" title="直连的数据源"></a>直连的数据源</h1><p>用户每次请求都需要向数据库<strong>获得连接</strong>，而数据库<strong>创建连接</strong>通常需要消耗相对较大的资源，创建的时间也较长。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f691cb3?w=896&amp;h=430&amp;f=png&amp;s=45745" alt="在这里插入图片描述"></p><h1 id="连接池的数据源"><a href="#连接池的数据源" class="headerlink" title="连接池的数据源"></a>连接池的数据源</h1><h2 id="连接池的思想"><a href="#连接池的思想" class="headerlink" title="连接池的思想"></a>连接池的思想</h2><p>数据库连接是一种关键的有限的昂贵的资源，如果每次访问数据库的时候，都需要进行数据库连接，那么势必会造成<strong>性能低下</strong>；同时，如果用户失误忘记释放数据库连接，会导致<strong>资源的浪费</strong>等。而数据库连接池就是刚好可以解决这些问题，通过管理连接池中的多个<strong>连接对象（Connection）</strong>，实现连接对象（connection）重复利用，从而大大提高了数据库连接方面的性能。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720ddc3f73bc88?w=896&amp;h=490&amp;f=png&amp;s=80470" alt="在这里插入图片描述"></p><h2 id="常用的数据库连接池"><a href="#常用的数据库连接池" class="headerlink" title="常用的数据库连接池"></a>常用的数据库连接池</h2><h3 id="Tomcat内置的连接池（Tomcat-Dbcp）"><a href="#Tomcat内置的连接池（Tomcat-Dbcp）" class="headerlink" title="Tomcat内置的连接池（Tomcat Dbcp）"></a>Tomcat内置的连接池（Tomcat Dbcp）</h3><p>Tomcat在7.0以前的版本都是使用<strong>commons-dbcp</strong>作为连接池的实现，但是由于commons-dbcp饱受诟病。因此很多人会选择一些第三方的连接池组件，例如c3p0，bonecp等。为此，Tomcat从7.0开始引入了一个新的模块：Tomcat Jdbc Pool（Tomcat Dbcp）。<a href="https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html" target="_blank" rel="noopener">关于更多请看这里</a><br><strong>连接池的配置</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context&gt;</span><br><span class="line">     &lt;Resource name=&quot;jdbc/login_register&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot;</span><br><span class="line">           maxActive=&quot;100&quot; maxIdle=&quot;30&quot; maxWait=&quot;10000&quot;</span><br><span class="line">           username=&quot;root&quot; password=&quot;root&quot; driverClassName=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">           url=&quot;jdbc:mysql://localhost:3306/db_user&quot;/&gt;</span><br><span class="line">           factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure></p><p><strong>属性的说明</strong>：</p><ul><li>Resource：声明这个是<strong>资源</strong></li><li>name=指定Resource（资源）的<strong>JNDI名称</strong></li><li>auth=指定管理Resource的Manager(Container由容器创建和管理，Application由Web应用创建和管理) </li><li>factory：必需的属性，其值应为 <code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>type=指定Resource的java类（<strong>即指定JNDI能拿到的是什么类型的数据，<code>javax.sql.DataSource</code>这里指定为连接池对象</strong>）。类型应为 javax.sql.DataSource 或 javax.sql.XADataSource。根据类型，将创org.apache.tomcat.jdbc.pool.DataSource 或 org.apache.tomcat.jdbc.pool.XADataSource。</li><li>maxActive=指定连接池中处于活动状态的数据库连接的最大数量</li><li>maxIdle=指定连接池中处于空闲状态的数据库的最大数量</li><li>maxWait=指定连接池中连接处于空闲的最长时间，超过这个时间会提示异常，取值为-1，表示可以无限期等待，单位为毫秒（ms）</li></ul><p>我们需要注意的属性是<code>factory=&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</code><br>如果你没有声明以上的属性，当<strong>Tomcat</strong>读到<code>type=&quot;javax.sql.DataSource&quot;</code>属性时也会<strong>自动</strong>安装<strong>DBCP</strong>，除非你指定不同的factory。</p><p>  <strong>连接池的获取</strong>：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Context c = new InitialContext();</span><br><span class="line">            DataSource dataSource = (DataSource) c.lookup(&quot;java:/comp/env/jdbc/login_register&quot;);//这里的jdbc/login_register和篇配置文件中的name属性一致</span><br><span class="line">            conn = dataSource.getConnection();</span><br><span class="line">            return conn;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  <code>lookup</code>方法用于查找指定JNDI名称的连接池，<code>java:/comp/env/jdbc/login_registe</code>的<code>jdbc/login_registe</code>和配置文件中JNDI的名称相对应。这样既可查找到数据库连接池，也就能获得到连接对象了。当然，连接池的获取方式不只一种，比如还有通过配置文件来获取的，感兴趣的可以查阅资料。</p><p>  <strong>大概流程是这样的：</strong></p><ul><li>通过配置文件<code>Resource</code>声明资源为<strong>连接池</strong>类型（<code>javax.sql.DataSource</code>）的<strong>对象</strong></li><li>加载连接池factory，<code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code></li><li>通过JNDI找到连接池资源</li></ul><p>通过这个例子我们看到了JNDI的作用，JNDI你可以理解成一个水池的门牌,连接池就相当于这个水池，应用要取到要访问数据库时,通过找到JNDI，然后再通过连接池和数据库所建立的连接来访问。</p><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能。C3P0是改写的<code>javax.sql.DataSource</code>。</p><p><strong>连接池的配置</strong><br>配置文件：c3p0-config.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">  &lt;default-config&gt;</span><br><span class="line">//默认是mysql数据库</span><br><span class="line">     &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">  &lt;/default-config&gt;</span><br><span class="line">//也可以用oracle数据库</span><br><span class="line">  &lt;named-config name=&quot;oracleConfig&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;driverClass&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql:///项目名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;user&quot;&gt;数据库用户名&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;password&quot;&gt;数据库密码&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;initialPoolSize&quot;&gt;5&lt;/property&gt; </span><br><span class="line">     &lt;property name=&quot;maxPoolSize&quot;&gt;10&lt;/property&gt; </span><br><span class="line">   &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure></p><p><strong>连接池的获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> // 创建c3p0连接池核心工具类</span><br><span class="line">// 自动加载src下c3p0的配置文件【c3p0-config.xml】</span><br><span class="line">ComboPooledDataSource dataSource = new ComboPooledDataSource();// 使用默认的配置</span><br><span class="line">PreparedStatement pstmt = null;</span><br><span class="line">// 获取连接</span><br><span class="line">Connection con = dataSource.getConnection();</span><br><span class="line">//执行sql语句</span><br><span class="line">String sql=&quot;sql语句&quot;</span><br><span class="line">//执行</span><br><span class="line">pstmt.executeUpdate();</span><br><span class="line">//关闭连接</span><br><span class="line">pstmt.close();</span><br><span class="line">con.close();</span><br></pre></td></tr></table></figure></p><p>注意：创建C3P0的连接池时候还可以在（）加上名称，连接指定配置文件中的连接池。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource dataSource = </span><br><span class="line">      new ComboPooledDataSource(&quot;oracleConfig&quot;);</span><br></pre></td></tr></table></figure></p><p><strong>当然数据库连接池除了以上的配置、获取方式外，还有别的方式，例如用JNDI配置和获取的</strong>。</p><p><strong>连接池配置</strong><br><strong>在tomcat的context.xml里的<context>标签添加<resource>标签</resource></context></strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Resource name=&quot;jdbc/TestDB&quot; </span><br><span class="line">        auth=&quot;Container&quot; </span><br><span class="line">       factory=&quot;org.apache.naming.factory.BeanFactory&quot;</span><br><span class="line">       type=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span><br><span class="line">       driverClass=&quot;oracle.jdbc.driver.OracleDriver&quot;</span><br><span class="line">           jdbcUrl=&quot;jdbc:oracle:thin:@localhost:1521:XE&quot;</span><br><span class="line">           user=&quot;orcl&quot;</span><br><span class="line">           password=&quot;newsnews&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>不同数据源的 driverClass，jdbcUrl等 属性不同，依照连接池自身的属性配置，这里是使用的c3p0数据源，若使用其他数据源要修改属性。<code>jdbc/TestDB</code>为JNDI名称。</p><p><strong>在项目的web.xml添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;resource-ref&gt;</span><br><span class="line">    &lt;description&gt;DB Connection&lt;/description&gt;</span><br><span class="line">    &lt;res-ref-name&gt;jdbc/TestDB&lt;/res-ref-name&gt;</span><br><span class="line">    &lt;res-type&gt;javax.sql.DataSource&lt;/res-type&gt;</span><br><span class="line">    &lt;res-auth&gt;Container&lt;/res-auth&gt;</span><br><span class="line"> &lt;/resource-ref&gt;</span><br></pre></td></tr></table></figure></p><p>res-ref-name引入context.xml里配置的Resource,res-type都设置为javax.sql.DataSource。</p><p><strong>在spring的applicationContext.xml配置里添加</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jndi.JndiObjectFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;jndiName&quot; value=&quot;java:/comp/env/jdbc/TestDB&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h3><p><strong>DBCP（Database Connection Pool）</strong> 是一个依赖Jakarta commons-pool对象池机制的数据库连接池，Tomcat的数据源使用的就是DBCP。</p><p><strong>连接池配置</strong><br>dbcpconfig.properties文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/db_user</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">initialSize=10</span><br><span class="line">maxActive=50</span><br><span class="line">maxIdle=20</span><br><span class="line">minIdle=5</span><br><span class="line">maxWait=60000</span><br><span class="line">connectionProperties=useUnicode=true;characterEncoding=utf8</span><br><span class="line">defaultAutoCommit=true</span><br><span class="line">defaultReadOnly=</span><br><span class="line">defaultTransactionIsolation=REPEATABLE_READ</span><br></pre></td></tr></table></figure></p><p><strong>连接池获取</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class DBUtil &#123;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            conn = getDataSource().getConnection();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static DataSource getDataSource()&#123;</span><br><span class="line">        DataSource dataSource=null;</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        try &#123;</span><br><span class="line">            p.load(DBUtil.class.getClassLoader().getResourceAsStream(&quot;dbcpconfig.properties&quot;));</span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource(p);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;获取DataSource对象失败&quot;);</span><br><span class="line">        &#125; </span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h3><p>编写连接池需要实现<code>javax.sql.DataSource</code>接口，具体可以网上查阅相关资料。</p><h3 id="其他连接池"><a href="#其他连接池" class="headerlink" title="其他连接池"></a>其他连接池</h3><p>还有更多的连接池例如：Proxool、BoneCP、HikariCP、阿里druid等可以自行查阅资料。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上，介绍了几种常用的数据源连接池；这几种连接池在使用过程，即支持硬编码的方式，也支持配置文件的配置方式；在正式实用的时候，应该尽量使用配置的方式，便于维护和管理。硬编码的方式，可以做为测试使用。同时，spring框架，通过他自己的方式集成上述几种数据源，理论上来说，都支持。各个数据源连接池都有一些公有的属性，因为他们都是从javax.sql.datasource继 承而来，而且都有最大连接数，初始化连接数等概念。同时，他们又分别有各自不同的属性，做了扩展。这里只是简单的介绍，在实际使用中，想要实现高性能的数 据库连接池管理，还需要深入研究每种方式的连接属性配置；例如：根据实际需要，设置合适的最小连接数和最大连接数，等待时间等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们在进行数据访问，声明模板和repository之前&lt;a href=&quot;http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/&quot;&gt;【JAVA】Spring对JDBC的支持&lt;/a&gt;，都需要配置&lt;strong&gt;数据源&lt;/strong&gt;用来连接数据库。数据源又可以分为两大类：&lt;strong&gt;&lt;em&gt;直连的数据源&lt;/em&gt;&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;连接池的数据源&lt;/em&gt;&lt;/strong&gt; ，其中连接池的数据源又有多种，接下来就让我们来学习一下这两种数据源。当然在学习之前，我们首先需要知道&lt;strong&gt;连接池&lt;/strong&gt;、&lt;strong&gt;数据源&lt;/strong&gt;、&lt;strong&gt;JNDI&lt;/strong&gt;是什么，分别从当什么角色，有什么作用。&lt;/p&gt;
&lt;h1 id=&quot;连接池、数据源、JNDI&quot;&gt;&lt;a href=&quot;#连接池、数据源、JNDI&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源、JNDI&quot;&gt;&lt;/a&gt;连接池、数据源、JNDI&lt;/h1&gt;&lt;h2 id=&quot;连接池、数据源&quot;&gt;&lt;a href=&quot;#连接池、数据源&quot; class=&quot;headerlink&quot; title=&quot;连接池、数据源&quot;&gt;&lt;/a&gt;连接池、数据源&lt;/h2&gt;&lt;p&gt;Java中的数据源就是连接到数据库的一条&lt;strong&gt;路径&lt;/strong&gt;，数据源中并无真正的数据，它仅仅记录的是你连接到&lt;strong&gt;哪个数据库&lt;/strong&gt;，以及&lt;strong&gt;如何连接&lt;/strong&gt;。&lt;code&gt;DataSource&lt;/code&gt;的创建可以有不同的实现。&lt;code&gt;DataSource&lt;/code&gt;通常被称为数据源，它包含&lt;strong&gt;连接池&lt;/strong&gt; 和&lt;strong&gt;连接池管理&lt;/strong&gt; 两部分，习惯上也经常把&lt;code&gt;DataSource&lt;/code&gt;称为连接池。&lt;br&gt;
    
    </summary>
    
      <category term="Java编程基础" scheme="http://ddnd.cn/categories/Java-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring对JDBC的支持</title>
    <link href="http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/"/>
    <id>http://ddnd.cn/2018/11/18/Spring-Jdbc-Support/</id>
    <published>2018-11-18T07:58:04.000Z</published>
    <updated>2018-11-25T07:59:28.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准<strong>接口</strong> JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的<strong>接口类</strong>，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。</p><p>利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在<strong>Java对象</strong>与<strong>关系数据</strong>之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为<strong>对象-关系映射（Ovject/Relation Mapping，ORM）</strong>。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了<strong>JPA（Java Persistence API）</strong>。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。<br><a id="more"></a><br>好了，说了这么多，也是为了大家能清楚JDBC和JPA的区别。回归正题，本文关注的是Spring对JDBC的支持，至于Spring对于JPA的支持往后的文章再介绍。</p><h1 id="Spring对JDBC的封装"><a href="#Spring对JDBC的封装" class="headerlink" title="Spring对JDBC的封装"></a>Spring对JDBC的封装</h1><h2 id="传统的JDBC"><a href="#传统的JDBC" class="headerlink" title="传统的JDBC"></a>传统的JDBC</h2><p>首先我们了解一下传统JDBC的工作流程</p><ul><li>加载数据库驱动程序（Mysql、SQL Server等）</li><li>通过<code>DriverManager</code>获取<code>Connection</code>对象</li><li>获取Statement对象</li><li>执行SQL语句</li><li>操作结果集ResultSet</li><li>关闭资源</li></ul><p>传统的JDBC使用过程中有一定的局限：</p><ol><li>都需要按照上面的6个步骤进行数据库的访问，应用程序中可能会出现大量重复的代码。</li><li>数据库访问的代码和业务代码混杂在一起，难以维护。</li><li>不适当的SQL异常处理操作，有时候程序员并不清楚如何处理SQL异常但又不能忽略（检查性异常，编译器不通过）。</li><li>……<h2 id="Spring对于JDBC的封装"><a href="#Spring对于JDBC的封装" class="headerlink" title="Spring对于JDBC的封装"></a>Spring对于JDBC的封装</h2>鉴于传统JDBC的不足，Spring对JDBC进行深层次的封装（<strong>JdbcTemplate</strong>）,让JDBC更加易用和维护，也降低了代码的耦合度。接下来让我们来了解一下Spring是怎么封装的JDBC。<h3 id="Spring的数据访问哲学"><a href="#Spring的数据访问哲学" class="headerlink" title="Spring的数据访问哲学"></a>Spring的数据访问哲学</h3>为了避免持久化的逻辑分散到应用的各个组件中，最好将数据访问的功能放到一个或多个专注与此项任务的组件中。这样的组件通常称为数据<strong>访问对象（Data Access object DAO）</strong> 或<strong>Repository</strong>。<br>为了避免应用于特定的数据访问策略耦合在一起，编写良好的Repository应该以<strong>接口</strong>的方式暴露功能。如下图。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac879cb0?w=945&amp;h=382&amp;f=png&amp;s=171916" alt="在这里插入图片描述"></li></ol><p>服务对象通过接口来访问Repository。<a href="https://blog.csdn.net/xueba8/article/details/84071837" target="_blank" rel="noopener">【设计模式】MVC模式与三层架构关系</a></p><h3 id="数据访问模板化"><a href="#数据访问模板化" class="headerlink" title="数据访问模板化"></a>数据访问模板化</h3><p>在我们进行数据访问的过程中，我们都需要<strong>获取</strong>到一个数据存储的连接并在处理完成后<strong>释放</strong>。这些都是在数据访问处理过程中固定步骤，但是每种数据访问的方法又会有些不同，我们会查询不同的对象或以不同的方式更新数据，这都是数据访问过程中变化的部分。<br>Spring将数据访问过程中固定的和可变的部分明确划分为两个不同的类：<strong>模板（template）</strong> 和<strong>回调（callback）</strong>。模板管理过程中固定的部分，而回调处理自定义的数据访问代码。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dd3ac78e04c?w=875&amp;h=446&amp;f=png&amp;s=319992" alt="在这里插入图片描述"></p><h2 id="传统JDBC和Spring封装的JdbcTemplate区别"><a href="#传统JDBC和Spring封装的JdbcTemplate区别" class="headerlink" title="传统JDBC和Spring封装的JdbcTemplate区别"></a>传统JDBC和Spring封装的JdbcTemplate区别</h2><table><thead><tr><th>操作</th><th>传统JDBC</th><th>JdbcTemplate</th></tr></thead><tbody><tr><td>获取JDBC连接</td><td>√</td><td></td></tr><tr><td>声明SQL</td><td>√</td><td>√</td></tr><tr><td>预编译SQL</td><td>√</td><td></td></tr><tr><td>执行SQL</td><td>√</td><td></td></tr><tr><td>处理结果集</td><td>√</td><td>√</td></tr><tr><td>释放结果集</td><td>√</td><td></td></tr><tr><td>释放Statement</td><td>√</td><td></td></tr><tr><td>提交事务</td><td>√</td><td></td></tr><tr><td>处理异常并回滚事务</td><td>√</td><td></td></tr><tr><td>释放JDBC连接</td><td>√</td></tr></tbody></table><p>由表格我们就可以看出，JdbcTemplate 只需程序员关注需要<strong>执行的SQL</strong>和<strong>获取结果</strong>，而别的部分操作则不需要程序员关注，模板都帮处理好了，这样一看，JdbcTemplate 是不是比JDBC用起来更加方便呀？<br>本文介绍的是Spring对JDBC的支持（JdbcTemplate），至于Spring对JPA的支持（HibernateTemplate、JpaTemplate后面文章再写）</p><blockquote><p>欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;企业应用程序经常要访问存储在数据库中的信息，因此JDK提供了一个标准&lt;strong&gt;接口&lt;/strong&gt; JDBC（Java DataBase Connection，Java数据库连接）来进行数据库访问操作。JDBC为多种关系数据库提供了统一访问方式，作为特定厂商数据库访问API的一种高级抽象，它主要包含一些通用的&lt;strong&gt;接口类&lt;/strong&gt;，所以真正的数据库访问操作实现是由各自数据库厂商提供的。通常把厂商提供的特定于数据库的访问API称为数据库JDBC驱动程序，如：Mysql、Oracle、SQL Server驱动等等。&lt;/p&gt;
&lt;p&gt;利用JDBC虽然可以方便地访问存储在关系数据库中的信息，但是代码比较繁琐，开发人员不得不在&lt;strong&gt;Java对象&lt;/strong&gt;与&lt;strong&gt;关系数据&lt;/strong&gt;之间进行转换。因此，随着企业应用开发技术的进步。逐渐产生了用来实现Java对象与关系数据之间自动映射的持久化框架，称为&lt;strong&gt;对象-关系映射（Ovject/Relation Mapping，ORM）&lt;/strong&gt;。这些持久化框架包括Hibernate、Mybatis等等。为了进一步促进Java EE企业应用开发，进一步规范ORM实现，Java EE 5.0规范中推出了&lt;strong&gt;JPA（Java Persistence API）&lt;/strong&gt;。需要注意的是，JPA是一个ORM的标准规范，而不是一个具体的ORM框架。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Jdbc" scheme="http://ddnd.cn/tags/Jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解自动装配Bean</title>
    <link href="http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/"/>
    <id>http://ddnd.cn/2018/11/17/Spring-Bean-Annotation/</id>
    <published>2018-11-17T07:50:54.000Z</published>
    <updated>2018-11-25T07:53:30.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>上文：<a href="http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/">Spring自动装配Bean实现hello world</a> 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。</p><h2 id="开启自动化装配Bean"><a href="#开启自动化装配Bean" class="headerlink" title="开启自动化装配Bean"></a>开启自动化装配Bean</h2><h3 id="通过xml开启"><a href="#通过xml开启" class="headerlink" title="通过xml开启"></a>通过xml开启</h3><p>需要开启注解装配功能，则需要在web.xml中加入配置<code>&lt;context:annotation-config /&gt;</code>或者<code>&lt; component-scan /&gt;</code>，配置代码的如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans </span><br><span class="line">//...</span><br><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">//...</span><br><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">&lt;context:annotation-config /&gt; //或者&lt;component-scan /&gt;</span><br><span class="line">//...</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这两者的区别如下：</p><p> &lt;context:annotation-config&gt;：<br> :  是用于<strong>激活</strong>那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式），是对已注册Bean的进行操作的配置，也就是说，Bean需要首先通过某种方式（比如Xml配置，或者其他注解）被注册，然后使用这个配置，可以对已注册的Bean进行进一步操作（比如注入到某个类的内部），也就是说，这个配置是用于“激活”已注册的Bean的，让已注册的Bean开始工作。</p><p>&lt;context:component-scan&gt;：<br>:  除了具有<code>&lt;context:annotation-config&gt;</code>的功能之外，<code>&lt;context:component-scan&gt;</code>还可以在指定的package下扫描以及注册javabean</p><p> 另外compontent-scan可以扫描类、方法、属性上面的注解； compontent-config只扫描属性上面的注解。</p><h3 id="通过JAVA代码开启"><a href="#通过JAVA代码开启" class="headerlink" title="通过JAVA代码开启"></a>通过JAVA代码开启</h3><p>创建Config.java，Config配置类，首先需要添加<code>@Configuration</code> ，声明这个类为配置类，然后添加<code>@ComponentScan()</code><br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.Config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan()</span><br><span class="line">public class Config &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36cf86506?w=1402&amp;h=601&amp;f=png&amp;s=112504" alt="在这里插入图片描述"><br>@Configuration<br>: 表明这个类是<strong>配置类</strong>，这个类相当于web.xml的作用。<code>@Configuration</code>标注在类上，相当于把该类作为spring的xml配置文件中的<code>&lt;beans&gt;</code>，作用为：配置spring容器(应用上下文)。</p><p>@ComponentScan()<br>:  作用是，开启<strong>组件扫描</strong>，去寻找带有@Component注解的类，并且为其创建Bean。<code>ComponentScan()</code>可以扫描指定的包，例如<code>@ComponentScan(basePackages = &quot;cn.zhenta.www.service.impl&quot;)</code>则会扫描<code>cn.zhenta.www.service.impl</code>这个包以及这个包下的所有子包。</p><h2 id="通过注解声明组件类"><a href="#通过注解声明组件类" class="headerlink" title="通过注解声明组件类"></a>通过注解声明组件类</h2><p>在需要声明为组件类的<strong>类</strong>（只适用于类）上，添加<code>@Component</code>注解，这个注解表明该类会作为组件类（ComponentScan() 既通过这个注解扫描），并告知Spring要为这个类创建Bean。<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestA;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component()</span><br><span class="line">public class TestA</span><br><span class="line">&#123;</span><br><span class="line">    public void pri()&#123;</span><br><span class="line">        System.out.println(&quot;hi &quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6582ec?w=1254&amp;h=570&amp;f=png&amp;s=97323" alt="在这里插入图片描述"><br>其中不只有<code>@Component</code>这个注解，还有如下：<br><code>@Service</code>用于标注业务层组件<br><code>@Controller</code>用于标注控制层组件（如struts中的action）<br><code>@Repository</code>用于标注数据访问组件，即DAO组件<br><code>@Component</code>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><h2 id="通过注解实现自动装配"><a href="#通过注解实现自动装配" class="headerlink" title="通过注解实现自动装配"></a>通过注解实现自动装配</h2><p>简单来说，自动装配就是让Spring自动满足Bean<strong>依赖</strong>的一种方法，在满足依赖的过程中，会在Spring应用上下文中寻找匹配某个Bean需求的其他Bean。为了声明要进行自动装配，我们可以借助Spring的<code>@Autowired</code>注解。</p><p>其中<code>@Autowired</code>可以作用在多个地方</p><ol><li>setter方法</li><li>构造方法</li><li>成员属性</li><li>任意方法</li></ol><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestB;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestA.TestA;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class TestB &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private TestA testA;</span><br><span class="line">    public void priTestA()&#123;</span><br><span class="line">        this.testA = testA;</span><br><span class="line">        testA.pri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36d6b5f36?w=1261&amp;h=647&amp;f=png&amp;s=134125" alt="在这里插入图片描述"></p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><p>以上已经开启自动化装配、注解声明组件类、注解实现自动化装配，那么我们该如何在测试这些配置好了没有呢，这就需要用到我们的测试类了。首先创建一个TestC.java 作为我们的测试类，在类上添加<code>@ContextConfiguration(classes = cn.zhenta.www.service.impl.TestB.TestB.class)</code>其中<strong>classes = 你的配置类的命名空间</strong>，再添加<code>@RunWith(SpringJUnit4ClassRunner.class)</code>，那这两个注解有什么作用呢？</p><p>@ContextConfiguration()<br>:  <code>@ContextConfiguration()</code>注释标签是 Spring test context 提供的，<strong><em>用来指定 Spring 配置信息的来源</em></strong>，支持指定 XML 文件位置或者 Spring 配置类的命名空间。</p><p>@RunWith()<br>:  <code>@RunWith()</code> 注释标签是 Junit 提供的，用来说明此测试类的运行者，这里用了 SpringJUnit4ClassRunner，这个类是一个针对 Junit 运行环境的自定义扩展，用来标准化在 Spring 环境中 Junit4.5 的测试用例，例如支持的注释标签的标准化。</p><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl.TestC;</span><br><span class="line"></span><br><span class="line">import cn.zhenta.www.service.impl.TestB.TestB;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">@ContextConfiguration(classes = cn.zhenta.www.service.impl.Config.Config.class)</span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">public class TestC &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TestB testB = new TestB();</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void dd()&#123;</span><br><span class="line">        testB.priTestA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dc36f2501b4?w=1383&amp;h=586&amp;f=png&amp;s=129001" alt="在这里插入图片描述"></p><p>运行测试类，最后输出：hi。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;上文：&lt;a href=&quot;http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/&quot;&gt;Spring自动装配Bean实现hello world&lt;/a&gt; 介绍了Spring使用xml配置实现自动装配Bean，但是通过xml配置自动装配的方式，会显得比较累赘、比较麻烦，那接下来的注解自动装配将会改善这个问题。&lt;/p&gt;
&lt;h2 id=&quot;开启自动化装配Bean&quot;&gt;&lt;a href=&quot;#开启自动化装配Bean&quot; class=&quot;headerlink&quot; title=&quot;开启自动化装配Bean&quot;&gt;&lt;/a&gt;开启自动化装配Bean&lt;/h2&gt;&lt;h3 id=&quot;通过xml开启&quot;&gt;&lt;a href=&quot;#通过xml开启&quot; class=&quot;headerlink&quot; title=&quot;通过xml开启&quot;&gt;&lt;/a&gt;通过xml开启&lt;/h3&gt;&lt;p&gt;需要开启注解装配功能，则需要在web.xml中加入配置&lt;code&gt;&amp;lt;context:annotation-config /&amp;gt;&lt;/code&gt;或者&lt;code&gt;&amp;lt; component-scan /&amp;gt;&lt;/code&gt;，配置代码的如下。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;beans &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	http://www.springframework.org/schema/context/spring-context-2.5.xsd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;context:annotation-config /&amp;gt; //或者&amp;lt;component-scan /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring自动装配Bean实现hello</title>
    <link href="http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/"/>
    <id>http://ddnd.cn/2018/11/17/Spring-Bean-Automatic/</id>
    <published>2018-11-17T07:48:26.000Z</published>
    <updated>2018-11-25T07:50:11.355Z</updated>
    
    <content type="html"><![CDATA[<p>通过xml配置自动装配Bean<br>1.创建一个简单的类test，作为被调用的Spring Bean。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl;</span><br><span class="line"> </span><br><span class="line">public class test</span><br><span class="line">&#123;</span><br><span class="line">    private String sex;</span><br><span class="line"> </span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public void pri()&#123;</span><br><span class="line">        System.out.println(&quot;hi &quot; + sex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中test类有一个sex的成员属性，两个方法（至于为什么有个setSex的方法，在第三点进行解释）。我们要实现的是另一个类通过xml自动装配这个类（Bean），来调用这个类的pri方法。所以我们再创建一个test1类，作为执行者。</p><p>2.创建执行的类test1，进行调用test的pri方法。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package cn.zhenta.www.service.impl;</span><br><span class="line"> </span><br><span class="line">import org.apache.xbean.spring.context.ClassPathXmlApplicationContext;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line"> </span><br><span class="line">public class test1 &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext a = new ClassPathXmlApplicationContext(&quot;test.xml&quot;);</span><br><span class="line">        test obj = (test) a.getBean(&quot;helloBean&quot;);</span><br><span class="line">        obj.pri();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>被调用的类test和调用的类test1都创建好了，其中test.xml对应的是xml配置文件名称，helloBean对应的是test.xml配置文件中Bean的id，pri（）即为test的pri方法，仅仅通过这两句话就可以不用实例化test类，即可调用test类的方法，怎么做到的呢？这就需要用到我们Spring的自动装配了，首先需要配置xml文件。</p><p>3.创建text.xml配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;bean id=&quot;helloBean&quot; class=&quot;cn.zhenta.www.service.impl.test&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;sex&quot; value=&quot;xsx&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><p>配置文件写好了，那配置文件里面的内容是什么意思呢？让我们慢慢道来，首先<bean></bean>声明这是个Bean，然后class即为你要配置为Bean的类的命名空间（我这里对应的是第1点的test类），id即为表示你这个Bean的标识符（自己随意起名，不冲突即可），而property作为bean的属性，也就是指一个类中的成员，既name=“sex”对应test的sex成员变量，同时这个成员必须有get和set方法（既test类中的setSex（）方法，需要注意的是setXXX的XXX需要为成员变量的名字），至于为什么要有set，get方法，可以阅读Spring IOC相关知识，至于property的用法，以下列举出一些常用的。</p><p>property的一般用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;playerDataManager&quot; class=&quot;com.cp.game.PlayerDataManager&quot; init-method=&quot;init&quot; scope=&quot;singleton&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=&quot;sleepTime&quot; value=&quot;$&#123;app.dispatcher.sleepTime&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>//从外部的property文件中用el表达式获取值</p><p><code>&lt;property name=&quot;sleepTime&quot; value=&quot;333&quot; /&gt;</code> //直接在赋值</p><p><code>&lt;property name=&quot;playerDao&quot; ref=&quot;playerDao&quot; /&gt;</code> 引用其他bean对象。 ref的值是其他bean的id名</p><p>4.运行结果<br>运行test1后，输出的内容是：hi xsx。</p><p>5.补充<br>两个Bean，person 和 ability。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yiibai.common;</span><br><span class="line"> </span><br><span class="line">public class Person </span><br><span class="line">&#123;</span><br><span class="line">private Ability ability;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br><span class="line">package com.yiibai.common;</span><br><span class="line"> </span><br><span class="line">public class Ability </span><br><span class="line">&#123;</span><br><span class="line">private String skill;</span><br><span class="line">//...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过装配 hre装配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;person&quot; class=&quot;com.yiibai.common.Person&quot;&gt;</span><br><span class="line">&lt;property name=&quot;ability&quot; ref=&quot;invisible&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=&quot;invisible&quot; class=&quot;com.yiibai.common.Ability&quot; &gt;</span><br><span class="line">&lt;property name=&quot;skill&quot; value=&quot;Invisible&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">```    </span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">Person [ability=Ability [skill=Invisible]]</span><br><span class="line">注意：想要自动装载，需要获Spring的上下文！</span><br></pre></td></tr></table></figure></p><p>ApplicationContext a = new ClassPathXmlApplicationContext(“test.xml”);<br> test obj = (test) a.getBean(“helloBean”);<br><code>`</code></p><blockquote><p>下一篇更新使用注解自动装载的时候，就不需要使用代码来获取了。欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过xml配置自动装配Bean&lt;br&gt;1.创建一个简单的类test，作为被调用的Spring Bean。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package cn.zhenta.www.service.impl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setSex(String sex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void pri()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;hi &amp;quot; + sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中test类有一个sex的成员属性，两个方法（至于为什么有个setSex的方法，在第三点进行解释）。我们要实现的是另一个类通过xml自动装配这个类（Bean），来调用这个类的pri方法。所以我们再创建一个test1类，作为执行者。&lt;/p&gt;
&lt;p&gt;2.创建执行的类test1，进行调用test的pri方法。&lt;br&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://ddnd.cn/categories/Spring-Programming/"/>
    
    
      <category term="Spring" scheme="http://ddnd.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>接口的引用</title>
    <link href="http://ddnd.cn/2018/11/17/Java-Interface/"/>
    <id>http://ddnd.cn/2018/11/17/Java-Interface/</id>
    <published>2018-11-17T07:44:03.000Z</published>
    <updated>2018-11-25T07:47:27.183Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习java的过程中，遇到了一下代码。<br>代码1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Handler｛</span><br><span class="line">  public void Hello();</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>代码2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Handler;</span><br><span class="line">public class OtherParser&#123;</span><br><span class="line">  Handler handler;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码1说明了Handler是一个接口了，既接口不能直接实例化，必须经过实现类继承这个接口之后，实例化实现类。那为啥代码2可以直接声明Handler呢？原因是，代码2只是对Handler接口的引用（在对接口的引用时，采用的是实例化实现该接口的类，前提是你实现这个接口的类已经加上@Component注解，引用这个接口的时候才会自动注入相关的实现类），并不是实例化！</p><p>接口是永远不能被实例化的，而2中只是对接口做引用，并没有被实例化。<br>接口可以看成是高度抽象的抽象类，它描述的事物们所共有的方法（方法签名），也就是规定除了该接口的方法的调用参数与规则，仅仅而已，它的使用必须依赖于实现类。<br>例如：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> public class MyHandler implements Handler&#123;</span><br><span class="line">  public void Hellp()&#123;</span><br><span class="line">    System.out.println(&quot;my Handler implements&quot;);</span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>而在对接口的引用时，采用的是实例化实现该接口的类<br>Handler handler = new MyHander();</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习java的过程中，遇到了一下代码。&lt;br&gt;代码1：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Handler｛&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void Hello();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;｝&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码2：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import Handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class OtherParser&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Handler handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码1说明了Handler是一个接口了，既接口不能直接实例化，必须经过实现类继承这个接口之后，实例化实现类。那为啥代码2可以直接声明Handler呢？原因是，代码2只是对Handler接口的引用（在对接口的引用时，采用的是实例化实现该接口的类，前提是你实现这个接口的类已经加上@Component注解，引用这个接口的时候才会自动注入相关的实现类），并不是实例化！&lt;/p&gt;
&lt;p&gt;接口是永远不能被实例化的，而2中只是对接口做引用，并没有被实例化。&lt;br&gt;接口可以看成是高度抽象的抽象类，它描述的事物们所共有的方法（方法签名），也就是规定除了该接口的方法的调用参数与规则，仅仅而已，它的使用必须依赖于实现类。&lt;br&gt;例如：&lt;br&gt;
    
    </summary>
    
      <category term="Java编程基础" scheme="http://ddnd.cn/categories/Java-Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>MVC模式与三层架构关系</title>
    <link href="http://ddnd.cn/2018/11/14/Technique-Mvc-3ta/"/>
    <id>http://ddnd.cn/2018/11/14/Technique-Mvc-3ta/</id>
    <published>2018-11-14T07:55:03.000Z</published>
    <updated>2018-11-25T07:57:13.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于许多新手都不明白<strong>MVC模式</strong>和<strong>三层架构</strong>的关系，本人也是，特地整合了网上的一些文章对MVC模式和三层架构的关系进行介绍，希望对大家有帮助。</p><h1 id="关于三层架构"><a href="#关于三层架构" class="headerlink" title="关于三层架构"></a>关于三层架构</h1><p>在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。<br><a id="more"></a></p><ol><li><strong>表示层（UI）</strong>：通俗讲就是展现给用户的界面，即用户在使用一个系统的时候他的所见所得。 　</li><li><strong>业务逻辑层（BLL）</strong>：针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑处理。 </li><li><strong>数据访问层（DAL）</strong>：该层所做事务直接操作数据库，针对数据的增添、删除、修改、查找等。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca8596d4c4?w=633&amp;h=417&amp;f=png&amp;s=23970" alt="在这里插入图片描述"><h1 id="关于MVC模式"><a href="#关于MVC模式" class="headerlink" title="关于MVC模式"></a>关于MVC模式</h1><strong>模型-视图-控制器（MVC模式）</strong> 是一种非常经典的软件架构模式，在UI框架和UI设计思路中扮演着非常重要的角色。从设计模式的角度来看，MVC模式是一种复合模式，它将多个设计模式在一种解决方案中结合起来，用来解决许多设计问题。MVC模式把用户界面交互分拆到不同的三种角色中，使应用程序被分成三个核心部件：Model（模型）、View（视图）、Control（控制器）。它们各自处理自己的任务：</li><li>模型：模型持有所有的数据、状态和程序逻辑。模型独立于视图和控制器。</li><li>视图：用来呈现模型。视图通常直接从模型中取得它需要显示的状态与数据。对于相同的信息可以有多个不同的显示形式或视图。</li><li>控制器：位于视图和模型中间，负责接受用户的输入，将输入进行解析并反馈给模型，通常一个视图具有一个控制器。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85e74ffa?w=490&amp;h=299&amp;f=png&amp;s=68735" alt="在这里插入图片描述"><h1 id="两者关系"><a href="#两者关系" class="headerlink" title="两者关系"></a>两者关系</h1>MVC是 Model-View-Controller，严格说这三个加起来以后才是三层架构中的<strong>UI层</strong>，也就是说，MVC把三层架构中的UI层再度进行了分化，分成了控制器、视图、实体三个部分，控制器完成页面逻辑，通过实体来与界面层完成通话；<strong>而C层直接与三层中的BLL进行对话</strong>。MVC可以是三层中的一个表现层框架，属于表现层。三层和MVC可以共存。<br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85d739c1?w=279&amp;h=168&amp;f=png&amp;s=8999" alt="在这里插入图片描述"><br><img src="https://user-gold-cdn.xitu.io/2018/11/17/16720dca85bf4a98?w=986&amp;h=345&amp;f=png&amp;s=317075" alt="在这里插入图片描述"></li></ol><blockquote><p>欢迎加入JAVA学习群949419296，一起交流！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;对于许多新手都不明白&lt;strong&gt;MVC模式&lt;/strong&gt;和&lt;strong&gt;三层架构&lt;/strong&gt;的关系，本人也是，特地整合了网上的一些文章对MVC模式和三层架构的关系进行介绍，希望对大家有帮助。&lt;/p&gt;
&lt;h1 id=&quot;关于三层架构&quot;&gt;&lt;a href=&quot;#关于三层架构&quot; class=&quot;headerlink&quot; title=&quot;关于三层架构&quot;&gt;&lt;/a&gt;关于三层架构&lt;/h1&gt;&lt;p&gt;在软件体系架构设计中，分层式结构是最常见，也是最重要的一种结构。微软推荐的分层式结构一般分为三层，从下至上分别为：数据访问层、业务逻辑层（又或称为领域层）、表示层。&lt;br&gt;
    
    </summary>
    
      <category term="技术杂谈" scheme="http://ddnd.cn/categories/Technique/"/>
    
    
      <category term="MVC" scheme="http://ddnd.cn/tags/MVC/"/>
    
  </entry>
  
</feed>
